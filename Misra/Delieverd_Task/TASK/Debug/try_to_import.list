
try_to_import.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003710  08000130  08000130  00010130  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000060  08003840  08003840  00013840  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080038a0  080038a0  00020004  2**0
                  CONTENTS
  4 .ARM          00000000  080038a0  080038a0  00020004  2**0
                  CONTENTS
  5 .preinit_array 00000000  080038a0  080038a0  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080038a0  080038a0  000138a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080038a4  080038a4  000138a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  080038a8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000121c  20000004  080038ac  00020004  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001220  080038ac  00021220  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c383  00000000  00000000  0002002d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001e94  00000000  00000000  0002c3b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000728  00000000  00000000  0002e248  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000678  00000000  00000000  0002e970  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00001c84  00000000  00000000  0002efe8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000084f9  00000000  00000000  00030c6c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0001179f  00000000  00000000  00039165  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0004a904  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001bc0  00000000  00000000  0004a958  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000004 	.word	0x20000004
 800014c:	00000000 	.word	0x00000000
 8000150:	08003828 	.word	0x08003828

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000008 	.word	0x20000008
 800016c:	08003828 	.word	0x08003828

08000170 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8000170:	b480      	push	{r7}
 8000172:	b083      	sub	sp, #12
 8000174:	af00      	add	r7, sp, #0
 8000176:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000178:	687b      	ldr	r3, [r7, #4]
 800017a:	f103 0208 	add.w	r2, r3, #8
 800017e:	687b      	ldr	r3, [r7, #4]
 8000180:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8000182:	687b      	ldr	r3, [r7, #4]
 8000184:	f04f 32ff 	mov.w	r2, #4294967295
 8000188:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800018a:	687b      	ldr	r3, [r7, #4]
 800018c:	f103 0208 	add.w	r2, r3, #8
 8000190:	687b      	ldr	r3, [r7, #4]
 8000192:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000194:	687b      	ldr	r3, [r7, #4]
 8000196:	f103 0208 	add.w	r2, r3, #8
 800019a:	687b      	ldr	r3, [r7, #4]
 800019c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800019e:	687b      	ldr	r3, [r7, #4]
 80001a0:	2200      	movs	r2, #0
 80001a2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80001a4:	bf00      	nop
 80001a6:	370c      	adds	r7, #12
 80001a8:	46bd      	mov	sp, r7
 80001aa:	bc80      	pop	{r7}
 80001ac:	4770      	bx	lr

080001ae <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80001ae:	b480      	push	{r7}
 80001b0:	b083      	sub	sp, #12
 80001b2:	af00      	add	r7, sp, #0
 80001b4:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 80001b6:	687b      	ldr	r3, [r7, #4]
 80001b8:	2200      	movs	r2, #0
 80001ba:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80001bc:	bf00      	nop
 80001be:	370c      	adds	r7, #12
 80001c0:	46bd      	mov	sp, r7
 80001c2:	bc80      	pop	{r7}
 80001c4:	4770      	bx	lr

080001c6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80001c6:	b480      	push	{r7}
 80001c8:	b085      	sub	sp, #20
 80001ca:	af00      	add	r7, sp, #0
 80001cc:	6078      	str	r0, [r7, #4]
 80001ce:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80001d0:	687b      	ldr	r3, [r7, #4]
 80001d2:	685b      	ldr	r3, [r3, #4]
 80001d4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80001d6:	683b      	ldr	r3, [r7, #0]
 80001d8:	68fa      	ldr	r2, [r7, #12]
 80001da:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80001dc:	68fb      	ldr	r3, [r7, #12]
 80001de:	689a      	ldr	r2, [r3, #8]
 80001e0:	683b      	ldr	r3, [r7, #0]
 80001e2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80001e4:	68fb      	ldr	r3, [r7, #12]
 80001e6:	689b      	ldr	r3, [r3, #8]
 80001e8:	683a      	ldr	r2, [r7, #0]
 80001ea:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80001ec:	68fb      	ldr	r3, [r7, #12]
 80001ee:	683a      	ldr	r2, [r7, #0]
 80001f0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80001f2:	683b      	ldr	r3, [r7, #0]
 80001f4:	687a      	ldr	r2, [r7, #4]
 80001f6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80001f8:	687b      	ldr	r3, [r7, #4]
 80001fa:	681b      	ldr	r3, [r3, #0]
 80001fc:	1c5a      	adds	r2, r3, #1
 80001fe:	687b      	ldr	r3, [r7, #4]
 8000200:	601a      	str	r2, [r3, #0]
}
 8000202:	bf00      	nop
 8000204:	3714      	adds	r7, #20
 8000206:	46bd      	mov	sp, r7
 8000208:	bc80      	pop	{r7}
 800020a:	4770      	bx	lr

0800020c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800020c:	b480      	push	{r7}
 800020e:	b085      	sub	sp, #20
 8000210:	af00      	add	r7, sp, #0
 8000212:	6078      	str	r0, [r7, #4]
 8000214:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8000216:	683b      	ldr	r3, [r7, #0]
 8000218:	681b      	ldr	r3, [r3, #0]
 800021a:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800021c:	68bb      	ldr	r3, [r7, #8]
 800021e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000222:	d103      	bne.n	800022c <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8000224:	687b      	ldr	r3, [r7, #4]
 8000226:	691b      	ldr	r3, [r3, #16]
 8000228:	60fb      	str	r3, [r7, #12]
 800022a:	e00c      	b.n	8000246 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800022c:	687b      	ldr	r3, [r7, #4]
 800022e:	3308      	adds	r3, #8
 8000230:	60fb      	str	r3, [r7, #12]
 8000232:	e002      	b.n	800023a <vListInsert+0x2e>
 8000234:	68fb      	ldr	r3, [r7, #12]
 8000236:	685b      	ldr	r3, [r3, #4]
 8000238:	60fb      	str	r3, [r7, #12]
 800023a:	68fb      	ldr	r3, [r7, #12]
 800023c:	685b      	ldr	r3, [r3, #4]
 800023e:	681b      	ldr	r3, [r3, #0]
 8000240:	68ba      	ldr	r2, [r7, #8]
 8000242:	429a      	cmp	r2, r3
 8000244:	d2f6      	bcs.n	8000234 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8000246:	68fb      	ldr	r3, [r7, #12]
 8000248:	685a      	ldr	r2, [r3, #4]
 800024a:	683b      	ldr	r3, [r7, #0]
 800024c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800024e:	683b      	ldr	r3, [r7, #0]
 8000250:	685b      	ldr	r3, [r3, #4]
 8000252:	683a      	ldr	r2, [r7, #0]
 8000254:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8000256:	683b      	ldr	r3, [r7, #0]
 8000258:	68fa      	ldr	r2, [r7, #12]
 800025a:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800025c:	68fb      	ldr	r3, [r7, #12]
 800025e:	683a      	ldr	r2, [r7, #0]
 8000260:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8000262:	683b      	ldr	r3, [r7, #0]
 8000264:	687a      	ldr	r2, [r7, #4]
 8000266:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8000268:	687b      	ldr	r3, [r7, #4]
 800026a:	681b      	ldr	r3, [r3, #0]
 800026c:	1c5a      	adds	r2, r3, #1
 800026e:	687b      	ldr	r3, [r7, #4]
 8000270:	601a      	str	r2, [r3, #0]
}
 8000272:	bf00      	nop
 8000274:	3714      	adds	r7, #20
 8000276:	46bd      	mov	sp, r7
 8000278:	bc80      	pop	{r7}
 800027a:	4770      	bx	lr

0800027c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800027c:	b480      	push	{r7}
 800027e:	b085      	sub	sp, #20
 8000280:	af00      	add	r7, sp, #0
 8000282:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8000284:	687b      	ldr	r3, [r7, #4]
 8000286:	691b      	ldr	r3, [r3, #16]
 8000288:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800028a:	687b      	ldr	r3, [r7, #4]
 800028c:	685b      	ldr	r3, [r3, #4]
 800028e:	687a      	ldr	r2, [r7, #4]
 8000290:	6892      	ldr	r2, [r2, #8]
 8000292:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8000294:	687b      	ldr	r3, [r7, #4]
 8000296:	689b      	ldr	r3, [r3, #8]
 8000298:	687a      	ldr	r2, [r7, #4]
 800029a:	6852      	ldr	r2, [r2, #4]
 800029c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800029e:	68fb      	ldr	r3, [r7, #12]
 80002a0:	685b      	ldr	r3, [r3, #4]
 80002a2:	687a      	ldr	r2, [r7, #4]
 80002a4:	429a      	cmp	r2, r3
 80002a6:	d103      	bne.n	80002b0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80002a8:	687b      	ldr	r3, [r7, #4]
 80002aa:	689a      	ldr	r2, [r3, #8]
 80002ac:	68fb      	ldr	r3, [r7, #12]
 80002ae:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 80002b0:	687b      	ldr	r3, [r7, #4]
 80002b2:	2200      	movs	r2, #0
 80002b4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80002b6:	68fb      	ldr	r3, [r7, #12]
 80002b8:	681b      	ldr	r3, [r3, #0]
 80002ba:	1e5a      	subs	r2, r3, #1
 80002bc:	68fb      	ldr	r3, [r7, #12]
 80002be:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80002c0:	68fb      	ldr	r3, [r7, #12]
 80002c2:	681b      	ldr	r3, [r3, #0]
}
 80002c4:	4618      	mov	r0, r3
 80002c6:	3714      	adds	r7, #20
 80002c8:	46bd      	mov	sp, r7
 80002ca:	bc80      	pop	{r7}
 80002cc:	4770      	bx	lr
	...

080002d0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80002d0:	b580      	push	{r7, lr}
 80002d2:	b084      	sub	sp, #16
 80002d4:	af00      	add	r7, sp, #0
 80002d6:	6078      	str	r0, [r7, #4]
 80002d8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80002da:	687b      	ldr	r3, [r7, #4]
 80002dc:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80002de:	68fb      	ldr	r3, [r7, #12]
 80002e0:	2b00      	cmp	r3, #0
 80002e2:	d10a      	bne.n	80002fa <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80002e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80002e8:	f383 8811 	msr	BASEPRI, r3
 80002ec:	f3bf 8f6f 	isb	sy
 80002f0:	f3bf 8f4f 	dsb	sy
 80002f4:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80002f6:	bf00      	nop
 80002f8:	e7fe      	b.n	80002f8 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80002fa:	f001 ffcf 	bl	800229c <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 80002fe:	68fb      	ldr	r3, [r7, #12]
 8000300:	681a      	ldr	r2, [r3, #0]
 8000302:	68fb      	ldr	r3, [r7, #12]
 8000304:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000306:	68f9      	ldr	r1, [r7, #12]
 8000308:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800030a:	fb01 f303 	mul.w	r3, r1, r3
 800030e:	441a      	add	r2, r3
 8000310:	68fb      	ldr	r3, [r7, #12]
 8000312:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8000314:	68fb      	ldr	r3, [r7, #12]
 8000316:	2200      	movs	r2, #0
 8000318:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800031a:	68fb      	ldr	r3, [r7, #12]
 800031c:	681a      	ldr	r2, [r3, #0]
 800031e:	68fb      	ldr	r3, [r7, #12]
 8000320:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8000322:	68fb      	ldr	r3, [r7, #12]
 8000324:	681a      	ldr	r2, [r3, #0]
 8000326:	68fb      	ldr	r3, [r7, #12]
 8000328:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800032a:	3b01      	subs	r3, #1
 800032c:	68f9      	ldr	r1, [r7, #12]
 800032e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8000330:	fb01 f303 	mul.w	r3, r1, r3
 8000334:	441a      	add	r2, r3
 8000336:	68fb      	ldr	r3, [r7, #12]
 8000338:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800033a:	68fb      	ldr	r3, [r7, #12]
 800033c:	22ff      	movs	r2, #255	; 0xff
 800033e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8000342:	68fb      	ldr	r3, [r7, #12]
 8000344:	22ff      	movs	r2, #255	; 0xff
 8000346:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800034a:	683b      	ldr	r3, [r7, #0]
 800034c:	2b00      	cmp	r3, #0
 800034e:	d114      	bne.n	800037a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8000350:	68fb      	ldr	r3, [r7, #12]
 8000352:	691b      	ldr	r3, [r3, #16]
 8000354:	2b00      	cmp	r3, #0
 8000356:	d01a      	beq.n	800038e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8000358:	68fb      	ldr	r3, [r7, #12]
 800035a:	3310      	adds	r3, #16
 800035c:	4618      	mov	r0, r3
 800035e:	f001 f83d 	bl	80013dc <xTaskRemoveFromEventList>
 8000362:	4603      	mov	r3, r0
 8000364:	2b00      	cmp	r3, #0
 8000366:	d012      	beq.n	800038e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8000368:	4b0c      	ldr	r3, [pc, #48]	; (800039c <xQueueGenericReset+0xcc>)
 800036a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800036e:	601a      	str	r2, [r3, #0]
 8000370:	f3bf 8f4f 	dsb	sy
 8000374:	f3bf 8f6f 	isb	sy
 8000378:	e009      	b.n	800038e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800037a:	68fb      	ldr	r3, [r7, #12]
 800037c:	3310      	adds	r3, #16
 800037e:	4618      	mov	r0, r3
 8000380:	f7ff fef6 	bl	8000170 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8000384:	68fb      	ldr	r3, [r7, #12]
 8000386:	3324      	adds	r3, #36	; 0x24
 8000388:	4618      	mov	r0, r3
 800038a:	f7ff fef1 	bl	8000170 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800038e:	f001 ffb5 	bl	80022fc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8000392:	2301      	movs	r3, #1
}
 8000394:	4618      	mov	r0, r3
 8000396:	3710      	adds	r7, #16
 8000398:	46bd      	mov	sp, r7
 800039a:	bd80      	pop	{r7, pc}
 800039c:	e000ed04 	.word	0xe000ed04

080003a0 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80003a0:	b580      	push	{r7, lr}
 80003a2:	b08a      	sub	sp, #40	; 0x28
 80003a4:	af02      	add	r7, sp, #8
 80003a6:	60f8      	str	r0, [r7, #12]
 80003a8:	60b9      	str	r1, [r7, #8]
 80003aa:	4613      	mov	r3, r2
 80003ac:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80003ae:	68fb      	ldr	r3, [r7, #12]
 80003b0:	2b00      	cmp	r3, #0
 80003b2:	d10a      	bne.n	80003ca <xQueueGenericCreate+0x2a>
	__asm volatile
 80003b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80003b8:	f383 8811 	msr	BASEPRI, r3
 80003bc:	f3bf 8f6f 	isb	sy
 80003c0:	f3bf 8f4f 	dsb	sy
 80003c4:	613b      	str	r3, [r7, #16]
}
 80003c6:	bf00      	nop
 80003c8:	e7fe      	b.n	80003c8 <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 80003ca:	68bb      	ldr	r3, [r7, #8]
 80003cc:	2b00      	cmp	r3, #0
 80003ce:	d102      	bne.n	80003d6 <xQueueGenericCreate+0x36>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 80003d0:	2300      	movs	r3, #0
 80003d2:	61fb      	str	r3, [r7, #28]
 80003d4:	e004      	b.n	80003e0 <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80003d6:	68fb      	ldr	r3, [r7, #12]
 80003d8:	68ba      	ldr	r2, [r7, #8]
 80003da:	fb02 f303 	mul.w	r3, r2, r3
 80003de:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 80003e0:	69fb      	ldr	r3, [r7, #28]
 80003e2:	3350      	adds	r3, #80	; 0x50
 80003e4:	4618      	mov	r0, r3
 80003e6:	f002 f851 	bl	800248c <pvPortMalloc>
 80003ea:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80003ec:	69bb      	ldr	r3, [r7, #24]
 80003ee:	2b00      	cmp	r3, #0
 80003f0:	d00b      	beq.n	800040a <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 80003f2:	69bb      	ldr	r3, [r7, #24]
 80003f4:	3350      	adds	r3, #80	; 0x50
 80003f6:	617b      	str	r3, [r7, #20]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80003f8:	79fa      	ldrb	r2, [r7, #7]
 80003fa:	69bb      	ldr	r3, [r7, #24]
 80003fc:	9300      	str	r3, [sp, #0]
 80003fe:	4613      	mov	r3, r2
 8000400:	697a      	ldr	r2, [r7, #20]
 8000402:	68b9      	ldr	r1, [r7, #8]
 8000404:	68f8      	ldr	r0, [r7, #12]
 8000406:	f000 f805 	bl	8000414 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 800040a:	69bb      	ldr	r3, [r7, #24]
	}
 800040c:	4618      	mov	r0, r3
 800040e:	3720      	adds	r7, #32
 8000410:	46bd      	mov	sp, r7
 8000412:	bd80      	pop	{r7, pc}

08000414 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8000414:	b580      	push	{r7, lr}
 8000416:	b084      	sub	sp, #16
 8000418:	af00      	add	r7, sp, #0
 800041a:	60f8      	str	r0, [r7, #12]
 800041c:	60b9      	str	r1, [r7, #8]
 800041e:	607a      	str	r2, [r7, #4]
 8000420:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8000422:	68bb      	ldr	r3, [r7, #8]
 8000424:	2b00      	cmp	r3, #0
 8000426:	d103      	bne.n	8000430 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8000428:	69bb      	ldr	r3, [r7, #24]
 800042a:	69ba      	ldr	r2, [r7, #24]
 800042c:	601a      	str	r2, [r3, #0]
 800042e:	e002      	b.n	8000436 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8000430:	69bb      	ldr	r3, [r7, #24]
 8000432:	687a      	ldr	r2, [r7, #4]
 8000434:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8000436:	69bb      	ldr	r3, [r7, #24]
 8000438:	68fa      	ldr	r2, [r7, #12]
 800043a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800043c:	69bb      	ldr	r3, [r7, #24]
 800043e:	68ba      	ldr	r2, [r7, #8]
 8000440:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8000442:	2101      	movs	r1, #1
 8000444:	69b8      	ldr	r0, [r7, #24]
 8000446:	f7ff ff43 	bl	80002d0 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800044a:	69bb      	ldr	r3, [r7, #24]
 800044c:	78fa      	ldrb	r2, [r7, #3]
 800044e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8000452:	bf00      	nop
 8000454:	3710      	adds	r7, #16
 8000456:	46bd      	mov	sp, r7
 8000458:	bd80      	pop	{r7, pc}
	...

0800045c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800045c:	b580      	push	{r7, lr}
 800045e:	b08e      	sub	sp, #56	; 0x38
 8000460:	af00      	add	r7, sp, #0
 8000462:	60f8      	str	r0, [r7, #12]
 8000464:	60b9      	str	r1, [r7, #8]
 8000466:	607a      	str	r2, [r7, #4]
 8000468:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800046a:	2300      	movs	r3, #0
 800046c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800046e:	68fb      	ldr	r3, [r7, #12]
 8000470:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8000472:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000474:	2b00      	cmp	r3, #0
 8000476:	d10a      	bne.n	800048e <xQueueGenericSend+0x32>
	__asm volatile
 8000478:	f04f 0350 	mov.w	r3, #80	; 0x50
 800047c:	f383 8811 	msr	BASEPRI, r3
 8000480:	f3bf 8f6f 	isb	sy
 8000484:	f3bf 8f4f 	dsb	sy
 8000488:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800048a:	bf00      	nop
 800048c:	e7fe      	b.n	800048c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800048e:	68bb      	ldr	r3, [r7, #8]
 8000490:	2b00      	cmp	r3, #0
 8000492:	d103      	bne.n	800049c <xQueueGenericSend+0x40>
 8000494:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000496:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000498:	2b00      	cmp	r3, #0
 800049a:	d101      	bne.n	80004a0 <xQueueGenericSend+0x44>
 800049c:	2301      	movs	r3, #1
 800049e:	e000      	b.n	80004a2 <xQueueGenericSend+0x46>
 80004a0:	2300      	movs	r3, #0
 80004a2:	2b00      	cmp	r3, #0
 80004a4:	d10a      	bne.n	80004bc <xQueueGenericSend+0x60>
	__asm volatile
 80004a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80004aa:	f383 8811 	msr	BASEPRI, r3
 80004ae:	f3bf 8f6f 	isb	sy
 80004b2:	f3bf 8f4f 	dsb	sy
 80004b6:	627b      	str	r3, [r7, #36]	; 0x24
}
 80004b8:	bf00      	nop
 80004ba:	e7fe      	b.n	80004ba <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80004bc:	683b      	ldr	r3, [r7, #0]
 80004be:	2b02      	cmp	r3, #2
 80004c0:	d103      	bne.n	80004ca <xQueueGenericSend+0x6e>
 80004c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80004c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80004c6:	2b01      	cmp	r3, #1
 80004c8:	d101      	bne.n	80004ce <xQueueGenericSend+0x72>
 80004ca:	2301      	movs	r3, #1
 80004cc:	e000      	b.n	80004d0 <xQueueGenericSend+0x74>
 80004ce:	2300      	movs	r3, #0
 80004d0:	2b00      	cmp	r3, #0
 80004d2:	d10a      	bne.n	80004ea <xQueueGenericSend+0x8e>
	__asm volatile
 80004d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80004d8:	f383 8811 	msr	BASEPRI, r3
 80004dc:	f3bf 8f6f 	isb	sy
 80004e0:	f3bf 8f4f 	dsb	sy
 80004e4:	623b      	str	r3, [r7, #32]
}
 80004e6:	bf00      	nop
 80004e8:	e7fe      	b.n	80004e8 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80004ea:	f001 f919 	bl	8001720 <xTaskGetSchedulerState>
 80004ee:	4603      	mov	r3, r0
 80004f0:	2b00      	cmp	r3, #0
 80004f2:	d102      	bne.n	80004fa <xQueueGenericSend+0x9e>
 80004f4:	687b      	ldr	r3, [r7, #4]
 80004f6:	2b00      	cmp	r3, #0
 80004f8:	d101      	bne.n	80004fe <xQueueGenericSend+0xa2>
 80004fa:	2301      	movs	r3, #1
 80004fc:	e000      	b.n	8000500 <xQueueGenericSend+0xa4>
 80004fe:	2300      	movs	r3, #0
 8000500:	2b00      	cmp	r3, #0
 8000502:	d10a      	bne.n	800051a <xQueueGenericSend+0xbe>
	__asm volatile
 8000504:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000508:	f383 8811 	msr	BASEPRI, r3
 800050c:	f3bf 8f6f 	isb	sy
 8000510:	f3bf 8f4f 	dsb	sy
 8000514:	61fb      	str	r3, [r7, #28]
}
 8000516:	bf00      	nop
 8000518:	e7fe      	b.n	8000518 <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800051a:	f001 febf 	bl	800229c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800051e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000520:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000522:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000524:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000526:	429a      	cmp	r2, r3
 8000528:	d302      	bcc.n	8000530 <xQueueGenericSend+0xd4>
 800052a:	683b      	ldr	r3, [r7, #0]
 800052c:	2b02      	cmp	r3, #2
 800052e:	d129      	bne.n	8000584 <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8000530:	683a      	ldr	r2, [r7, #0]
 8000532:	68b9      	ldr	r1, [r7, #8]
 8000534:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000536:	f000 fa07 	bl	8000948 <prvCopyDataToQueue>
 800053a:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800053c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800053e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000540:	2b00      	cmp	r3, #0
 8000542:	d010      	beq.n	8000566 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8000544:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000546:	3324      	adds	r3, #36	; 0x24
 8000548:	4618      	mov	r0, r3
 800054a:	f000 ff47 	bl	80013dc <xTaskRemoveFromEventList>
 800054e:	4603      	mov	r3, r0
 8000550:	2b00      	cmp	r3, #0
 8000552:	d013      	beq.n	800057c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8000554:	4b3f      	ldr	r3, [pc, #252]	; (8000654 <xQueueGenericSend+0x1f8>)
 8000556:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800055a:	601a      	str	r2, [r3, #0]
 800055c:	f3bf 8f4f 	dsb	sy
 8000560:	f3bf 8f6f 	isb	sy
 8000564:	e00a      	b.n	800057c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8000566:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000568:	2b00      	cmp	r3, #0
 800056a:	d007      	beq.n	800057c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800056c:	4b39      	ldr	r3, [pc, #228]	; (8000654 <xQueueGenericSend+0x1f8>)
 800056e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000572:	601a      	str	r2, [r3, #0]
 8000574:	f3bf 8f4f 	dsb	sy
 8000578:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800057c:	f001 febe 	bl	80022fc <vPortExitCritical>
				return pdPASS;
 8000580:	2301      	movs	r3, #1
 8000582:	e063      	b.n	800064c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8000584:	687b      	ldr	r3, [r7, #4]
 8000586:	2b00      	cmp	r3, #0
 8000588:	d103      	bne.n	8000592 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800058a:	f001 feb7 	bl	80022fc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800058e:	2300      	movs	r3, #0
 8000590:	e05c      	b.n	800064c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8000592:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000594:	2b00      	cmp	r3, #0
 8000596:	d106      	bne.n	80005a6 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8000598:	f107 0314 	add.w	r3, r7, #20
 800059c:	4618      	mov	r0, r3
 800059e:	f000 ff81 	bl	80014a4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80005a2:	2301      	movs	r3, #1
 80005a4:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80005a6:	f001 fea9 	bl	80022fc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80005aa:	f000 fcf3 	bl	8000f94 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80005ae:	f001 fe75 	bl	800229c <vPortEnterCritical>
 80005b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80005b4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80005b8:	b25b      	sxtb	r3, r3
 80005ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80005be:	d103      	bne.n	80005c8 <xQueueGenericSend+0x16c>
 80005c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80005c2:	2200      	movs	r2, #0
 80005c4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80005c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80005ca:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80005ce:	b25b      	sxtb	r3, r3
 80005d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80005d4:	d103      	bne.n	80005de <xQueueGenericSend+0x182>
 80005d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80005d8:	2200      	movs	r2, #0
 80005da:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80005de:	f001 fe8d 	bl	80022fc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80005e2:	1d3a      	adds	r2, r7, #4
 80005e4:	f107 0314 	add.w	r3, r7, #20
 80005e8:	4611      	mov	r1, r2
 80005ea:	4618      	mov	r0, r3
 80005ec:	f000 ff70 	bl	80014d0 <xTaskCheckForTimeOut>
 80005f0:	4603      	mov	r3, r0
 80005f2:	2b00      	cmp	r3, #0
 80005f4:	d124      	bne.n	8000640 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80005f6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80005f8:	f000 fa9e 	bl	8000b38 <prvIsQueueFull>
 80005fc:	4603      	mov	r3, r0
 80005fe:	2b00      	cmp	r3, #0
 8000600:	d018      	beq.n	8000634 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8000602:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000604:	3310      	adds	r3, #16
 8000606:	687a      	ldr	r2, [r7, #4]
 8000608:	4611      	mov	r1, r2
 800060a:	4618      	mov	r0, r3
 800060c:	f000 fe96 	bl	800133c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8000610:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000612:	f000 fa29 	bl	8000a68 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8000616:	f000 fccb 	bl	8000fb0 <xTaskResumeAll>
 800061a:	4603      	mov	r3, r0
 800061c:	2b00      	cmp	r3, #0
 800061e:	f47f af7c 	bne.w	800051a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8000622:	4b0c      	ldr	r3, [pc, #48]	; (8000654 <xQueueGenericSend+0x1f8>)
 8000624:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000628:	601a      	str	r2, [r3, #0]
 800062a:	f3bf 8f4f 	dsb	sy
 800062e:	f3bf 8f6f 	isb	sy
 8000632:	e772      	b.n	800051a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8000634:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000636:	f000 fa17 	bl	8000a68 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800063a:	f000 fcb9 	bl	8000fb0 <xTaskResumeAll>
 800063e:	e76c      	b.n	800051a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8000640:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000642:	f000 fa11 	bl	8000a68 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8000646:	f000 fcb3 	bl	8000fb0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800064a:	2300      	movs	r3, #0
		}
	}
}
 800064c:	4618      	mov	r0, r3
 800064e:	3738      	adds	r7, #56	; 0x38
 8000650:	46bd      	mov	sp, r7
 8000652:	bd80      	pop	{r7, pc}
 8000654:	e000ed04 	.word	0xe000ed04

08000658 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8000658:	b580      	push	{r7, lr}
 800065a:	b08e      	sub	sp, #56	; 0x38
 800065c:	af00      	add	r7, sp, #0
 800065e:	60f8      	str	r0, [r7, #12]
 8000660:	60b9      	str	r1, [r7, #8]
 8000662:	607a      	str	r2, [r7, #4]
 8000664:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8000666:	68fb      	ldr	r3, [r7, #12]
 8000668:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800066a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800066c:	2b00      	cmp	r3, #0
 800066e:	d10a      	bne.n	8000686 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8000670:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000674:	f383 8811 	msr	BASEPRI, r3
 8000678:	f3bf 8f6f 	isb	sy
 800067c:	f3bf 8f4f 	dsb	sy
 8000680:	627b      	str	r3, [r7, #36]	; 0x24
}
 8000682:	bf00      	nop
 8000684:	e7fe      	b.n	8000684 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8000686:	68bb      	ldr	r3, [r7, #8]
 8000688:	2b00      	cmp	r3, #0
 800068a:	d103      	bne.n	8000694 <xQueueGenericSendFromISR+0x3c>
 800068c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800068e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000690:	2b00      	cmp	r3, #0
 8000692:	d101      	bne.n	8000698 <xQueueGenericSendFromISR+0x40>
 8000694:	2301      	movs	r3, #1
 8000696:	e000      	b.n	800069a <xQueueGenericSendFromISR+0x42>
 8000698:	2300      	movs	r3, #0
 800069a:	2b00      	cmp	r3, #0
 800069c:	d10a      	bne.n	80006b4 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800069e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80006a2:	f383 8811 	msr	BASEPRI, r3
 80006a6:	f3bf 8f6f 	isb	sy
 80006aa:	f3bf 8f4f 	dsb	sy
 80006ae:	623b      	str	r3, [r7, #32]
}
 80006b0:	bf00      	nop
 80006b2:	e7fe      	b.n	80006b2 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80006b4:	683b      	ldr	r3, [r7, #0]
 80006b6:	2b02      	cmp	r3, #2
 80006b8:	d103      	bne.n	80006c2 <xQueueGenericSendFromISR+0x6a>
 80006ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80006bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80006be:	2b01      	cmp	r3, #1
 80006c0:	d101      	bne.n	80006c6 <xQueueGenericSendFromISR+0x6e>
 80006c2:	2301      	movs	r3, #1
 80006c4:	e000      	b.n	80006c8 <xQueueGenericSendFromISR+0x70>
 80006c6:	2300      	movs	r3, #0
 80006c8:	2b00      	cmp	r3, #0
 80006ca:	d10a      	bne.n	80006e2 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80006cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80006d0:	f383 8811 	msr	BASEPRI, r3
 80006d4:	f3bf 8f6f 	isb	sy
 80006d8:	f3bf 8f4f 	dsb	sy
 80006dc:	61fb      	str	r3, [r7, #28]
}
 80006de:	bf00      	nop
 80006e0:	e7fe      	b.n	80006e0 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80006e2:	f001 fe95 	bl	8002410 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80006e6:	f3ef 8211 	mrs	r2, BASEPRI
 80006ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80006ee:	f383 8811 	msr	BASEPRI, r3
 80006f2:	f3bf 8f6f 	isb	sy
 80006f6:	f3bf 8f4f 	dsb	sy
 80006fa:	61ba      	str	r2, [r7, #24]
 80006fc:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80006fe:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8000700:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8000702:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000704:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000706:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000708:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800070a:	429a      	cmp	r2, r3
 800070c:	d302      	bcc.n	8000714 <xQueueGenericSendFromISR+0xbc>
 800070e:	683b      	ldr	r3, [r7, #0]
 8000710:	2b02      	cmp	r3, #2
 8000712:	d12c      	bne.n	800076e <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8000714:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000716:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800071a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800071e:	683a      	ldr	r2, [r7, #0]
 8000720:	68b9      	ldr	r1, [r7, #8]
 8000722:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000724:	f000 f910 	bl	8000948 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8000728:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800072c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000730:	d112      	bne.n	8000758 <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8000732:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000734:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000736:	2b00      	cmp	r3, #0
 8000738:	d016      	beq.n	8000768 <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800073a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800073c:	3324      	adds	r3, #36	; 0x24
 800073e:	4618      	mov	r0, r3
 8000740:	f000 fe4c 	bl	80013dc <xTaskRemoveFromEventList>
 8000744:	4603      	mov	r3, r0
 8000746:	2b00      	cmp	r3, #0
 8000748:	d00e      	beq.n	8000768 <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800074a:	687b      	ldr	r3, [r7, #4]
 800074c:	2b00      	cmp	r3, #0
 800074e:	d00b      	beq.n	8000768 <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8000750:	687b      	ldr	r3, [r7, #4]
 8000752:	2201      	movs	r2, #1
 8000754:	601a      	str	r2, [r3, #0]
 8000756:	e007      	b.n	8000768 <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8000758:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800075c:	3301      	adds	r3, #1
 800075e:	b2db      	uxtb	r3, r3
 8000760:	b25a      	sxtb	r2, r3
 8000762:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000764:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8000768:	2301      	movs	r3, #1
 800076a:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800076c:	e001      	b.n	8000772 <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800076e:	2300      	movs	r3, #0
 8000770:	637b      	str	r3, [r7, #52]	; 0x34
 8000772:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000774:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8000776:	693b      	ldr	r3, [r7, #16]
 8000778:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800077c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800077e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8000780:	4618      	mov	r0, r3
 8000782:	3738      	adds	r7, #56	; 0x38
 8000784:	46bd      	mov	sp, r7
 8000786:	bd80      	pop	{r7, pc}

08000788 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8000788:	b580      	push	{r7, lr}
 800078a:	b08c      	sub	sp, #48	; 0x30
 800078c:	af00      	add	r7, sp, #0
 800078e:	60f8      	str	r0, [r7, #12]
 8000790:	60b9      	str	r1, [r7, #8]
 8000792:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8000794:	2300      	movs	r3, #0
 8000796:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8000798:	68fb      	ldr	r3, [r7, #12]
 800079a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800079c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800079e:	2b00      	cmp	r3, #0
 80007a0:	d10a      	bne.n	80007b8 <xQueueReceive+0x30>
	__asm volatile
 80007a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80007a6:	f383 8811 	msr	BASEPRI, r3
 80007aa:	f3bf 8f6f 	isb	sy
 80007ae:	f3bf 8f4f 	dsb	sy
 80007b2:	623b      	str	r3, [r7, #32]
}
 80007b4:	bf00      	nop
 80007b6:	e7fe      	b.n	80007b6 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80007b8:	68bb      	ldr	r3, [r7, #8]
 80007ba:	2b00      	cmp	r3, #0
 80007bc:	d103      	bne.n	80007c6 <xQueueReceive+0x3e>
 80007be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80007c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	d101      	bne.n	80007ca <xQueueReceive+0x42>
 80007c6:	2301      	movs	r3, #1
 80007c8:	e000      	b.n	80007cc <xQueueReceive+0x44>
 80007ca:	2300      	movs	r3, #0
 80007cc:	2b00      	cmp	r3, #0
 80007ce:	d10a      	bne.n	80007e6 <xQueueReceive+0x5e>
	__asm volatile
 80007d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80007d4:	f383 8811 	msr	BASEPRI, r3
 80007d8:	f3bf 8f6f 	isb	sy
 80007dc:	f3bf 8f4f 	dsb	sy
 80007e0:	61fb      	str	r3, [r7, #28]
}
 80007e2:	bf00      	nop
 80007e4:	e7fe      	b.n	80007e4 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80007e6:	f000 ff9b 	bl	8001720 <xTaskGetSchedulerState>
 80007ea:	4603      	mov	r3, r0
 80007ec:	2b00      	cmp	r3, #0
 80007ee:	d102      	bne.n	80007f6 <xQueueReceive+0x6e>
 80007f0:	687b      	ldr	r3, [r7, #4]
 80007f2:	2b00      	cmp	r3, #0
 80007f4:	d101      	bne.n	80007fa <xQueueReceive+0x72>
 80007f6:	2301      	movs	r3, #1
 80007f8:	e000      	b.n	80007fc <xQueueReceive+0x74>
 80007fa:	2300      	movs	r3, #0
 80007fc:	2b00      	cmp	r3, #0
 80007fe:	d10a      	bne.n	8000816 <xQueueReceive+0x8e>
	__asm volatile
 8000800:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000804:	f383 8811 	msr	BASEPRI, r3
 8000808:	f3bf 8f6f 	isb	sy
 800080c:	f3bf 8f4f 	dsb	sy
 8000810:	61bb      	str	r3, [r7, #24]
}
 8000812:	bf00      	nop
 8000814:	e7fe      	b.n	8000814 <xQueueReceive+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8000816:	f001 fd41 	bl	800229c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800081a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800081c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800081e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8000820:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000822:	2b00      	cmp	r3, #0
 8000824:	d01f      	beq.n	8000866 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8000826:	68b9      	ldr	r1, [r7, #8]
 8000828:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800082a:	f000 f8f7 	bl	8000a1c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800082e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000830:	1e5a      	subs	r2, r3, #1
 8000832:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000834:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8000836:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000838:	691b      	ldr	r3, [r3, #16]
 800083a:	2b00      	cmp	r3, #0
 800083c:	d00f      	beq.n	800085e <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800083e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000840:	3310      	adds	r3, #16
 8000842:	4618      	mov	r0, r3
 8000844:	f000 fdca 	bl	80013dc <xTaskRemoveFromEventList>
 8000848:	4603      	mov	r3, r0
 800084a:	2b00      	cmp	r3, #0
 800084c:	d007      	beq.n	800085e <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800084e:	4b3d      	ldr	r3, [pc, #244]	; (8000944 <xQueueReceive+0x1bc>)
 8000850:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000854:	601a      	str	r2, [r3, #0]
 8000856:	f3bf 8f4f 	dsb	sy
 800085a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800085e:	f001 fd4d 	bl	80022fc <vPortExitCritical>
				return pdPASS;
 8000862:	2301      	movs	r3, #1
 8000864:	e069      	b.n	800093a <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8000866:	687b      	ldr	r3, [r7, #4]
 8000868:	2b00      	cmp	r3, #0
 800086a:	d103      	bne.n	8000874 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800086c:	f001 fd46 	bl	80022fc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8000870:	2300      	movs	r3, #0
 8000872:	e062      	b.n	800093a <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8000874:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000876:	2b00      	cmp	r3, #0
 8000878:	d106      	bne.n	8000888 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800087a:	f107 0310 	add.w	r3, r7, #16
 800087e:	4618      	mov	r0, r3
 8000880:	f000 fe10 	bl	80014a4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8000884:	2301      	movs	r3, #1
 8000886:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8000888:	f001 fd38 	bl	80022fc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800088c:	f000 fb82 	bl	8000f94 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8000890:	f001 fd04 	bl	800229c <vPortEnterCritical>
 8000894:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000896:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800089a:	b25b      	sxtb	r3, r3
 800089c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80008a0:	d103      	bne.n	80008aa <xQueueReceive+0x122>
 80008a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80008a4:	2200      	movs	r2, #0
 80008a6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80008aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80008ac:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80008b0:	b25b      	sxtb	r3, r3
 80008b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80008b6:	d103      	bne.n	80008c0 <xQueueReceive+0x138>
 80008b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80008ba:	2200      	movs	r2, #0
 80008bc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80008c0:	f001 fd1c 	bl	80022fc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80008c4:	1d3a      	adds	r2, r7, #4
 80008c6:	f107 0310 	add.w	r3, r7, #16
 80008ca:	4611      	mov	r1, r2
 80008cc:	4618      	mov	r0, r3
 80008ce:	f000 fdff 	bl	80014d0 <xTaskCheckForTimeOut>
 80008d2:	4603      	mov	r3, r0
 80008d4:	2b00      	cmp	r3, #0
 80008d6:	d123      	bne.n	8000920 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80008d8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80008da:	f000 f917 	bl	8000b0c <prvIsQueueEmpty>
 80008de:	4603      	mov	r3, r0
 80008e0:	2b00      	cmp	r3, #0
 80008e2:	d017      	beq.n	8000914 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80008e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80008e6:	3324      	adds	r3, #36	; 0x24
 80008e8:	687a      	ldr	r2, [r7, #4]
 80008ea:	4611      	mov	r1, r2
 80008ec:	4618      	mov	r0, r3
 80008ee:	f000 fd25 	bl	800133c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80008f2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80008f4:	f000 f8b8 	bl	8000a68 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80008f8:	f000 fb5a 	bl	8000fb0 <xTaskResumeAll>
 80008fc:	4603      	mov	r3, r0
 80008fe:	2b00      	cmp	r3, #0
 8000900:	d189      	bne.n	8000816 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8000902:	4b10      	ldr	r3, [pc, #64]	; (8000944 <xQueueReceive+0x1bc>)
 8000904:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000908:	601a      	str	r2, [r3, #0]
 800090a:	f3bf 8f4f 	dsb	sy
 800090e:	f3bf 8f6f 	isb	sy
 8000912:	e780      	b.n	8000816 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8000914:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8000916:	f000 f8a7 	bl	8000a68 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800091a:	f000 fb49 	bl	8000fb0 <xTaskResumeAll>
 800091e:	e77a      	b.n	8000816 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8000920:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8000922:	f000 f8a1 	bl	8000a68 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8000926:	f000 fb43 	bl	8000fb0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800092a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800092c:	f000 f8ee 	bl	8000b0c <prvIsQueueEmpty>
 8000930:	4603      	mov	r3, r0
 8000932:	2b00      	cmp	r3, #0
 8000934:	f43f af6f 	beq.w	8000816 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8000938:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 800093a:	4618      	mov	r0, r3
 800093c:	3730      	adds	r7, #48	; 0x30
 800093e:	46bd      	mov	sp, r7
 8000940:	bd80      	pop	{r7, pc}
 8000942:	bf00      	nop
 8000944:	e000ed04 	.word	0xe000ed04

08000948 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8000948:	b580      	push	{r7, lr}
 800094a:	b086      	sub	sp, #24
 800094c:	af00      	add	r7, sp, #0
 800094e:	60f8      	str	r0, [r7, #12]
 8000950:	60b9      	str	r1, [r7, #8]
 8000952:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8000954:	2300      	movs	r3, #0
 8000956:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8000958:	68fb      	ldr	r3, [r7, #12]
 800095a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800095c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800095e:	68fb      	ldr	r3, [r7, #12]
 8000960:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000962:	2b00      	cmp	r3, #0
 8000964:	d10d      	bne.n	8000982 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8000966:	68fb      	ldr	r3, [r7, #12]
 8000968:	681b      	ldr	r3, [r3, #0]
 800096a:	2b00      	cmp	r3, #0
 800096c:	d14d      	bne.n	8000a0a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 800096e:	68fb      	ldr	r3, [r7, #12]
 8000970:	685b      	ldr	r3, [r3, #4]
 8000972:	4618      	mov	r0, r3
 8000974:	f000 fef2 	bl	800175c <xTaskPriorityDisinherit>
 8000978:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 800097a:	68fb      	ldr	r3, [r7, #12]
 800097c:	2200      	movs	r2, #0
 800097e:	605a      	str	r2, [r3, #4]
 8000980:	e043      	b.n	8000a0a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	2b00      	cmp	r3, #0
 8000986:	d119      	bne.n	80009bc <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8000988:	68fb      	ldr	r3, [r7, #12]
 800098a:	6898      	ldr	r0, [r3, #8]
 800098c:	68fb      	ldr	r3, [r7, #12]
 800098e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000990:	461a      	mov	r2, r3
 8000992:	68b9      	ldr	r1, [r7, #8]
 8000994:	f002 ff32 	bl	80037fc <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8000998:	68fb      	ldr	r3, [r7, #12]
 800099a:	689a      	ldr	r2, [r3, #8]
 800099c:	68fb      	ldr	r3, [r7, #12]
 800099e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009a0:	441a      	add	r2, r3
 80009a2:	68fb      	ldr	r3, [r7, #12]
 80009a4:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80009a6:	68fb      	ldr	r3, [r7, #12]
 80009a8:	689a      	ldr	r2, [r3, #8]
 80009aa:	68fb      	ldr	r3, [r7, #12]
 80009ac:	685b      	ldr	r3, [r3, #4]
 80009ae:	429a      	cmp	r2, r3
 80009b0:	d32b      	bcc.n	8000a0a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80009b2:	68fb      	ldr	r3, [r7, #12]
 80009b4:	681a      	ldr	r2, [r3, #0]
 80009b6:	68fb      	ldr	r3, [r7, #12]
 80009b8:	609a      	str	r2, [r3, #8]
 80009ba:	e026      	b.n	8000a0a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80009bc:	68fb      	ldr	r3, [r7, #12]
 80009be:	68d8      	ldr	r0, [r3, #12]
 80009c0:	68fb      	ldr	r3, [r7, #12]
 80009c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009c4:	461a      	mov	r2, r3
 80009c6:	68b9      	ldr	r1, [r7, #8]
 80009c8:	f002 ff18 	bl	80037fc <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 80009cc:	68fb      	ldr	r3, [r7, #12]
 80009ce:	68da      	ldr	r2, [r3, #12]
 80009d0:	68fb      	ldr	r3, [r7, #12]
 80009d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009d4:	425b      	negs	r3, r3
 80009d6:	441a      	add	r2, r3
 80009d8:	68fb      	ldr	r3, [r7, #12]
 80009da:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80009dc:	68fb      	ldr	r3, [r7, #12]
 80009de:	68da      	ldr	r2, [r3, #12]
 80009e0:	68fb      	ldr	r3, [r7, #12]
 80009e2:	681b      	ldr	r3, [r3, #0]
 80009e4:	429a      	cmp	r2, r3
 80009e6:	d207      	bcs.n	80009f8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 80009e8:	68fb      	ldr	r3, [r7, #12]
 80009ea:	685a      	ldr	r2, [r3, #4]
 80009ec:	68fb      	ldr	r3, [r7, #12]
 80009ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009f0:	425b      	negs	r3, r3
 80009f2:	441a      	add	r2, r3
 80009f4:	68fb      	ldr	r3, [r7, #12]
 80009f6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	2b02      	cmp	r3, #2
 80009fc:	d105      	bne.n	8000a0a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80009fe:	693b      	ldr	r3, [r7, #16]
 8000a00:	2b00      	cmp	r3, #0
 8000a02:	d002      	beq.n	8000a0a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8000a04:	693b      	ldr	r3, [r7, #16]
 8000a06:	3b01      	subs	r3, #1
 8000a08:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8000a0a:	693b      	ldr	r3, [r7, #16]
 8000a0c:	1c5a      	adds	r2, r3, #1
 8000a0e:	68fb      	ldr	r3, [r7, #12]
 8000a10:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8000a12:	697b      	ldr	r3, [r7, #20]
}
 8000a14:	4618      	mov	r0, r3
 8000a16:	3718      	adds	r7, #24
 8000a18:	46bd      	mov	sp, r7
 8000a1a:	bd80      	pop	{r7, pc}

08000a1c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	b082      	sub	sp, #8
 8000a20:	af00      	add	r7, sp, #0
 8000a22:	6078      	str	r0, [r7, #4]
 8000a24:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a2a:	2b00      	cmp	r3, #0
 8000a2c:	d018      	beq.n	8000a60 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	68da      	ldr	r2, [r3, #12]
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a36:	441a      	add	r2, r3
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	68da      	ldr	r2, [r3, #12]
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	685b      	ldr	r3, [r3, #4]
 8000a44:	429a      	cmp	r2, r3
 8000a46:	d303      	bcc.n	8000a50 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	681a      	ldr	r2, [r3, #0]
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	68d9      	ldr	r1, [r3, #12]
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a58:	461a      	mov	r2, r3
 8000a5a:	6838      	ldr	r0, [r7, #0]
 8000a5c:	f002 fece 	bl	80037fc <memcpy>
	}
}
 8000a60:	bf00      	nop
 8000a62:	3708      	adds	r7, #8
 8000a64:	46bd      	mov	sp, r7
 8000a66:	bd80      	pop	{r7, pc}

08000a68 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	b084      	sub	sp, #16
 8000a6c:	af00      	add	r7, sp, #0
 8000a6e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8000a70:	f001 fc14 	bl	800229c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8000a7a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8000a7c:	e011      	b.n	8000aa2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a82:	2b00      	cmp	r3, #0
 8000a84:	d012      	beq.n	8000aac <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	3324      	adds	r3, #36	; 0x24
 8000a8a:	4618      	mov	r0, r3
 8000a8c:	f000 fca6 	bl	80013dc <xTaskRemoveFromEventList>
 8000a90:	4603      	mov	r3, r0
 8000a92:	2b00      	cmp	r3, #0
 8000a94:	d001      	beq.n	8000a9a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8000a96:	f000 fd7d 	bl	8001594 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8000a9a:	7bfb      	ldrb	r3, [r7, #15]
 8000a9c:	3b01      	subs	r3, #1
 8000a9e:	b2db      	uxtb	r3, r3
 8000aa0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8000aa2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000aa6:	2b00      	cmp	r3, #0
 8000aa8:	dce9      	bgt.n	8000a7e <prvUnlockQueue+0x16>
 8000aaa:	e000      	b.n	8000aae <prvUnlockQueue+0x46>
					break;
 8000aac:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	22ff      	movs	r2, #255	; 0xff
 8000ab2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8000ab6:	f001 fc21 	bl	80022fc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8000aba:	f001 fbef 	bl	800229c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8000ac4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8000ac6:	e011      	b.n	8000aec <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	691b      	ldr	r3, [r3, #16]
 8000acc:	2b00      	cmp	r3, #0
 8000ace:	d012      	beq.n	8000af6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	3310      	adds	r3, #16
 8000ad4:	4618      	mov	r0, r3
 8000ad6:	f000 fc81 	bl	80013dc <xTaskRemoveFromEventList>
 8000ada:	4603      	mov	r3, r0
 8000adc:	2b00      	cmp	r3, #0
 8000ade:	d001      	beq.n	8000ae4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8000ae0:	f000 fd58 	bl	8001594 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8000ae4:	7bbb      	ldrb	r3, [r7, #14]
 8000ae6:	3b01      	subs	r3, #1
 8000ae8:	b2db      	uxtb	r3, r3
 8000aea:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8000aec:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000af0:	2b00      	cmp	r3, #0
 8000af2:	dce9      	bgt.n	8000ac8 <prvUnlockQueue+0x60>
 8000af4:	e000      	b.n	8000af8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8000af6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	22ff      	movs	r2, #255	; 0xff
 8000afc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8000b00:	f001 fbfc 	bl	80022fc <vPortExitCritical>
}
 8000b04:	bf00      	nop
 8000b06:	3710      	adds	r7, #16
 8000b08:	46bd      	mov	sp, r7
 8000b0a:	bd80      	pop	{r7, pc}

08000b0c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b084      	sub	sp, #16
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8000b14:	f001 fbc2 	bl	800229c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	d102      	bne.n	8000b26 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8000b20:	2301      	movs	r3, #1
 8000b22:	60fb      	str	r3, [r7, #12]
 8000b24:	e001      	b.n	8000b2a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8000b26:	2300      	movs	r3, #0
 8000b28:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8000b2a:	f001 fbe7 	bl	80022fc <vPortExitCritical>

	return xReturn;
 8000b2e:	68fb      	ldr	r3, [r7, #12]
}
 8000b30:	4618      	mov	r0, r3
 8000b32:	3710      	adds	r7, #16
 8000b34:	46bd      	mov	sp, r7
 8000b36:	bd80      	pop	{r7, pc}

08000b38 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	b084      	sub	sp, #16
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8000b40:	f001 fbac 	bl	800229c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000b4c:	429a      	cmp	r2, r3
 8000b4e:	d102      	bne.n	8000b56 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8000b50:	2301      	movs	r3, #1
 8000b52:	60fb      	str	r3, [r7, #12]
 8000b54:	e001      	b.n	8000b5a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8000b56:	2300      	movs	r3, #0
 8000b58:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8000b5a:	f001 fbcf 	bl	80022fc <vPortExitCritical>

	return xReturn;
 8000b5e:	68fb      	ldr	r3, [r7, #12]
}
 8000b60:	4618      	mov	r0, r3
 8000b62:	3710      	adds	r7, #16
 8000b64:	46bd      	mov	sp, r7
 8000b66:	bd80      	pop	{r7, pc}

08000b68 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8000b68:	b480      	push	{r7}
 8000b6a:	b085      	sub	sp, #20
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	6078      	str	r0, [r7, #4]
 8000b70:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8000b72:	2300      	movs	r3, #0
 8000b74:	60fb      	str	r3, [r7, #12]
 8000b76:	e014      	b.n	8000ba2 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8000b78:	4a0e      	ldr	r2, [pc, #56]	; (8000bb4 <vQueueAddToRegistry+0x4c>)
 8000b7a:	68fb      	ldr	r3, [r7, #12]
 8000b7c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8000b80:	2b00      	cmp	r3, #0
 8000b82:	d10b      	bne.n	8000b9c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8000b84:	490b      	ldr	r1, [pc, #44]	; (8000bb4 <vQueueAddToRegistry+0x4c>)
 8000b86:	68fb      	ldr	r3, [r7, #12]
 8000b88:	683a      	ldr	r2, [r7, #0]
 8000b8a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8000b8e:	4a09      	ldr	r2, [pc, #36]	; (8000bb4 <vQueueAddToRegistry+0x4c>)
 8000b90:	68fb      	ldr	r3, [r7, #12]
 8000b92:	00db      	lsls	r3, r3, #3
 8000b94:	4413      	add	r3, r2
 8000b96:	687a      	ldr	r2, [r7, #4]
 8000b98:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8000b9a:	e006      	b.n	8000baa <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8000b9c:	68fb      	ldr	r3, [r7, #12]
 8000b9e:	3301      	adds	r3, #1
 8000ba0:	60fb      	str	r3, [r7, #12]
 8000ba2:	68fb      	ldr	r3, [r7, #12]
 8000ba4:	2b07      	cmp	r3, #7
 8000ba6:	d9e7      	bls.n	8000b78 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8000ba8:	bf00      	nop
 8000baa:	bf00      	nop
 8000bac:	3714      	adds	r7, #20
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	bc80      	pop	{r7}
 8000bb2:	4770      	bx	lr
 8000bb4:	20001190 	.word	0x20001190

08000bb8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b086      	sub	sp, #24
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	60f8      	str	r0, [r7, #12]
 8000bc0:	60b9      	str	r1, [r7, #8]
 8000bc2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8000bc4:	68fb      	ldr	r3, [r7, #12]
 8000bc6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8000bc8:	f001 fb68 	bl	800229c <vPortEnterCritical>
 8000bcc:	697b      	ldr	r3, [r7, #20]
 8000bce:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8000bd2:	b25b      	sxtb	r3, r3
 8000bd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000bd8:	d103      	bne.n	8000be2 <vQueueWaitForMessageRestricted+0x2a>
 8000bda:	697b      	ldr	r3, [r7, #20]
 8000bdc:	2200      	movs	r2, #0
 8000bde:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8000be2:	697b      	ldr	r3, [r7, #20]
 8000be4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8000be8:	b25b      	sxtb	r3, r3
 8000bea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000bee:	d103      	bne.n	8000bf8 <vQueueWaitForMessageRestricted+0x40>
 8000bf0:	697b      	ldr	r3, [r7, #20]
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8000bf8:	f001 fb80 	bl	80022fc <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8000bfc:	697b      	ldr	r3, [r7, #20]
 8000bfe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	d106      	bne.n	8000c12 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8000c04:	697b      	ldr	r3, [r7, #20]
 8000c06:	3324      	adds	r3, #36	; 0x24
 8000c08:	687a      	ldr	r2, [r7, #4]
 8000c0a:	68b9      	ldr	r1, [r7, #8]
 8000c0c:	4618      	mov	r0, r3
 8000c0e:	f000 fbb9 	bl	8001384 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8000c12:	6978      	ldr	r0, [r7, #20]
 8000c14:	f7ff ff28 	bl	8000a68 <prvUnlockQueue>
	}
 8000c18:	bf00      	nop
 8000c1a:	3718      	adds	r7, #24
 8000c1c:	46bd      	mov	sp, r7
 8000c1e:	bd80      	pop	{r7, pc}

08000c20 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	b08c      	sub	sp, #48	; 0x30
 8000c24:	af04      	add	r7, sp, #16
 8000c26:	60f8      	str	r0, [r7, #12]
 8000c28:	60b9      	str	r1, [r7, #8]
 8000c2a:	603b      	str	r3, [r7, #0]
 8000c2c:	4613      	mov	r3, r2
 8000c2e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8000c30:	88fb      	ldrh	r3, [r7, #6]
 8000c32:	009b      	lsls	r3, r3, #2
 8000c34:	4618      	mov	r0, r3
 8000c36:	f001 fc29 	bl	800248c <pvPortMalloc>
 8000c3a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8000c3c:	697b      	ldr	r3, [r7, #20]
 8000c3e:	2b00      	cmp	r3, #0
 8000c40:	d00e      	beq.n	8000c60 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8000c42:	205c      	movs	r0, #92	; 0x5c
 8000c44:	f001 fc22 	bl	800248c <pvPortMalloc>
 8000c48:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8000c4a:	69fb      	ldr	r3, [r7, #28]
 8000c4c:	2b00      	cmp	r3, #0
 8000c4e:	d003      	beq.n	8000c58 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8000c50:	69fb      	ldr	r3, [r7, #28]
 8000c52:	697a      	ldr	r2, [r7, #20]
 8000c54:	631a      	str	r2, [r3, #48]	; 0x30
 8000c56:	e005      	b.n	8000c64 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8000c58:	6978      	ldr	r0, [r7, #20]
 8000c5a:	f001 fcdb 	bl	8002614 <vPortFree>
 8000c5e:	e001      	b.n	8000c64 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8000c60:	2300      	movs	r3, #0
 8000c62:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8000c64:	69fb      	ldr	r3, [r7, #28]
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	d013      	beq.n	8000c92 <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8000c6a:	88fa      	ldrh	r2, [r7, #6]
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	9303      	str	r3, [sp, #12]
 8000c70:	69fb      	ldr	r3, [r7, #28]
 8000c72:	9302      	str	r3, [sp, #8]
 8000c74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000c76:	9301      	str	r3, [sp, #4]
 8000c78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000c7a:	9300      	str	r3, [sp, #0]
 8000c7c:	683b      	ldr	r3, [r7, #0]
 8000c7e:	68b9      	ldr	r1, [r7, #8]
 8000c80:	68f8      	ldr	r0, [r7, #12]
 8000c82:	f000 f80e 	bl	8000ca2 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8000c86:	69f8      	ldr	r0, [r7, #28]
 8000c88:	f000 f892 	bl	8000db0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8000c8c:	2301      	movs	r3, #1
 8000c8e:	61bb      	str	r3, [r7, #24]
 8000c90:	e002      	b.n	8000c98 <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8000c92:	f04f 33ff 	mov.w	r3, #4294967295
 8000c96:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8000c98:	69bb      	ldr	r3, [r7, #24]
	}
 8000c9a:	4618      	mov	r0, r3
 8000c9c:	3720      	adds	r7, #32
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	bd80      	pop	{r7, pc}

08000ca2 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8000ca2:	b580      	push	{r7, lr}
 8000ca4:	b088      	sub	sp, #32
 8000ca6:	af00      	add	r7, sp, #0
 8000ca8:	60f8      	str	r0, [r7, #12]
 8000caa:	60b9      	str	r1, [r7, #8]
 8000cac:	607a      	str	r2, [r7, #4]
 8000cae:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8000cb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000cb2:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	009b      	lsls	r3, r3, #2
 8000cb8:	461a      	mov	r2, r3
 8000cba:	21a5      	movs	r1, #165	; 0xa5
 8000cbc:	f002 fdac 	bl	8003818 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8000cc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000cc2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000cca:	3b01      	subs	r3, #1
 8000ccc:	009b      	lsls	r3, r3, #2
 8000cce:	4413      	add	r3, r2
 8000cd0:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8000cd2:	69bb      	ldr	r3, [r7, #24]
 8000cd4:	f023 0307 	bic.w	r3, r3, #7
 8000cd8:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8000cda:	69bb      	ldr	r3, [r7, #24]
 8000cdc:	f003 0307 	and.w	r3, r3, #7
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	d00a      	beq.n	8000cfa <prvInitialiseNewTask+0x58>
	__asm volatile
 8000ce4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000ce8:	f383 8811 	msr	BASEPRI, r3
 8000cec:	f3bf 8f6f 	isb	sy
 8000cf0:	f3bf 8f4f 	dsb	sy
 8000cf4:	617b      	str	r3, [r7, #20]
}
 8000cf6:	bf00      	nop
 8000cf8:	e7fe      	b.n	8000cf8 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	61fb      	str	r3, [r7, #28]
 8000cfe:	e012      	b.n	8000d26 <prvInitialiseNewTask+0x84>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8000d00:	68ba      	ldr	r2, [r7, #8]
 8000d02:	69fb      	ldr	r3, [r7, #28]
 8000d04:	4413      	add	r3, r2
 8000d06:	7819      	ldrb	r1, [r3, #0]
 8000d08:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000d0a:	69fb      	ldr	r3, [r7, #28]
 8000d0c:	4413      	add	r3, r2
 8000d0e:	3334      	adds	r3, #52	; 0x34
 8000d10:	460a      	mov	r2, r1
 8000d12:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8000d14:	68ba      	ldr	r2, [r7, #8]
 8000d16:	69fb      	ldr	r3, [r7, #28]
 8000d18:	4413      	add	r3, r2
 8000d1a:	781b      	ldrb	r3, [r3, #0]
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	d006      	beq.n	8000d2e <prvInitialiseNewTask+0x8c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8000d20:	69fb      	ldr	r3, [r7, #28]
 8000d22:	3301      	adds	r3, #1
 8000d24:	61fb      	str	r3, [r7, #28]
 8000d26:	69fb      	ldr	r3, [r7, #28]
 8000d28:	2b0f      	cmp	r3, #15
 8000d2a:	d9e9      	bls.n	8000d00 <prvInitialiseNewTask+0x5e>
 8000d2c:	e000      	b.n	8000d30 <prvInitialiseNewTask+0x8e>
		{
			break;
 8000d2e:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8000d30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000d32:	2200      	movs	r2, #0
 8000d34:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8000d38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d3a:	2b37      	cmp	r3, #55	; 0x37
 8000d3c:	d901      	bls.n	8000d42 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8000d3e:	2337      	movs	r3, #55	; 0x37
 8000d40:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8000d42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000d44:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000d46:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8000d48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000d4a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000d4c:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8000d4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000d50:	2200      	movs	r2, #0
 8000d52:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8000d54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000d56:	3304      	adds	r3, #4
 8000d58:	4618      	mov	r0, r3
 8000d5a:	f7ff fa28 	bl	80001ae <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8000d5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000d60:	3318      	adds	r3, #24
 8000d62:	4618      	mov	r0, r3
 8000d64:	f7ff fa23 	bl	80001ae <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8000d68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000d6a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000d6c:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8000d6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d70:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8000d74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000d76:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8000d78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000d7a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000d7c:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8000d7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000d80:	2200      	movs	r2, #0
 8000d82:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8000d84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000d86:	2200      	movs	r2, #0
 8000d88:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8000d8c:	683a      	ldr	r2, [r7, #0]
 8000d8e:	68f9      	ldr	r1, [r7, #12]
 8000d90:	69b8      	ldr	r0, [r7, #24]
 8000d92:	f001 f991 	bl	80020b8 <pxPortInitialiseStack>
 8000d96:	4602      	mov	r2, r0
 8000d98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000d9a:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8000d9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	d002      	beq.n	8000da8 <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8000da2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000da4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000da6:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8000da8:	bf00      	nop
 8000daa:	3720      	adds	r7, #32
 8000dac:	46bd      	mov	sp, r7
 8000dae:	bd80      	pop	{r7, pc}

08000db0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	b082      	sub	sp, #8
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8000db8:	f001 fa70 	bl	800229c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8000dbc:	4b2d      	ldr	r3, [pc, #180]	; (8000e74 <prvAddNewTaskToReadyList+0xc4>)
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	3301      	adds	r3, #1
 8000dc2:	4a2c      	ldr	r2, [pc, #176]	; (8000e74 <prvAddNewTaskToReadyList+0xc4>)
 8000dc4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8000dc6:	4b2c      	ldr	r3, [pc, #176]	; (8000e78 <prvAddNewTaskToReadyList+0xc8>)
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d109      	bne.n	8000de2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8000dce:	4a2a      	ldr	r2, [pc, #168]	; (8000e78 <prvAddNewTaskToReadyList+0xc8>)
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8000dd4:	4b27      	ldr	r3, [pc, #156]	; (8000e74 <prvAddNewTaskToReadyList+0xc4>)
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	2b01      	cmp	r3, #1
 8000dda:	d110      	bne.n	8000dfe <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8000ddc:	f000 fbfe 	bl	80015dc <prvInitialiseTaskLists>
 8000de0:	e00d      	b.n	8000dfe <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8000de2:	4b26      	ldr	r3, [pc, #152]	; (8000e7c <prvAddNewTaskToReadyList+0xcc>)
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	d109      	bne.n	8000dfe <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8000dea:	4b23      	ldr	r3, [pc, #140]	; (8000e78 <prvAddNewTaskToReadyList+0xc8>)
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000df4:	429a      	cmp	r2, r3
 8000df6:	d802      	bhi.n	8000dfe <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8000df8:	4a1f      	ldr	r2, [pc, #124]	; (8000e78 <prvAddNewTaskToReadyList+0xc8>)
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8000dfe:	4b20      	ldr	r3, [pc, #128]	; (8000e80 <prvAddNewTaskToReadyList+0xd0>)
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	3301      	adds	r3, #1
 8000e04:	4a1e      	ldr	r2, [pc, #120]	; (8000e80 <prvAddNewTaskToReadyList+0xd0>)
 8000e06:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8000e08:	4b1d      	ldr	r3, [pc, #116]	; (8000e80 <prvAddNewTaskToReadyList+0xd0>)
 8000e0a:	681a      	ldr	r2, [r3, #0]
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000e14:	4b1b      	ldr	r3, [pc, #108]	; (8000e84 <prvAddNewTaskToReadyList+0xd4>)
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	429a      	cmp	r2, r3
 8000e1a:	d903      	bls.n	8000e24 <prvAddNewTaskToReadyList+0x74>
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e20:	4a18      	ldr	r2, [pc, #96]	; (8000e84 <prvAddNewTaskToReadyList+0xd4>)
 8000e22:	6013      	str	r3, [r2, #0]
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000e28:	4613      	mov	r3, r2
 8000e2a:	009b      	lsls	r3, r3, #2
 8000e2c:	4413      	add	r3, r2
 8000e2e:	009b      	lsls	r3, r3, #2
 8000e30:	4a15      	ldr	r2, [pc, #84]	; (8000e88 <prvAddNewTaskToReadyList+0xd8>)
 8000e32:	441a      	add	r2, r3
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	3304      	adds	r3, #4
 8000e38:	4619      	mov	r1, r3
 8000e3a:	4610      	mov	r0, r2
 8000e3c:	f7ff f9c3 	bl	80001c6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8000e40:	f001 fa5c 	bl	80022fc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8000e44:	4b0d      	ldr	r3, [pc, #52]	; (8000e7c <prvAddNewTaskToReadyList+0xcc>)
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	d00e      	beq.n	8000e6a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8000e4c:	4b0a      	ldr	r3, [pc, #40]	; (8000e78 <prvAddNewTaskToReadyList+0xc8>)
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e56:	429a      	cmp	r2, r3
 8000e58:	d207      	bcs.n	8000e6a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8000e5a:	4b0c      	ldr	r3, [pc, #48]	; (8000e8c <prvAddNewTaskToReadyList+0xdc>)
 8000e5c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000e60:	601a      	str	r2, [r3, #0]
 8000e62:	f3bf 8f4f 	dsb	sy
 8000e66:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8000e6a:	bf00      	nop
 8000e6c:	3708      	adds	r7, #8
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	bd80      	pop	{r7, pc}
 8000e72:	bf00      	nop
 8000e74:	200004f4 	.word	0x200004f4
 8000e78:	20000020 	.word	0x20000020
 8000e7c:	20000500 	.word	0x20000500
 8000e80:	20000510 	.word	0x20000510
 8000e84:	200004fc 	.word	0x200004fc
 8000e88:	20000024 	.word	0x20000024
 8000e8c:	e000ed04 	.word	0xe000ed04

08000e90 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b084      	sub	sp, #16
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8000e98:	2300      	movs	r3, #0
 8000e9a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d017      	beq.n	8000ed2 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8000ea2:	4b13      	ldr	r3, [pc, #76]	; (8000ef0 <vTaskDelay+0x60>)
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d00a      	beq.n	8000ec0 <vTaskDelay+0x30>
	__asm volatile
 8000eaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000eae:	f383 8811 	msr	BASEPRI, r3
 8000eb2:	f3bf 8f6f 	isb	sy
 8000eb6:	f3bf 8f4f 	dsb	sy
 8000eba:	60bb      	str	r3, [r7, #8]
}
 8000ebc:	bf00      	nop
 8000ebe:	e7fe      	b.n	8000ebe <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8000ec0:	f000 f868 	bl	8000f94 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8000ec4:	2100      	movs	r1, #0
 8000ec6:	6878      	ldr	r0, [r7, #4]
 8000ec8:	f000 fdb4 	bl	8001a34 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8000ecc:	f000 f870 	bl	8000fb0 <xTaskResumeAll>
 8000ed0:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8000ed2:	68fb      	ldr	r3, [r7, #12]
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	d107      	bne.n	8000ee8 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8000ed8:	4b06      	ldr	r3, [pc, #24]	; (8000ef4 <vTaskDelay+0x64>)
 8000eda:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000ede:	601a      	str	r2, [r3, #0]
 8000ee0:	f3bf 8f4f 	dsb	sy
 8000ee4:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8000ee8:	bf00      	nop
 8000eea:	3710      	adds	r7, #16
 8000eec:	46bd      	mov	sp, r7
 8000eee:	bd80      	pop	{r7, pc}
 8000ef0:	2000051c 	.word	0x2000051c
 8000ef4:	e000ed04 	.word	0xe000ed04

08000ef8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b086      	sub	sp, #24
 8000efc:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 8000efe:	4b1f      	ldr	r3, [pc, #124]	; (8000f7c <vTaskStartScheduler+0x84>)
 8000f00:	9301      	str	r3, [sp, #4]
 8000f02:	2300      	movs	r3, #0
 8000f04:	9300      	str	r3, [sp, #0]
 8000f06:	2300      	movs	r3, #0
 8000f08:	2280      	movs	r2, #128	; 0x80
 8000f0a:	491d      	ldr	r1, [pc, #116]	; (8000f80 <vTaskStartScheduler+0x88>)
 8000f0c:	481d      	ldr	r0, [pc, #116]	; (8000f84 <vTaskStartScheduler+0x8c>)
 8000f0e:	f7ff fe87 	bl	8000c20 <xTaskCreate>
 8000f12:	60f8      	str	r0, [r7, #12]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8000f14:	68fb      	ldr	r3, [r7, #12]
 8000f16:	2b01      	cmp	r3, #1
 8000f18:	d102      	bne.n	8000f20 <vTaskStartScheduler+0x28>
		{
			xReturn = xTimerCreateTimerTask();
 8000f1a:	f000 fddf 	bl	8001adc <xTimerCreateTimerTask>
 8000f1e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8000f20:	68fb      	ldr	r3, [r7, #12]
 8000f22:	2b01      	cmp	r3, #1
 8000f24:	d116      	bne.n	8000f54 <vTaskStartScheduler+0x5c>
	__asm volatile
 8000f26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000f2a:	f383 8811 	msr	BASEPRI, r3
 8000f2e:	f3bf 8f6f 	isb	sy
 8000f32:	f3bf 8f4f 	dsb	sy
 8000f36:	60bb      	str	r3, [r7, #8]
}
 8000f38:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8000f3a:	4b13      	ldr	r3, [pc, #76]	; (8000f88 <vTaskStartScheduler+0x90>)
 8000f3c:	f04f 32ff 	mov.w	r2, #4294967295
 8000f40:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8000f42:	4b12      	ldr	r3, [pc, #72]	; (8000f8c <vTaskStartScheduler+0x94>)
 8000f44:	2201      	movs	r2, #1
 8000f46:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8000f48:	4b11      	ldr	r3, [pc, #68]	; (8000f90 <vTaskStartScheduler+0x98>)
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8000f4e:	f001 f933 	bl	80021b8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8000f52:	e00e      	b.n	8000f72 <vTaskStartScheduler+0x7a>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8000f54:	68fb      	ldr	r3, [r7, #12]
 8000f56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f5a:	d10a      	bne.n	8000f72 <vTaskStartScheduler+0x7a>
	__asm volatile
 8000f5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000f60:	f383 8811 	msr	BASEPRI, r3
 8000f64:	f3bf 8f6f 	isb	sy
 8000f68:	f3bf 8f4f 	dsb	sy
 8000f6c:	607b      	str	r3, [r7, #4]
}
 8000f6e:	bf00      	nop
 8000f70:	e7fe      	b.n	8000f70 <vTaskStartScheduler+0x78>
}
 8000f72:	bf00      	nop
 8000f74:	3710      	adds	r7, #16
 8000f76:	46bd      	mov	sp, r7
 8000f78:	bd80      	pop	{r7, pc}
 8000f7a:	bf00      	nop
 8000f7c:	20000518 	.word	0x20000518
 8000f80:	08003840 	.word	0x08003840
 8000f84:	080015ad 	.word	0x080015ad
 8000f88:	20000514 	.word	0x20000514
 8000f8c:	20000500 	.word	0x20000500
 8000f90:	200004f8 	.word	0x200004f8

08000f94 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8000f94:	b480      	push	{r7}
 8000f96:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8000f98:	4b04      	ldr	r3, [pc, #16]	; (8000fac <vTaskSuspendAll+0x18>)
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	3301      	adds	r3, #1
 8000f9e:	4a03      	ldr	r2, [pc, #12]	; (8000fac <vTaskSuspendAll+0x18>)
 8000fa0:	6013      	str	r3, [r2, #0]
}
 8000fa2:	bf00      	nop
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	bc80      	pop	{r7}
 8000fa8:	4770      	bx	lr
 8000faa:	bf00      	nop
 8000fac:	2000051c 	.word	0x2000051c

08000fb0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b084      	sub	sp, #16
 8000fb4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8000fba:	2300      	movs	r3, #0
 8000fbc:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8000fbe:	4b42      	ldr	r3, [pc, #264]	; (80010c8 <xTaskResumeAll+0x118>)
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d10a      	bne.n	8000fdc <xTaskResumeAll+0x2c>
	__asm volatile
 8000fc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000fca:	f383 8811 	msr	BASEPRI, r3
 8000fce:	f3bf 8f6f 	isb	sy
 8000fd2:	f3bf 8f4f 	dsb	sy
 8000fd6:	603b      	str	r3, [r7, #0]
}
 8000fd8:	bf00      	nop
 8000fda:	e7fe      	b.n	8000fda <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8000fdc:	f001 f95e 	bl	800229c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8000fe0:	4b39      	ldr	r3, [pc, #228]	; (80010c8 <xTaskResumeAll+0x118>)
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	3b01      	subs	r3, #1
 8000fe6:	4a38      	ldr	r2, [pc, #224]	; (80010c8 <xTaskResumeAll+0x118>)
 8000fe8:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8000fea:	4b37      	ldr	r3, [pc, #220]	; (80010c8 <xTaskResumeAll+0x118>)
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d162      	bne.n	80010b8 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8000ff2:	4b36      	ldr	r3, [pc, #216]	; (80010cc <xTaskResumeAll+0x11c>)
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d05e      	beq.n	80010b8 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8000ffa:	e02f      	b.n	800105c <xTaskResumeAll+0xac>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8000ffc:	4b34      	ldr	r3, [pc, #208]	; (80010d0 <xTaskResumeAll+0x120>)
 8000ffe:	68db      	ldr	r3, [r3, #12]
 8001000:	68db      	ldr	r3, [r3, #12]
 8001002:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8001004:	68fb      	ldr	r3, [r7, #12]
 8001006:	3318      	adds	r3, #24
 8001008:	4618      	mov	r0, r3
 800100a:	f7ff f937 	bl	800027c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800100e:	68fb      	ldr	r3, [r7, #12]
 8001010:	3304      	adds	r3, #4
 8001012:	4618      	mov	r0, r3
 8001014:	f7ff f932 	bl	800027c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8001018:	68fb      	ldr	r3, [r7, #12]
 800101a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800101c:	4b2d      	ldr	r3, [pc, #180]	; (80010d4 <xTaskResumeAll+0x124>)
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	429a      	cmp	r2, r3
 8001022:	d903      	bls.n	800102c <xTaskResumeAll+0x7c>
 8001024:	68fb      	ldr	r3, [r7, #12]
 8001026:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001028:	4a2a      	ldr	r2, [pc, #168]	; (80010d4 <xTaskResumeAll+0x124>)
 800102a:	6013      	str	r3, [r2, #0]
 800102c:	68fb      	ldr	r3, [r7, #12]
 800102e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001030:	4613      	mov	r3, r2
 8001032:	009b      	lsls	r3, r3, #2
 8001034:	4413      	add	r3, r2
 8001036:	009b      	lsls	r3, r3, #2
 8001038:	4a27      	ldr	r2, [pc, #156]	; (80010d8 <xTaskResumeAll+0x128>)
 800103a:	441a      	add	r2, r3
 800103c:	68fb      	ldr	r3, [r7, #12]
 800103e:	3304      	adds	r3, #4
 8001040:	4619      	mov	r1, r3
 8001042:	4610      	mov	r0, r2
 8001044:	f7ff f8bf 	bl	80001c6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8001048:	68fb      	ldr	r3, [r7, #12]
 800104a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800104c:	4b23      	ldr	r3, [pc, #140]	; (80010dc <xTaskResumeAll+0x12c>)
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001052:	429a      	cmp	r2, r3
 8001054:	d302      	bcc.n	800105c <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8001056:	4b22      	ldr	r3, [pc, #136]	; (80010e0 <xTaskResumeAll+0x130>)
 8001058:	2201      	movs	r2, #1
 800105a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800105c:	4b1c      	ldr	r3, [pc, #112]	; (80010d0 <xTaskResumeAll+0x120>)
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	2b00      	cmp	r3, #0
 8001062:	d1cb      	bne.n	8000ffc <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8001064:	68fb      	ldr	r3, [r7, #12]
 8001066:	2b00      	cmp	r3, #0
 8001068:	d001      	beq.n	800106e <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800106a:	f000 fb35 	bl	80016d8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800106e:	4b1d      	ldr	r3, [pc, #116]	; (80010e4 <xTaskResumeAll+0x134>)
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	2b00      	cmp	r3, #0
 8001078:	d010      	beq.n	800109c <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800107a:	f000 f845 	bl	8001108 <xTaskIncrementTick>
 800107e:	4603      	mov	r3, r0
 8001080:	2b00      	cmp	r3, #0
 8001082:	d002      	beq.n	800108a <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8001084:	4b16      	ldr	r3, [pc, #88]	; (80010e0 <xTaskResumeAll+0x130>)
 8001086:	2201      	movs	r2, #1
 8001088:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	3b01      	subs	r3, #1
 800108e:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	2b00      	cmp	r3, #0
 8001094:	d1f1      	bne.n	800107a <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 8001096:	4b13      	ldr	r3, [pc, #76]	; (80010e4 <xTaskResumeAll+0x134>)
 8001098:	2200      	movs	r2, #0
 800109a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800109c:	4b10      	ldr	r3, [pc, #64]	; (80010e0 <xTaskResumeAll+0x130>)
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d009      	beq.n	80010b8 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80010a4:	2301      	movs	r3, #1
 80010a6:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80010a8:	4b0f      	ldr	r3, [pc, #60]	; (80010e8 <xTaskResumeAll+0x138>)
 80010aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80010ae:	601a      	str	r2, [r3, #0]
 80010b0:	f3bf 8f4f 	dsb	sy
 80010b4:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80010b8:	f001 f920 	bl	80022fc <vPortExitCritical>

	return xAlreadyYielded;
 80010bc:	68bb      	ldr	r3, [r7, #8]
}
 80010be:	4618      	mov	r0, r3
 80010c0:	3710      	adds	r7, #16
 80010c2:	46bd      	mov	sp, r7
 80010c4:	bd80      	pop	{r7, pc}
 80010c6:	bf00      	nop
 80010c8:	2000051c 	.word	0x2000051c
 80010cc:	200004f4 	.word	0x200004f4
 80010d0:	200004b4 	.word	0x200004b4
 80010d4:	200004fc 	.word	0x200004fc
 80010d8:	20000024 	.word	0x20000024
 80010dc:	20000020 	.word	0x20000020
 80010e0:	20000508 	.word	0x20000508
 80010e4:	20000504 	.word	0x20000504
 80010e8:	e000ed04 	.word	0xe000ed04

080010ec <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80010ec:	b480      	push	{r7}
 80010ee:	b083      	sub	sp, #12
 80010f0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80010f2:	4b04      	ldr	r3, [pc, #16]	; (8001104 <xTaskGetTickCount+0x18>)
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80010f8:	687b      	ldr	r3, [r7, #4]
}
 80010fa:	4618      	mov	r0, r3
 80010fc:	370c      	adds	r7, #12
 80010fe:	46bd      	mov	sp, r7
 8001100:	bc80      	pop	{r7}
 8001102:	4770      	bx	lr
 8001104:	200004f8 	.word	0x200004f8

08001108 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8001108:	b580      	push	{r7, lr}
 800110a:	b086      	sub	sp, #24
 800110c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800110e:	2300      	movs	r3, #0
 8001110:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001112:	4b51      	ldr	r3, [pc, #324]	; (8001258 <xTaskIncrementTick+0x150>)
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	2b00      	cmp	r3, #0
 8001118:	f040 808e 	bne.w	8001238 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800111c:	4b4f      	ldr	r3, [pc, #316]	; (800125c <xTaskIncrementTick+0x154>)
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	3301      	adds	r3, #1
 8001122:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8001124:	4a4d      	ldr	r2, [pc, #308]	; (800125c <xTaskIncrementTick+0x154>)
 8001126:	693b      	ldr	r3, [r7, #16]
 8001128:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800112a:	693b      	ldr	r3, [r7, #16]
 800112c:	2b00      	cmp	r3, #0
 800112e:	d120      	bne.n	8001172 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8001130:	4b4b      	ldr	r3, [pc, #300]	; (8001260 <xTaskIncrementTick+0x158>)
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	2b00      	cmp	r3, #0
 8001138:	d00a      	beq.n	8001150 <xTaskIncrementTick+0x48>
	__asm volatile
 800113a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800113e:	f383 8811 	msr	BASEPRI, r3
 8001142:	f3bf 8f6f 	isb	sy
 8001146:	f3bf 8f4f 	dsb	sy
 800114a:	603b      	str	r3, [r7, #0]
}
 800114c:	bf00      	nop
 800114e:	e7fe      	b.n	800114e <xTaskIncrementTick+0x46>
 8001150:	4b43      	ldr	r3, [pc, #268]	; (8001260 <xTaskIncrementTick+0x158>)
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	60fb      	str	r3, [r7, #12]
 8001156:	4b43      	ldr	r3, [pc, #268]	; (8001264 <xTaskIncrementTick+0x15c>)
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	4a41      	ldr	r2, [pc, #260]	; (8001260 <xTaskIncrementTick+0x158>)
 800115c:	6013      	str	r3, [r2, #0]
 800115e:	4a41      	ldr	r2, [pc, #260]	; (8001264 <xTaskIncrementTick+0x15c>)
 8001160:	68fb      	ldr	r3, [r7, #12]
 8001162:	6013      	str	r3, [r2, #0]
 8001164:	4b40      	ldr	r3, [pc, #256]	; (8001268 <xTaskIncrementTick+0x160>)
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	3301      	adds	r3, #1
 800116a:	4a3f      	ldr	r2, [pc, #252]	; (8001268 <xTaskIncrementTick+0x160>)
 800116c:	6013      	str	r3, [r2, #0]
 800116e:	f000 fab3 	bl	80016d8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8001172:	4b3e      	ldr	r3, [pc, #248]	; (800126c <xTaskIncrementTick+0x164>)
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	693a      	ldr	r2, [r7, #16]
 8001178:	429a      	cmp	r2, r3
 800117a:	d34e      	bcc.n	800121a <xTaskIncrementTick+0x112>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800117c:	4b38      	ldr	r3, [pc, #224]	; (8001260 <xTaskIncrementTick+0x158>)
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	2b00      	cmp	r3, #0
 8001184:	d101      	bne.n	800118a <xTaskIncrementTick+0x82>
 8001186:	2301      	movs	r3, #1
 8001188:	e000      	b.n	800118c <xTaskIncrementTick+0x84>
 800118a:	2300      	movs	r3, #0
 800118c:	2b00      	cmp	r3, #0
 800118e:	d004      	beq.n	800119a <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001190:	4b36      	ldr	r3, [pc, #216]	; (800126c <xTaskIncrementTick+0x164>)
 8001192:	f04f 32ff 	mov.w	r2, #4294967295
 8001196:	601a      	str	r2, [r3, #0]
					break;
 8001198:	e03f      	b.n	800121a <xTaskIncrementTick+0x112>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800119a:	4b31      	ldr	r3, [pc, #196]	; (8001260 <xTaskIncrementTick+0x158>)
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	68db      	ldr	r3, [r3, #12]
 80011a0:	68db      	ldr	r3, [r3, #12]
 80011a2:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80011a4:	68bb      	ldr	r3, [r7, #8]
 80011a6:	685b      	ldr	r3, [r3, #4]
 80011a8:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80011aa:	693a      	ldr	r2, [r7, #16]
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	429a      	cmp	r2, r3
 80011b0:	d203      	bcs.n	80011ba <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80011b2:	4a2e      	ldr	r2, [pc, #184]	; (800126c <xTaskIncrementTick+0x164>)
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	6013      	str	r3, [r2, #0]
						break;
 80011b8:	e02f      	b.n	800121a <xTaskIncrementTick+0x112>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80011ba:	68bb      	ldr	r3, [r7, #8]
 80011bc:	3304      	adds	r3, #4
 80011be:	4618      	mov	r0, r3
 80011c0:	f7ff f85c 	bl	800027c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80011c4:	68bb      	ldr	r3, [r7, #8]
 80011c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d004      	beq.n	80011d6 <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80011cc:	68bb      	ldr	r3, [r7, #8]
 80011ce:	3318      	adds	r3, #24
 80011d0:	4618      	mov	r0, r3
 80011d2:	f7ff f853 	bl	800027c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80011d6:	68bb      	ldr	r3, [r7, #8]
 80011d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80011da:	4b25      	ldr	r3, [pc, #148]	; (8001270 <xTaskIncrementTick+0x168>)
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	429a      	cmp	r2, r3
 80011e0:	d903      	bls.n	80011ea <xTaskIncrementTick+0xe2>
 80011e2:	68bb      	ldr	r3, [r7, #8]
 80011e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011e6:	4a22      	ldr	r2, [pc, #136]	; (8001270 <xTaskIncrementTick+0x168>)
 80011e8:	6013      	str	r3, [r2, #0]
 80011ea:	68bb      	ldr	r3, [r7, #8]
 80011ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80011ee:	4613      	mov	r3, r2
 80011f0:	009b      	lsls	r3, r3, #2
 80011f2:	4413      	add	r3, r2
 80011f4:	009b      	lsls	r3, r3, #2
 80011f6:	4a1f      	ldr	r2, [pc, #124]	; (8001274 <xTaskIncrementTick+0x16c>)
 80011f8:	441a      	add	r2, r3
 80011fa:	68bb      	ldr	r3, [r7, #8]
 80011fc:	3304      	adds	r3, #4
 80011fe:	4619      	mov	r1, r3
 8001200:	4610      	mov	r0, r2
 8001202:	f7fe ffe0 	bl	80001c6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8001206:	68bb      	ldr	r3, [r7, #8]
 8001208:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800120a:	4b1b      	ldr	r3, [pc, #108]	; (8001278 <xTaskIncrementTick+0x170>)
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001210:	429a      	cmp	r2, r3
 8001212:	d3b3      	bcc.n	800117c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8001214:	2301      	movs	r3, #1
 8001216:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001218:	e7b0      	b.n	800117c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800121a:	4b17      	ldr	r3, [pc, #92]	; (8001278 <xTaskIncrementTick+0x170>)
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001220:	4914      	ldr	r1, [pc, #80]	; (8001274 <xTaskIncrementTick+0x16c>)
 8001222:	4613      	mov	r3, r2
 8001224:	009b      	lsls	r3, r3, #2
 8001226:	4413      	add	r3, r2
 8001228:	009b      	lsls	r3, r3, #2
 800122a:	440b      	add	r3, r1
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	2b01      	cmp	r3, #1
 8001230:	d907      	bls.n	8001242 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8001232:	2301      	movs	r3, #1
 8001234:	617b      	str	r3, [r7, #20]
 8001236:	e004      	b.n	8001242 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8001238:	4b10      	ldr	r3, [pc, #64]	; (800127c <xTaskIncrementTick+0x174>)
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	3301      	adds	r3, #1
 800123e:	4a0f      	ldr	r2, [pc, #60]	; (800127c <xTaskIncrementTick+0x174>)
 8001240:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8001242:	4b0f      	ldr	r3, [pc, #60]	; (8001280 <xTaskIncrementTick+0x178>)
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	2b00      	cmp	r3, #0
 8001248:	d001      	beq.n	800124e <xTaskIncrementTick+0x146>
		{
			xSwitchRequired = pdTRUE;
 800124a:	2301      	movs	r3, #1
 800124c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800124e:	697b      	ldr	r3, [r7, #20]
}
 8001250:	4618      	mov	r0, r3
 8001252:	3718      	adds	r7, #24
 8001254:	46bd      	mov	sp, r7
 8001256:	bd80      	pop	{r7, pc}
 8001258:	2000051c 	.word	0x2000051c
 800125c:	200004f8 	.word	0x200004f8
 8001260:	200004ac 	.word	0x200004ac
 8001264:	200004b0 	.word	0x200004b0
 8001268:	2000050c 	.word	0x2000050c
 800126c:	20000514 	.word	0x20000514
 8001270:	200004fc 	.word	0x200004fc
 8001274:	20000024 	.word	0x20000024
 8001278:	20000020 	.word	0x20000020
 800127c:	20000504 	.word	0x20000504
 8001280:	20000508 	.word	0x20000508

08001284 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8001284:	b480      	push	{r7}
 8001286:	b085      	sub	sp, #20
 8001288:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800128a:	4b27      	ldr	r3, [pc, #156]	; (8001328 <vTaskSwitchContext+0xa4>)
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	2b00      	cmp	r3, #0
 8001290:	d003      	beq.n	800129a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8001292:	4b26      	ldr	r3, [pc, #152]	; (800132c <vTaskSwitchContext+0xa8>)
 8001294:	2201      	movs	r2, #1
 8001296:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8001298:	e041      	b.n	800131e <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 800129a:	4b24      	ldr	r3, [pc, #144]	; (800132c <vTaskSwitchContext+0xa8>)
 800129c:	2200      	movs	r2, #0
 800129e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80012a0:	4b23      	ldr	r3, [pc, #140]	; (8001330 <vTaskSwitchContext+0xac>)
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	60fb      	str	r3, [r7, #12]
 80012a6:	e010      	b.n	80012ca <vTaskSwitchContext+0x46>
 80012a8:	68fb      	ldr	r3, [r7, #12]
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d10a      	bne.n	80012c4 <vTaskSwitchContext+0x40>
	__asm volatile
 80012ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80012b2:	f383 8811 	msr	BASEPRI, r3
 80012b6:	f3bf 8f6f 	isb	sy
 80012ba:	f3bf 8f4f 	dsb	sy
 80012be:	607b      	str	r3, [r7, #4]
}
 80012c0:	bf00      	nop
 80012c2:	e7fe      	b.n	80012c2 <vTaskSwitchContext+0x3e>
 80012c4:	68fb      	ldr	r3, [r7, #12]
 80012c6:	3b01      	subs	r3, #1
 80012c8:	60fb      	str	r3, [r7, #12]
 80012ca:	491a      	ldr	r1, [pc, #104]	; (8001334 <vTaskSwitchContext+0xb0>)
 80012cc:	68fa      	ldr	r2, [r7, #12]
 80012ce:	4613      	mov	r3, r2
 80012d0:	009b      	lsls	r3, r3, #2
 80012d2:	4413      	add	r3, r2
 80012d4:	009b      	lsls	r3, r3, #2
 80012d6:	440b      	add	r3, r1
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d0e4      	beq.n	80012a8 <vTaskSwitchContext+0x24>
 80012de:	68fa      	ldr	r2, [r7, #12]
 80012e0:	4613      	mov	r3, r2
 80012e2:	009b      	lsls	r3, r3, #2
 80012e4:	4413      	add	r3, r2
 80012e6:	009b      	lsls	r3, r3, #2
 80012e8:	4a12      	ldr	r2, [pc, #72]	; (8001334 <vTaskSwitchContext+0xb0>)
 80012ea:	4413      	add	r3, r2
 80012ec:	60bb      	str	r3, [r7, #8]
 80012ee:	68bb      	ldr	r3, [r7, #8]
 80012f0:	685b      	ldr	r3, [r3, #4]
 80012f2:	685a      	ldr	r2, [r3, #4]
 80012f4:	68bb      	ldr	r3, [r7, #8]
 80012f6:	605a      	str	r2, [r3, #4]
 80012f8:	68bb      	ldr	r3, [r7, #8]
 80012fa:	685a      	ldr	r2, [r3, #4]
 80012fc:	68bb      	ldr	r3, [r7, #8]
 80012fe:	3308      	adds	r3, #8
 8001300:	429a      	cmp	r2, r3
 8001302:	d104      	bne.n	800130e <vTaskSwitchContext+0x8a>
 8001304:	68bb      	ldr	r3, [r7, #8]
 8001306:	685b      	ldr	r3, [r3, #4]
 8001308:	685a      	ldr	r2, [r3, #4]
 800130a:	68bb      	ldr	r3, [r7, #8]
 800130c:	605a      	str	r2, [r3, #4]
 800130e:	68bb      	ldr	r3, [r7, #8]
 8001310:	685b      	ldr	r3, [r3, #4]
 8001312:	68db      	ldr	r3, [r3, #12]
 8001314:	4a08      	ldr	r2, [pc, #32]	; (8001338 <vTaskSwitchContext+0xb4>)
 8001316:	6013      	str	r3, [r2, #0]
 8001318:	4a05      	ldr	r2, [pc, #20]	; (8001330 <vTaskSwitchContext+0xac>)
 800131a:	68fb      	ldr	r3, [r7, #12]
 800131c:	6013      	str	r3, [r2, #0]
}
 800131e:	bf00      	nop
 8001320:	3714      	adds	r7, #20
 8001322:	46bd      	mov	sp, r7
 8001324:	bc80      	pop	{r7}
 8001326:	4770      	bx	lr
 8001328:	2000051c 	.word	0x2000051c
 800132c:	20000508 	.word	0x20000508
 8001330:	200004fc 	.word	0x200004fc
 8001334:	20000024 	.word	0x20000024
 8001338:	20000020 	.word	0x20000020

0800133c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800133c:	b580      	push	{r7, lr}
 800133e:	b084      	sub	sp, #16
 8001340:	af00      	add	r7, sp, #0
 8001342:	6078      	str	r0, [r7, #4]
 8001344:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	2b00      	cmp	r3, #0
 800134a:	d10a      	bne.n	8001362 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800134c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001350:	f383 8811 	msr	BASEPRI, r3
 8001354:	f3bf 8f6f 	isb	sy
 8001358:	f3bf 8f4f 	dsb	sy
 800135c:	60fb      	str	r3, [r7, #12]
}
 800135e:	bf00      	nop
 8001360:	e7fe      	b.n	8001360 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8001362:	4b07      	ldr	r3, [pc, #28]	; (8001380 <vTaskPlaceOnEventList+0x44>)
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	3318      	adds	r3, #24
 8001368:	4619      	mov	r1, r3
 800136a:	6878      	ldr	r0, [r7, #4]
 800136c:	f7fe ff4e 	bl	800020c <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8001370:	2101      	movs	r1, #1
 8001372:	6838      	ldr	r0, [r7, #0]
 8001374:	f000 fb5e 	bl	8001a34 <prvAddCurrentTaskToDelayedList>
}
 8001378:	bf00      	nop
 800137a:	3710      	adds	r7, #16
 800137c:	46bd      	mov	sp, r7
 800137e:	bd80      	pop	{r7, pc}
 8001380:	20000020 	.word	0x20000020

08001384 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8001384:	b580      	push	{r7, lr}
 8001386:	b086      	sub	sp, #24
 8001388:	af00      	add	r7, sp, #0
 800138a:	60f8      	str	r0, [r7, #12]
 800138c:	60b9      	str	r1, [r7, #8]
 800138e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8001390:	68fb      	ldr	r3, [r7, #12]
 8001392:	2b00      	cmp	r3, #0
 8001394:	d10a      	bne.n	80013ac <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8001396:	f04f 0350 	mov.w	r3, #80	; 0x50
 800139a:	f383 8811 	msr	BASEPRI, r3
 800139e:	f3bf 8f6f 	isb	sy
 80013a2:	f3bf 8f4f 	dsb	sy
 80013a6:	617b      	str	r3, [r7, #20]
}
 80013a8:	bf00      	nop
 80013aa:	e7fe      	b.n	80013aa <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80013ac:	4b0a      	ldr	r3, [pc, #40]	; (80013d8 <vTaskPlaceOnEventListRestricted+0x54>)
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	3318      	adds	r3, #24
 80013b2:	4619      	mov	r1, r3
 80013b4:	68f8      	ldr	r0, [r7, #12]
 80013b6:	f7fe ff06 	bl	80001c6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d002      	beq.n	80013c6 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 80013c0:	f04f 33ff 	mov.w	r3, #4294967295
 80013c4:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80013c6:	6879      	ldr	r1, [r7, #4]
 80013c8:	68b8      	ldr	r0, [r7, #8]
 80013ca:	f000 fb33 	bl	8001a34 <prvAddCurrentTaskToDelayedList>
	}
 80013ce:	bf00      	nop
 80013d0:	3718      	adds	r7, #24
 80013d2:	46bd      	mov	sp, r7
 80013d4:	bd80      	pop	{r7, pc}
 80013d6:	bf00      	nop
 80013d8:	20000020 	.word	0x20000020

080013dc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	b086      	sub	sp, #24
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	68db      	ldr	r3, [r3, #12]
 80013e8:	68db      	ldr	r3, [r3, #12]
 80013ea:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80013ec:	693b      	ldr	r3, [r7, #16]
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d10a      	bne.n	8001408 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80013f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80013f6:	f383 8811 	msr	BASEPRI, r3
 80013fa:	f3bf 8f6f 	isb	sy
 80013fe:	f3bf 8f4f 	dsb	sy
 8001402:	60fb      	str	r3, [r7, #12]
}
 8001404:	bf00      	nop
 8001406:	e7fe      	b.n	8001406 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8001408:	693b      	ldr	r3, [r7, #16]
 800140a:	3318      	adds	r3, #24
 800140c:	4618      	mov	r0, r3
 800140e:	f7fe ff35 	bl	800027c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001412:	4b1e      	ldr	r3, [pc, #120]	; (800148c <xTaskRemoveFromEventList+0xb0>)
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	2b00      	cmp	r3, #0
 8001418:	d11d      	bne.n	8001456 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800141a:	693b      	ldr	r3, [r7, #16]
 800141c:	3304      	adds	r3, #4
 800141e:	4618      	mov	r0, r3
 8001420:	f7fe ff2c 	bl	800027c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8001424:	693b      	ldr	r3, [r7, #16]
 8001426:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001428:	4b19      	ldr	r3, [pc, #100]	; (8001490 <xTaskRemoveFromEventList+0xb4>)
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	429a      	cmp	r2, r3
 800142e:	d903      	bls.n	8001438 <xTaskRemoveFromEventList+0x5c>
 8001430:	693b      	ldr	r3, [r7, #16]
 8001432:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001434:	4a16      	ldr	r2, [pc, #88]	; (8001490 <xTaskRemoveFromEventList+0xb4>)
 8001436:	6013      	str	r3, [r2, #0]
 8001438:	693b      	ldr	r3, [r7, #16]
 800143a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800143c:	4613      	mov	r3, r2
 800143e:	009b      	lsls	r3, r3, #2
 8001440:	4413      	add	r3, r2
 8001442:	009b      	lsls	r3, r3, #2
 8001444:	4a13      	ldr	r2, [pc, #76]	; (8001494 <xTaskRemoveFromEventList+0xb8>)
 8001446:	441a      	add	r2, r3
 8001448:	693b      	ldr	r3, [r7, #16]
 800144a:	3304      	adds	r3, #4
 800144c:	4619      	mov	r1, r3
 800144e:	4610      	mov	r0, r2
 8001450:	f7fe feb9 	bl	80001c6 <vListInsertEnd>
 8001454:	e005      	b.n	8001462 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8001456:	693b      	ldr	r3, [r7, #16]
 8001458:	3318      	adds	r3, #24
 800145a:	4619      	mov	r1, r3
 800145c:	480e      	ldr	r0, [pc, #56]	; (8001498 <xTaskRemoveFromEventList+0xbc>)
 800145e:	f7fe feb2 	bl	80001c6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8001462:	693b      	ldr	r3, [r7, #16]
 8001464:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001466:	4b0d      	ldr	r3, [pc, #52]	; (800149c <xTaskRemoveFromEventList+0xc0>)
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800146c:	429a      	cmp	r2, r3
 800146e:	d905      	bls.n	800147c <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8001470:	2301      	movs	r3, #1
 8001472:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8001474:	4b0a      	ldr	r3, [pc, #40]	; (80014a0 <xTaskRemoveFromEventList+0xc4>)
 8001476:	2201      	movs	r2, #1
 8001478:	601a      	str	r2, [r3, #0]
 800147a:	e001      	b.n	8001480 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800147c:	2300      	movs	r3, #0
 800147e:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8001480:	697b      	ldr	r3, [r7, #20]
}
 8001482:	4618      	mov	r0, r3
 8001484:	3718      	adds	r7, #24
 8001486:	46bd      	mov	sp, r7
 8001488:	bd80      	pop	{r7, pc}
 800148a:	bf00      	nop
 800148c:	2000051c 	.word	0x2000051c
 8001490:	200004fc 	.word	0x200004fc
 8001494:	20000024 	.word	0x20000024
 8001498:	200004b4 	.word	0x200004b4
 800149c:	20000020 	.word	0x20000020
 80014a0:	20000508 	.word	0x20000508

080014a4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80014a4:	b480      	push	{r7}
 80014a6:	b083      	sub	sp, #12
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80014ac:	4b06      	ldr	r3, [pc, #24]	; (80014c8 <vTaskInternalSetTimeOutState+0x24>)
 80014ae:	681a      	ldr	r2, [r3, #0]
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80014b4:	4b05      	ldr	r3, [pc, #20]	; (80014cc <vTaskInternalSetTimeOutState+0x28>)
 80014b6:	681a      	ldr	r2, [r3, #0]
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	605a      	str	r2, [r3, #4]
}
 80014bc:	bf00      	nop
 80014be:	370c      	adds	r7, #12
 80014c0:	46bd      	mov	sp, r7
 80014c2:	bc80      	pop	{r7}
 80014c4:	4770      	bx	lr
 80014c6:	bf00      	nop
 80014c8:	2000050c 	.word	0x2000050c
 80014cc:	200004f8 	.word	0x200004f8

080014d0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b088      	sub	sp, #32
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	6078      	str	r0, [r7, #4]
 80014d8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d10a      	bne.n	80014f6 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80014e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80014e4:	f383 8811 	msr	BASEPRI, r3
 80014e8:	f3bf 8f6f 	isb	sy
 80014ec:	f3bf 8f4f 	dsb	sy
 80014f0:	613b      	str	r3, [r7, #16]
}
 80014f2:	bf00      	nop
 80014f4:	e7fe      	b.n	80014f4 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80014f6:	683b      	ldr	r3, [r7, #0]
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d10a      	bne.n	8001512 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80014fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001500:	f383 8811 	msr	BASEPRI, r3
 8001504:	f3bf 8f6f 	isb	sy
 8001508:	f3bf 8f4f 	dsb	sy
 800150c:	60fb      	str	r3, [r7, #12]
}
 800150e:	bf00      	nop
 8001510:	e7fe      	b.n	8001510 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8001512:	f000 fec3 	bl	800229c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8001516:	4b1d      	ldr	r3, [pc, #116]	; (800158c <xTaskCheckForTimeOut+0xbc>)
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	685b      	ldr	r3, [r3, #4]
 8001520:	69ba      	ldr	r2, [r7, #24]
 8001522:	1ad3      	subs	r3, r2, r3
 8001524:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8001526:	683b      	ldr	r3, [r7, #0]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800152e:	d102      	bne.n	8001536 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8001530:	2300      	movs	r3, #0
 8001532:	61fb      	str	r3, [r7, #28]
 8001534:	e023      	b.n	800157e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	681a      	ldr	r2, [r3, #0]
 800153a:	4b15      	ldr	r3, [pc, #84]	; (8001590 <xTaskCheckForTimeOut+0xc0>)
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	429a      	cmp	r2, r3
 8001540:	d007      	beq.n	8001552 <xTaskCheckForTimeOut+0x82>
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	685b      	ldr	r3, [r3, #4]
 8001546:	69ba      	ldr	r2, [r7, #24]
 8001548:	429a      	cmp	r2, r3
 800154a:	d302      	bcc.n	8001552 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800154c:	2301      	movs	r3, #1
 800154e:	61fb      	str	r3, [r7, #28]
 8001550:	e015      	b.n	800157e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8001552:	683b      	ldr	r3, [r7, #0]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	697a      	ldr	r2, [r7, #20]
 8001558:	429a      	cmp	r2, r3
 800155a:	d20b      	bcs.n	8001574 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800155c:	683b      	ldr	r3, [r7, #0]
 800155e:	681a      	ldr	r2, [r3, #0]
 8001560:	697b      	ldr	r3, [r7, #20]
 8001562:	1ad2      	subs	r2, r2, r3
 8001564:	683b      	ldr	r3, [r7, #0]
 8001566:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8001568:	6878      	ldr	r0, [r7, #4]
 800156a:	f7ff ff9b 	bl	80014a4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800156e:	2300      	movs	r3, #0
 8001570:	61fb      	str	r3, [r7, #28]
 8001572:	e004      	b.n	800157e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8001574:	683b      	ldr	r3, [r7, #0]
 8001576:	2200      	movs	r2, #0
 8001578:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800157a:	2301      	movs	r3, #1
 800157c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800157e:	f000 febd 	bl	80022fc <vPortExitCritical>

	return xReturn;
 8001582:	69fb      	ldr	r3, [r7, #28]
}
 8001584:	4618      	mov	r0, r3
 8001586:	3720      	adds	r7, #32
 8001588:	46bd      	mov	sp, r7
 800158a:	bd80      	pop	{r7, pc}
 800158c:	200004f8 	.word	0x200004f8
 8001590:	2000050c 	.word	0x2000050c

08001594 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8001594:	b480      	push	{r7}
 8001596:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8001598:	4b03      	ldr	r3, [pc, #12]	; (80015a8 <vTaskMissedYield+0x14>)
 800159a:	2201      	movs	r2, #1
 800159c:	601a      	str	r2, [r3, #0]
}
 800159e:	bf00      	nop
 80015a0:	46bd      	mov	sp, r7
 80015a2:	bc80      	pop	{r7}
 80015a4:	4770      	bx	lr
 80015a6:	bf00      	nop
 80015a8:	20000508 	.word	0x20000508

080015ac <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	b082      	sub	sp, #8
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80015b4:	f000 f852 	bl	800165c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80015b8:	4b06      	ldr	r3, [pc, #24]	; (80015d4 <prvIdleTask+0x28>)
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	2b01      	cmp	r3, #1
 80015be:	d9f9      	bls.n	80015b4 <prvIdleTask+0x8>
			{
				taskYIELD();
 80015c0:	4b05      	ldr	r3, [pc, #20]	; (80015d8 <prvIdleTask+0x2c>)
 80015c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80015c6:	601a      	str	r2, [r3, #0]
 80015c8:	f3bf 8f4f 	dsb	sy
 80015cc:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80015d0:	e7f0      	b.n	80015b4 <prvIdleTask+0x8>
 80015d2:	bf00      	nop
 80015d4:	20000024 	.word	0x20000024
 80015d8:	e000ed04 	.word	0xe000ed04

080015dc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	b082      	sub	sp, #8
 80015e0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80015e2:	2300      	movs	r3, #0
 80015e4:	607b      	str	r3, [r7, #4]
 80015e6:	e00c      	b.n	8001602 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80015e8:	687a      	ldr	r2, [r7, #4]
 80015ea:	4613      	mov	r3, r2
 80015ec:	009b      	lsls	r3, r3, #2
 80015ee:	4413      	add	r3, r2
 80015f0:	009b      	lsls	r3, r3, #2
 80015f2:	4a12      	ldr	r2, [pc, #72]	; (800163c <prvInitialiseTaskLists+0x60>)
 80015f4:	4413      	add	r3, r2
 80015f6:	4618      	mov	r0, r3
 80015f8:	f7fe fdba 	bl	8000170 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	3301      	adds	r3, #1
 8001600:	607b      	str	r3, [r7, #4]
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	2b37      	cmp	r3, #55	; 0x37
 8001606:	d9ef      	bls.n	80015e8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8001608:	480d      	ldr	r0, [pc, #52]	; (8001640 <prvInitialiseTaskLists+0x64>)
 800160a:	f7fe fdb1 	bl	8000170 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800160e:	480d      	ldr	r0, [pc, #52]	; (8001644 <prvInitialiseTaskLists+0x68>)
 8001610:	f7fe fdae 	bl	8000170 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8001614:	480c      	ldr	r0, [pc, #48]	; (8001648 <prvInitialiseTaskLists+0x6c>)
 8001616:	f7fe fdab 	bl	8000170 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800161a:	480c      	ldr	r0, [pc, #48]	; (800164c <prvInitialiseTaskLists+0x70>)
 800161c:	f7fe fda8 	bl	8000170 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8001620:	480b      	ldr	r0, [pc, #44]	; (8001650 <prvInitialiseTaskLists+0x74>)
 8001622:	f7fe fda5 	bl	8000170 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8001626:	4b0b      	ldr	r3, [pc, #44]	; (8001654 <prvInitialiseTaskLists+0x78>)
 8001628:	4a05      	ldr	r2, [pc, #20]	; (8001640 <prvInitialiseTaskLists+0x64>)
 800162a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800162c:	4b0a      	ldr	r3, [pc, #40]	; (8001658 <prvInitialiseTaskLists+0x7c>)
 800162e:	4a05      	ldr	r2, [pc, #20]	; (8001644 <prvInitialiseTaskLists+0x68>)
 8001630:	601a      	str	r2, [r3, #0]
}
 8001632:	bf00      	nop
 8001634:	3708      	adds	r7, #8
 8001636:	46bd      	mov	sp, r7
 8001638:	bd80      	pop	{r7, pc}
 800163a:	bf00      	nop
 800163c:	20000024 	.word	0x20000024
 8001640:	20000484 	.word	0x20000484
 8001644:	20000498 	.word	0x20000498
 8001648:	200004b4 	.word	0x200004b4
 800164c:	200004c8 	.word	0x200004c8
 8001650:	200004e0 	.word	0x200004e0
 8001654:	200004ac 	.word	0x200004ac
 8001658:	200004b0 	.word	0x200004b0

0800165c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800165c:	b580      	push	{r7, lr}
 800165e:	b082      	sub	sp, #8
 8001660:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8001662:	e019      	b.n	8001698 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8001664:	f000 fe1a 	bl	800229c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8001668:	4b10      	ldr	r3, [pc, #64]	; (80016ac <prvCheckTasksWaitingTermination+0x50>)
 800166a:	68db      	ldr	r3, [r3, #12]
 800166c:	68db      	ldr	r3, [r3, #12]
 800166e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	3304      	adds	r3, #4
 8001674:	4618      	mov	r0, r3
 8001676:	f7fe fe01 	bl	800027c <uxListRemove>
				--uxCurrentNumberOfTasks;
 800167a:	4b0d      	ldr	r3, [pc, #52]	; (80016b0 <prvCheckTasksWaitingTermination+0x54>)
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	3b01      	subs	r3, #1
 8001680:	4a0b      	ldr	r2, [pc, #44]	; (80016b0 <prvCheckTasksWaitingTermination+0x54>)
 8001682:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8001684:	4b0b      	ldr	r3, [pc, #44]	; (80016b4 <prvCheckTasksWaitingTermination+0x58>)
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	3b01      	subs	r3, #1
 800168a:	4a0a      	ldr	r2, [pc, #40]	; (80016b4 <prvCheckTasksWaitingTermination+0x58>)
 800168c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800168e:	f000 fe35 	bl	80022fc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8001692:	6878      	ldr	r0, [r7, #4]
 8001694:	f000 f810 	bl	80016b8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8001698:	4b06      	ldr	r3, [pc, #24]	; (80016b4 <prvCheckTasksWaitingTermination+0x58>)
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	2b00      	cmp	r3, #0
 800169e:	d1e1      	bne.n	8001664 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80016a0:	bf00      	nop
 80016a2:	bf00      	nop
 80016a4:	3708      	adds	r7, #8
 80016a6:	46bd      	mov	sp, r7
 80016a8:	bd80      	pop	{r7, pc}
 80016aa:	bf00      	nop
 80016ac:	200004c8 	.word	0x200004c8
 80016b0:	200004f4 	.word	0x200004f4
 80016b4:	200004dc 	.word	0x200004dc

080016b8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	b082      	sub	sp, #8
 80016bc:	af00      	add	r7, sp, #0
 80016be:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016c4:	4618      	mov	r0, r3
 80016c6:	f000 ffa5 	bl	8002614 <vPortFree>
			vPortFree( pxTCB );
 80016ca:	6878      	ldr	r0, [r7, #4]
 80016cc:	f000 ffa2 	bl	8002614 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80016d0:	bf00      	nop
 80016d2:	3708      	adds	r7, #8
 80016d4:	46bd      	mov	sp, r7
 80016d6:	bd80      	pop	{r7, pc}

080016d8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80016d8:	b480      	push	{r7}
 80016da:	b083      	sub	sp, #12
 80016dc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80016de:	4b0e      	ldr	r3, [pc, #56]	; (8001718 <prvResetNextTaskUnblockTime+0x40>)
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d101      	bne.n	80016ec <prvResetNextTaskUnblockTime+0x14>
 80016e8:	2301      	movs	r3, #1
 80016ea:	e000      	b.n	80016ee <prvResetNextTaskUnblockTime+0x16>
 80016ec:	2300      	movs	r3, #0
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d004      	beq.n	80016fc <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80016f2:	4b0a      	ldr	r3, [pc, #40]	; (800171c <prvResetNextTaskUnblockTime+0x44>)
 80016f4:	f04f 32ff 	mov.w	r2, #4294967295
 80016f8:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80016fa:	e008      	b.n	800170e <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80016fc:	4b06      	ldr	r3, [pc, #24]	; (8001718 <prvResetNextTaskUnblockTime+0x40>)
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	68db      	ldr	r3, [r3, #12]
 8001702:	68db      	ldr	r3, [r3, #12]
 8001704:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	685b      	ldr	r3, [r3, #4]
 800170a:	4a04      	ldr	r2, [pc, #16]	; (800171c <prvResetNextTaskUnblockTime+0x44>)
 800170c:	6013      	str	r3, [r2, #0]
}
 800170e:	bf00      	nop
 8001710:	370c      	adds	r7, #12
 8001712:	46bd      	mov	sp, r7
 8001714:	bc80      	pop	{r7}
 8001716:	4770      	bx	lr
 8001718:	200004ac 	.word	0x200004ac
 800171c:	20000514 	.word	0x20000514

08001720 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8001720:	b480      	push	{r7}
 8001722:	b083      	sub	sp, #12
 8001724:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8001726:	4b0b      	ldr	r3, [pc, #44]	; (8001754 <xTaskGetSchedulerState+0x34>)
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	2b00      	cmp	r3, #0
 800172c:	d102      	bne.n	8001734 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800172e:	2301      	movs	r3, #1
 8001730:	607b      	str	r3, [r7, #4]
 8001732:	e008      	b.n	8001746 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001734:	4b08      	ldr	r3, [pc, #32]	; (8001758 <xTaskGetSchedulerState+0x38>)
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	2b00      	cmp	r3, #0
 800173a:	d102      	bne.n	8001742 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800173c:	2302      	movs	r3, #2
 800173e:	607b      	str	r3, [r7, #4]
 8001740:	e001      	b.n	8001746 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8001742:	2300      	movs	r3, #0
 8001744:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8001746:	687b      	ldr	r3, [r7, #4]
	}
 8001748:	4618      	mov	r0, r3
 800174a:	370c      	adds	r7, #12
 800174c:	46bd      	mov	sp, r7
 800174e:	bc80      	pop	{r7}
 8001750:	4770      	bx	lr
 8001752:	bf00      	nop
 8001754:	20000500 	.word	0x20000500
 8001758:	2000051c 	.word	0x2000051c

0800175c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800175c:	b580      	push	{r7, lr}
 800175e:	b086      	sub	sp, #24
 8001760:	af00      	add	r7, sp, #0
 8001762:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8001768:	2300      	movs	r3, #0
 800176a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	2b00      	cmp	r3, #0
 8001770:	d056      	beq.n	8001820 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8001772:	4b2e      	ldr	r3, [pc, #184]	; (800182c <xTaskPriorityDisinherit+0xd0>)
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	693a      	ldr	r2, [r7, #16]
 8001778:	429a      	cmp	r2, r3
 800177a:	d00a      	beq.n	8001792 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800177c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001780:	f383 8811 	msr	BASEPRI, r3
 8001784:	f3bf 8f6f 	isb	sy
 8001788:	f3bf 8f4f 	dsb	sy
 800178c:	60fb      	str	r3, [r7, #12]
}
 800178e:	bf00      	nop
 8001790:	e7fe      	b.n	8001790 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8001792:	693b      	ldr	r3, [r7, #16]
 8001794:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001796:	2b00      	cmp	r3, #0
 8001798:	d10a      	bne.n	80017b0 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800179a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800179e:	f383 8811 	msr	BASEPRI, r3
 80017a2:	f3bf 8f6f 	isb	sy
 80017a6:	f3bf 8f4f 	dsb	sy
 80017aa:	60bb      	str	r3, [r7, #8]
}
 80017ac:	bf00      	nop
 80017ae:	e7fe      	b.n	80017ae <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80017b0:	693b      	ldr	r3, [r7, #16]
 80017b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80017b4:	1e5a      	subs	r2, r3, #1
 80017b6:	693b      	ldr	r3, [r7, #16]
 80017b8:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80017ba:	693b      	ldr	r3, [r7, #16]
 80017bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80017be:	693b      	ldr	r3, [r7, #16]
 80017c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017c2:	429a      	cmp	r2, r3
 80017c4:	d02c      	beq.n	8001820 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80017c6:	693b      	ldr	r3, [r7, #16]
 80017c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d128      	bne.n	8001820 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80017ce:	693b      	ldr	r3, [r7, #16]
 80017d0:	3304      	adds	r3, #4
 80017d2:	4618      	mov	r0, r3
 80017d4:	f7fe fd52 	bl	800027c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80017d8:	693b      	ldr	r3, [r7, #16]
 80017da:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80017dc:	693b      	ldr	r3, [r7, #16]
 80017de:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80017e0:	693b      	ldr	r3, [r7, #16]
 80017e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017e4:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80017e8:	693b      	ldr	r3, [r7, #16]
 80017ea:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80017ec:	693b      	ldr	r3, [r7, #16]
 80017ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80017f0:	4b0f      	ldr	r3, [pc, #60]	; (8001830 <xTaskPriorityDisinherit+0xd4>)
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	429a      	cmp	r2, r3
 80017f6:	d903      	bls.n	8001800 <xTaskPriorityDisinherit+0xa4>
 80017f8:	693b      	ldr	r3, [r7, #16]
 80017fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017fc:	4a0c      	ldr	r2, [pc, #48]	; (8001830 <xTaskPriorityDisinherit+0xd4>)
 80017fe:	6013      	str	r3, [r2, #0]
 8001800:	693b      	ldr	r3, [r7, #16]
 8001802:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001804:	4613      	mov	r3, r2
 8001806:	009b      	lsls	r3, r3, #2
 8001808:	4413      	add	r3, r2
 800180a:	009b      	lsls	r3, r3, #2
 800180c:	4a09      	ldr	r2, [pc, #36]	; (8001834 <xTaskPriorityDisinherit+0xd8>)
 800180e:	441a      	add	r2, r3
 8001810:	693b      	ldr	r3, [r7, #16]
 8001812:	3304      	adds	r3, #4
 8001814:	4619      	mov	r1, r3
 8001816:	4610      	mov	r0, r2
 8001818:	f7fe fcd5 	bl	80001c6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800181c:	2301      	movs	r3, #1
 800181e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8001820:	697b      	ldr	r3, [r7, #20]
	}
 8001822:	4618      	mov	r0, r3
 8001824:	3718      	adds	r7, #24
 8001826:	46bd      	mov	sp, r7
 8001828:	bd80      	pop	{r7, pc}
 800182a:	bf00      	nop
 800182c:	20000020 	.word	0x20000020
 8001830:	200004fc 	.word	0x200004fc
 8001834:	20000024 	.word	0x20000024

08001838 <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 8001838:	b580      	push	{r7, lr}
 800183a:	b086      	sub	sp, #24
 800183c:	af00      	add	r7, sp, #0
 800183e:	60f8      	str	r0, [r7, #12]
 8001840:	60b9      	str	r1, [r7, #8]
 8001842:	607a      	str	r2, [r7, #4]
 8001844:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 8001846:	f000 fd29 	bl	800229c <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 800184a:	4b26      	ldr	r3, [pc, #152]	; (80018e4 <xTaskNotifyWait+0xac>)
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8001852:	b2db      	uxtb	r3, r3
 8001854:	2b02      	cmp	r3, #2
 8001856:	d01a      	beq.n	800188e <xTaskNotifyWait+0x56>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 8001858:	4b22      	ldr	r3, [pc, #136]	; (80018e4 <xTaskNotifyWait+0xac>)
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800185e:	68fa      	ldr	r2, [r7, #12]
 8001860:	43d2      	mvns	r2, r2
 8001862:	400a      	ands	r2, r1
 8001864:	655a      	str	r2, [r3, #84]	; 0x54

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 8001866:	4b1f      	ldr	r3, [pc, #124]	; (80018e4 <xTaskNotifyWait+0xac>)
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	2201      	movs	r2, #1
 800186c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

				if( xTicksToWait > ( TickType_t ) 0 )
 8001870:	683b      	ldr	r3, [r7, #0]
 8001872:	2b00      	cmp	r3, #0
 8001874:	d00b      	beq.n	800188e <xTaskNotifyWait+0x56>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8001876:	2101      	movs	r1, #1
 8001878:	6838      	ldr	r0, [r7, #0]
 800187a:	f000 f8db 	bl	8001a34 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 800187e:	4b1a      	ldr	r3, [pc, #104]	; (80018e8 <xTaskNotifyWait+0xb0>)
 8001880:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001884:	601a      	str	r2, [r3, #0]
 8001886:	f3bf 8f4f 	dsb	sy
 800188a:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800188e:	f000 fd35 	bl	80022fc <vPortExitCritical>

		taskENTER_CRITICAL();
 8001892:	f000 fd03 	bl	800229c <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	2b00      	cmp	r3, #0
 800189a:	d004      	beq.n	80018a6 <xTaskNotifyWait+0x6e>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 800189c:	4b11      	ldr	r3, [pc, #68]	; (80018e4 <xTaskNotifyWait+0xac>)
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 80018a6:	4b0f      	ldr	r3, [pc, #60]	; (80018e4 <xTaskNotifyWait+0xac>)
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80018ae:	b2db      	uxtb	r3, r3
 80018b0:	2b02      	cmp	r3, #2
 80018b2:	d002      	beq.n	80018ba <xTaskNotifyWait+0x82>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 80018b4:	2300      	movs	r3, #0
 80018b6:	617b      	str	r3, [r7, #20]
 80018b8:	e008      	b.n	80018cc <xTaskNotifyWait+0x94>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 80018ba:	4b0a      	ldr	r3, [pc, #40]	; (80018e4 <xTaskNotifyWait+0xac>)
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80018c0:	68ba      	ldr	r2, [r7, #8]
 80018c2:	43d2      	mvns	r2, r2
 80018c4:	400a      	ands	r2, r1
 80018c6:	655a      	str	r2, [r3, #84]	; 0x54
				xReturn = pdTRUE;
 80018c8:	2301      	movs	r3, #1
 80018ca:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80018cc:	4b05      	ldr	r3, [pc, #20]	; (80018e4 <xTaskNotifyWait+0xac>)
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	2200      	movs	r2, #0
 80018d2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
		}
		taskEXIT_CRITICAL();
 80018d6:	f000 fd11 	bl	80022fc <vPortExitCritical>

		return xReturn;
 80018da:	697b      	ldr	r3, [r7, #20]
	}
 80018dc:	4618      	mov	r0, r3
 80018de:	3718      	adds	r7, #24
 80018e0:	46bd      	mov	sp, r7
 80018e2:	bd80      	pop	{r7, pc}
 80018e4:	20000020 	.word	0x20000020
 80018e8:	e000ed04 	.word	0xe000ed04

080018ec <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	b08a      	sub	sp, #40	; 0x28
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	60f8      	str	r0, [r7, #12]
 80018f4:	60b9      	str	r1, [r7, #8]
 80018f6:	603b      	str	r3, [r7, #0]
 80018f8:	4613      	mov	r3, r2
 80018fa:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 80018fc:	2301      	movs	r3, #1
 80018fe:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	2b00      	cmp	r3, #0
 8001904:	d10a      	bne.n	800191c <xTaskGenericNotify+0x30>
	__asm volatile
 8001906:	f04f 0350 	mov.w	r3, #80	; 0x50
 800190a:	f383 8811 	msr	BASEPRI, r3
 800190e:	f3bf 8f6f 	isb	sy
 8001912:	f3bf 8f4f 	dsb	sy
 8001916:	61bb      	str	r3, [r7, #24]
}
 8001918:	bf00      	nop
 800191a:	e7fe      	b.n	800191a <xTaskGenericNotify+0x2e>
		pxTCB = ( TCB_t * ) xTaskToNotify;
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 8001920:	f000 fcbc 	bl	800229c <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 8001924:	683b      	ldr	r3, [r7, #0]
 8001926:	2b00      	cmp	r3, #0
 8001928:	d003      	beq.n	8001932 <xTaskGenericNotify+0x46>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 800192a:	6a3b      	ldr	r3, [r7, #32]
 800192c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800192e:	683b      	ldr	r3, [r7, #0]
 8001930:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8001932:	6a3b      	ldr	r3, [r7, #32]
 8001934:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8001938:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800193a:	6a3b      	ldr	r3, [r7, #32]
 800193c:	2202      	movs	r2, #2
 800193e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

			switch( eAction )
 8001942:	79fb      	ldrb	r3, [r7, #7]
 8001944:	2b04      	cmp	r3, #4
 8001946:	d828      	bhi.n	800199a <xTaskGenericNotify+0xae>
 8001948:	a201      	add	r2, pc, #4	; (adr r2, 8001950 <xTaskGenericNotify+0x64>)
 800194a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800194e:	bf00      	nop
 8001950:	0800199b 	.word	0x0800199b
 8001954:	08001965 	.word	0x08001965
 8001958:	08001973 	.word	0x08001973
 800195c:	0800197f 	.word	0x0800197f
 8001960:	08001987 	.word	0x08001987
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8001964:	6a3b      	ldr	r3, [r7, #32]
 8001966:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001968:	68bb      	ldr	r3, [r7, #8]
 800196a:	431a      	orrs	r2, r3
 800196c:	6a3b      	ldr	r3, [r7, #32]
 800196e:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 8001970:	e013      	b.n	800199a <xTaskGenericNotify+0xae>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 8001972:	6a3b      	ldr	r3, [r7, #32]
 8001974:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001976:	1c5a      	adds	r2, r3, #1
 8001978:	6a3b      	ldr	r3, [r7, #32]
 800197a:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 800197c:	e00d      	b.n	800199a <xTaskGenericNotify+0xae>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 800197e:	6a3b      	ldr	r3, [r7, #32]
 8001980:	68ba      	ldr	r2, [r7, #8]
 8001982:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 8001984:	e009      	b.n	800199a <xTaskGenericNotify+0xae>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8001986:	7ffb      	ldrb	r3, [r7, #31]
 8001988:	2b02      	cmp	r3, #2
 800198a:	d003      	beq.n	8001994 <xTaskGenericNotify+0xa8>
					{
						pxTCB->ulNotifiedValue = ulValue;
 800198c:	6a3b      	ldr	r3, [r7, #32]
 800198e:	68ba      	ldr	r2, [r7, #8]
 8001990:	655a      	str	r2, [r3, #84]	; 0x54
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 8001992:	e001      	b.n	8001998 <xTaskGenericNotify+0xac>
						xReturn = pdFAIL;
 8001994:	2300      	movs	r3, #0
 8001996:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 8001998:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800199a:	7ffb      	ldrb	r3, [r7, #31]
 800199c:	2b01      	cmp	r3, #1
 800199e:	d13a      	bne.n	8001a16 <xTaskGenericNotify+0x12a>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80019a0:	6a3b      	ldr	r3, [r7, #32]
 80019a2:	3304      	adds	r3, #4
 80019a4:	4618      	mov	r0, r3
 80019a6:	f7fe fc69 	bl	800027c <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 80019aa:	6a3b      	ldr	r3, [r7, #32]
 80019ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80019ae:	4b1d      	ldr	r3, [pc, #116]	; (8001a24 <xTaskGenericNotify+0x138>)
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	429a      	cmp	r2, r3
 80019b4:	d903      	bls.n	80019be <xTaskGenericNotify+0xd2>
 80019b6:	6a3b      	ldr	r3, [r7, #32]
 80019b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019ba:	4a1a      	ldr	r2, [pc, #104]	; (8001a24 <xTaskGenericNotify+0x138>)
 80019bc:	6013      	str	r3, [r2, #0]
 80019be:	6a3b      	ldr	r3, [r7, #32]
 80019c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80019c2:	4613      	mov	r3, r2
 80019c4:	009b      	lsls	r3, r3, #2
 80019c6:	4413      	add	r3, r2
 80019c8:	009b      	lsls	r3, r3, #2
 80019ca:	4a17      	ldr	r2, [pc, #92]	; (8001a28 <xTaskGenericNotify+0x13c>)
 80019cc:	441a      	add	r2, r3
 80019ce:	6a3b      	ldr	r3, [r7, #32]
 80019d0:	3304      	adds	r3, #4
 80019d2:	4619      	mov	r1, r3
 80019d4:	4610      	mov	r0, r2
 80019d6:	f7fe fbf6 	bl	80001c6 <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 80019da:	6a3b      	ldr	r3, [r7, #32]
 80019dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d00a      	beq.n	80019f8 <xTaskGenericNotify+0x10c>
	__asm volatile
 80019e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80019e6:	f383 8811 	msr	BASEPRI, r3
 80019ea:	f3bf 8f6f 	isb	sy
 80019ee:	f3bf 8f4f 	dsb	sy
 80019f2:	617b      	str	r3, [r7, #20]
}
 80019f4:	bf00      	nop
 80019f6:	e7fe      	b.n	80019f6 <xTaskGenericNotify+0x10a>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80019f8:	6a3b      	ldr	r3, [r7, #32]
 80019fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80019fc:	4b0b      	ldr	r3, [pc, #44]	; (8001a2c <xTaskGenericNotify+0x140>)
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a02:	429a      	cmp	r2, r3
 8001a04:	d907      	bls.n	8001a16 <xTaskGenericNotify+0x12a>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 8001a06:	4b0a      	ldr	r3, [pc, #40]	; (8001a30 <xTaskGenericNotify+0x144>)
 8001a08:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001a0c:	601a      	str	r2, [r3, #0]
 8001a0e:	f3bf 8f4f 	dsb	sy
 8001a12:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8001a16:	f000 fc71 	bl	80022fc <vPortExitCritical>

		return xReturn;
 8001a1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 8001a1c:	4618      	mov	r0, r3
 8001a1e:	3728      	adds	r7, #40	; 0x28
 8001a20:	46bd      	mov	sp, r7
 8001a22:	bd80      	pop	{r7, pc}
 8001a24:	200004fc 	.word	0x200004fc
 8001a28:	20000024 	.word	0x20000024
 8001a2c:	20000020 	.word	0x20000020
 8001a30:	e000ed04 	.word	0xe000ed04

08001a34 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8001a34:	b580      	push	{r7, lr}
 8001a36:	b084      	sub	sp, #16
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	6078      	str	r0, [r7, #4]
 8001a3c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8001a3e:	4b21      	ldr	r3, [pc, #132]	; (8001ac4 <prvAddCurrentTaskToDelayedList+0x90>)
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8001a44:	4b20      	ldr	r3, [pc, #128]	; (8001ac8 <prvAddCurrentTaskToDelayedList+0x94>)
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	3304      	adds	r3, #4
 8001a4a:	4618      	mov	r0, r3
 8001a4c:	f7fe fc16 	bl	800027c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a56:	d10a      	bne.n	8001a6e <prvAddCurrentTaskToDelayedList+0x3a>
 8001a58:	683b      	ldr	r3, [r7, #0]
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d007      	beq.n	8001a6e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8001a5e:	4b1a      	ldr	r3, [pc, #104]	; (8001ac8 <prvAddCurrentTaskToDelayedList+0x94>)
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	3304      	adds	r3, #4
 8001a64:	4619      	mov	r1, r3
 8001a66:	4819      	ldr	r0, [pc, #100]	; (8001acc <prvAddCurrentTaskToDelayedList+0x98>)
 8001a68:	f7fe fbad 	bl	80001c6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8001a6c:	e026      	b.n	8001abc <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8001a6e:	68fa      	ldr	r2, [r7, #12]
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	4413      	add	r3, r2
 8001a74:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8001a76:	4b14      	ldr	r3, [pc, #80]	; (8001ac8 <prvAddCurrentTaskToDelayedList+0x94>)
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	68ba      	ldr	r2, [r7, #8]
 8001a7c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8001a7e:	68ba      	ldr	r2, [r7, #8]
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	429a      	cmp	r2, r3
 8001a84:	d209      	bcs.n	8001a9a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8001a86:	4b12      	ldr	r3, [pc, #72]	; (8001ad0 <prvAddCurrentTaskToDelayedList+0x9c>)
 8001a88:	681a      	ldr	r2, [r3, #0]
 8001a8a:	4b0f      	ldr	r3, [pc, #60]	; (8001ac8 <prvAddCurrentTaskToDelayedList+0x94>)
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	3304      	adds	r3, #4
 8001a90:	4619      	mov	r1, r3
 8001a92:	4610      	mov	r0, r2
 8001a94:	f7fe fbba 	bl	800020c <vListInsert>
}
 8001a98:	e010      	b.n	8001abc <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8001a9a:	4b0e      	ldr	r3, [pc, #56]	; (8001ad4 <prvAddCurrentTaskToDelayedList+0xa0>)
 8001a9c:	681a      	ldr	r2, [r3, #0]
 8001a9e:	4b0a      	ldr	r3, [pc, #40]	; (8001ac8 <prvAddCurrentTaskToDelayedList+0x94>)
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	3304      	adds	r3, #4
 8001aa4:	4619      	mov	r1, r3
 8001aa6:	4610      	mov	r0, r2
 8001aa8:	f7fe fbb0 	bl	800020c <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8001aac:	4b0a      	ldr	r3, [pc, #40]	; (8001ad8 <prvAddCurrentTaskToDelayedList+0xa4>)
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	68ba      	ldr	r2, [r7, #8]
 8001ab2:	429a      	cmp	r2, r3
 8001ab4:	d202      	bcs.n	8001abc <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8001ab6:	4a08      	ldr	r2, [pc, #32]	; (8001ad8 <prvAddCurrentTaskToDelayedList+0xa4>)
 8001ab8:	68bb      	ldr	r3, [r7, #8]
 8001aba:	6013      	str	r3, [r2, #0]
}
 8001abc:	bf00      	nop
 8001abe:	3710      	adds	r7, #16
 8001ac0:	46bd      	mov	sp, r7
 8001ac2:	bd80      	pop	{r7, pc}
 8001ac4:	200004f8 	.word	0x200004f8
 8001ac8:	20000020 	.word	0x20000020
 8001acc:	200004e0 	.word	0x200004e0
 8001ad0:	200004b0 	.word	0x200004b0
 8001ad4:	200004ac 	.word	0x200004ac
 8001ad8:	20000514 	.word	0x20000514

08001adc <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	b084      	sub	sp, #16
 8001ae0:	af02      	add	r7, sp, #8
BaseType_t xReturn = pdFAIL;
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	607b      	str	r3, [r7, #4]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8001ae6:	f000 fab1 	bl	800204c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8001aea:	4b11      	ldr	r3, [pc, #68]	; (8001b30 <xTimerCreateTimerTask+0x54>)
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d00b      	beq.n	8001b0a <xTimerCreateTimerTask+0x2e>
				xReturn = pdPASS;
			}
		}
		#else
		{
			xReturn = xTaskCreate(	prvTimerTask,
 8001af2:	4b10      	ldr	r3, [pc, #64]	; (8001b34 <xTimerCreateTimerTask+0x58>)
 8001af4:	9301      	str	r3, [sp, #4]
 8001af6:	2302      	movs	r3, #2
 8001af8:	9300      	str	r3, [sp, #0]
 8001afa:	2300      	movs	r3, #0
 8001afc:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001b00:	490d      	ldr	r1, [pc, #52]	; (8001b38 <xTimerCreateTimerTask+0x5c>)
 8001b02:	480e      	ldr	r0, [pc, #56]	; (8001b3c <xTimerCreateTimerTask+0x60>)
 8001b04:	f7ff f88c 	bl	8000c20 <xTaskCreate>
 8001b08:	6078      	str	r0, [r7, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d10a      	bne.n	8001b26 <xTimerCreateTimerTask+0x4a>
	__asm volatile
 8001b10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001b14:	f383 8811 	msr	BASEPRI, r3
 8001b18:	f3bf 8f6f 	isb	sy
 8001b1c:	f3bf 8f4f 	dsb	sy
 8001b20:	603b      	str	r3, [r7, #0]
}
 8001b22:	bf00      	nop
 8001b24:	e7fe      	b.n	8001b24 <xTimerCreateTimerTask+0x48>
	return xReturn;
 8001b26:	687b      	ldr	r3, [r7, #4]
}
 8001b28:	4618      	mov	r0, r3
 8001b2a:	3708      	adds	r7, #8
 8001b2c:	46bd      	mov	sp, r7
 8001b2e:	bd80      	pop	{r7, pc}
 8001b30:	20000550 	.word	0x20000550
 8001b34:	20000554 	.word	0x20000554
 8001b38:	08003848 	.word	0x08003848
 8001b3c:	08001c5d 	.word	0x08001c5d

08001b40 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8001b40:	b580      	push	{r7, lr}
 8001b42:	b08a      	sub	sp, #40	; 0x28
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	60f8      	str	r0, [r7, #12]
 8001b48:	60b9      	str	r1, [r7, #8]
 8001b4a:	607a      	str	r2, [r7, #4]
 8001b4c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8001b4e:	2300      	movs	r3, #0
 8001b50:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d10a      	bne.n	8001b6e <xTimerGenericCommand+0x2e>
	__asm volatile
 8001b58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001b5c:	f383 8811 	msr	BASEPRI, r3
 8001b60:	f3bf 8f6f 	isb	sy
 8001b64:	f3bf 8f4f 	dsb	sy
 8001b68:	623b      	str	r3, [r7, #32]
}
 8001b6a:	bf00      	nop
 8001b6c:	e7fe      	b.n	8001b6c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8001b6e:	4b1a      	ldr	r3, [pc, #104]	; (8001bd8 <xTimerGenericCommand+0x98>)
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d02a      	beq.n	8001bcc <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8001b76:	68bb      	ldr	r3, [r7, #8]
 8001b78:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8001b82:	68bb      	ldr	r3, [r7, #8]
 8001b84:	2b05      	cmp	r3, #5
 8001b86:	dc18      	bgt.n	8001bba <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8001b88:	f7ff fdca 	bl	8001720 <xTaskGetSchedulerState>
 8001b8c:	4603      	mov	r3, r0
 8001b8e:	2b02      	cmp	r3, #2
 8001b90:	d109      	bne.n	8001ba6 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8001b92:	4b11      	ldr	r3, [pc, #68]	; (8001bd8 <xTimerGenericCommand+0x98>)
 8001b94:	6818      	ldr	r0, [r3, #0]
 8001b96:	f107 0110 	add.w	r1, r7, #16
 8001b9a:	2300      	movs	r3, #0
 8001b9c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001b9e:	f7fe fc5d 	bl	800045c <xQueueGenericSend>
 8001ba2:	6278      	str	r0, [r7, #36]	; 0x24
 8001ba4:	e012      	b.n	8001bcc <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8001ba6:	4b0c      	ldr	r3, [pc, #48]	; (8001bd8 <xTimerGenericCommand+0x98>)
 8001ba8:	6818      	ldr	r0, [r3, #0]
 8001baa:	f107 0110 	add.w	r1, r7, #16
 8001bae:	2300      	movs	r3, #0
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	f7fe fc53 	bl	800045c <xQueueGenericSend>
 8001bb6:	6278      	str	r0, [r7, #36]	; 0x24
 8001bb8:	e008      	b.n	8001bcc <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8001bba:	4b07      	ldr	r3, [pc, #28]	; (8001bd8 <xTimerGenericCommand+0x98>)
 8001bbc:	6818      	ldr	r0, [r3, #0]
 8001bbe:	f107 0110 	add.w	r1, r7, #16
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	683a      	ldr	r2, [r7, #0]
 8001bc6:	f7fe fd47 	bl	8000658 <xQueueGenericSendFromISR>
 8001bca:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8001bcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8001bce:	4618      	mov	r0, r3
 8001bd0:	3728      	adds	r7, #40	; 0x28
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	bd80      	pop	{r7, pc}
 8001bd6:	bf00      	nop
 8001bd8:	20000550 	.word	0x20000550

08001bdc <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	b088      	sub	sp, #32
 8001be0:	af02      	add	r7, sp, #8
 8001be2:	6078      	str	r0, [r7, #4]
 8001be4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8001be6:	4b1c      	ldr	r3, [pc, #112]	; (8001c58 <prvProcessExpiredTimer+0x7c>)
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	68db      	ldr	r3, [r3, #12]
 8001bec:	68db      	ldr	r3, [r3, #12]
 8001bee:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8001bf0:	697b      	ldr	r3, [r7, #20]
 8001bf2:	3304      	adds	r3, #4
 8001bf4:	4618      	mov	r0, r3
 8001bf6:	f7fe fb41 	bl	800027c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8001bfa:	697b      	ldr	r3, [r7, #20]
 8001bfc:	69db      	ldr	r3, [r3, #28]
 8001bfe:	2b01      	cmp	r3, #1
 8001c00:	d122      	bne.n	8001c48 <prvProcessExpiredTimer+0x6c>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8001c02:	697b      	ldr	r3, [r7, #20]
 8001c04:	699a      	ldr	r2, [r3, #24]
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	18d1      	adds	r1, r2, r3
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	683a      	ldr	r2, [r7, #0]
 8001c0e:	6978      	ldr	r0, [r7, #20]
 8001c10:	f000 f8c8 	bl	8001da4 <prvInsertTimerInActiveList>
 8001c14:	4603      	mov	r3, r0
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d016      	beq.n	8001c48 <prvProcessExpiredTimer+0x6c>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	9300      	str	r3, [sp, #0]
 8001c1e:	2300      	movs	r3, #0
 8001c20:	687a      	ldr	r2, [r7, #4]
 8001c22:	2100      	movs	r1, #0
 8001c24:	6978      	ldr	r0, [r7, #20]
 8001c26:	f7ff ff8b 	bl	8001b40 <xTimerGenericCommand>
 8001c2a:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8001c2c:	693b      	ldr	r3, [r7, #16]
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d10a      	bne.n	8001c48 <prvProcessExpiredTimer+0x6c>
	__asm volatile
 8001c32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001c36:	f383 8811 	msr	BASEPRI, r3
 8001c3a:	f3bf 8f6f 	isb	sy
 8001c3e:	f3bf 8f4f 	dsb	sy
 8001c42:	60fb      	str	r3, [r7, #12]
}
 8001c44:	bf00      	nop
 8001c46:	e7fe      	b.n	8001c46 <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8001c48:	697b      	ldr	r3, [r7, #20]
 8001c4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c4c:	6978      	ldr	r0, [r7, #20]
 8001c4e:	4798      	blx	r3
}
 8001c50:	bf00      	nop
 8001c52:	3718      	adds	r7, #24
 8001c54:	46bd      	mov	sp, r7
 8001c56:	bd80      	pop	{r7, pc}
 8001c58:	20000548 	.word	0x20000548

08001c5c <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	b084      	sub	sp, #16
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8001c64:	f107 0308 	add.w	r3, r7, #8
 8001c68:	4618      	mov	r0, r3
 8001c6a:	f000 f857 	bl	8001d1c <prvGetNextExpireTime>
 8001c6e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8001c70:	68bb      	ldr	r3, [r7, #8]
 8001c72:	4619      	mov	r1, r3
 8001c74:	68f8      	ldr	r0, [r7, #12]
 8001c76:	f000 f803 	bl	8001c80 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8001c7a:	f000 f8d5 	bl	8001e28 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8001c7e:	e7f1      	b.n	8001c64 <prvTimerTask+0x8>

08001c80 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8001c80:	b580      	push	{r7, lr}
 8001c82:	b084      	sub	sp, #16
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	6078      	str	r0, [r7, #4]
 8001c88:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8001c8a:	f7ff f983 	bl	8000f94 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8001c8e:	f107 0308 	add.w	r3, r7, #8
 8001c92:	4618      	mov	r0, r3
 8001c94:	f000 f866 	bl	8001d64 <prvSampleTimeNow>
 8001c98:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8001c9a:	68bb      	ldr	r3, [r7, #8]
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d130      	bne.n	8001d02 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8001ca0:	683b      	ldr	r3, [r7, #0]
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d10a      	bne.n	8001cbc <prvProcessTimerOrBlockTask+0x3c>
 8001ca6:	687a      	ldr	r2, [r7, #4]
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	429a      	cmp	r2, r3
 8001cac:	d806      	bhi.n	8001cbc <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8001cae:	f7ff f97f 	bl	8000fb0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8001cb2:	68f9      	ldr	r1, [r7, #12]
 8001cb4:	6878      	ldr	r0, [r7, #4]
 8001cb6:	f7ff ff91 	bl	8001bdc <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8001cba:	e024      	b.n	8001d06 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8001cbc:	683b      	ldr	r3, [r7, #0]
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d008      	beq.n	8001cd4 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8001cc2:	4b13      	ldr	r3, [pc, #76]	; (8001d10 <prvProcessTimerOrBlockTask+0x90>)
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	bf0c      	ite	eq
 8001ccc:	2301      	moveq	r3, #1
 8001cce:	2300      	movne	r3, #0
 8001cd0:	b2db      	uxtb	r3, r3
 8001cd2:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8001cd4:	4b0f      	ldr	r3, [pc, #60]	; (8001d14 <prvProcessTimerOrBlockTask+0x94>)
 8001cd6:	6818      	ldr	r0, [r3, #0]
 8001cd8:	687a      	ldr	r2, [r7, #4]
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	1ad3      	subs	r3, r2, r3
 8001cde:	683a      	ldr	r2, [r7, #0]
 8001ce0:	4619      	mov	r1, r3
 8001ce2:	f7fe ff69 	bl	8000bb8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8001ce6:	f7ff f963 	bl	8000fb0 <xTaskResumeAll>
 8001cea:	4603      	mov	r3, r0
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d10a      	bne.n	8001d06 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8001cf0:	4b09      	ldr	r3, [pc, #36]	; (8001d18 <prvProcessTimerOrBlockTask+0x98>)
 8001cf2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001cf6:	601a      	str	r2, [r3, #0]
 8001cf8:	f3bf 8f4f 	dsb	sy
 8001cfc:	f3bf 8f6f 	isb	sy
}
 8001d00:	e001      	b.n	8001d06 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8001d02:	f7ff f955 	bl	8000fb0 <xTaskResumeAll>
}
 8001d06:	bf00      	nop
 8001d08:	3710      	adds	r7, #16
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	bd80      	pop	{r7, pc}
 8001d0e:	bf00      	nop
 8001d10:	2000054c 	.word	0x2000054c
 8001d14:	20000550 	.word	0x20000550
 8001d18:	e000ed04 	.word	0xe000ed04

08001d1c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8001d1c:	b480      	push	{r7}
 8001d1e:	b085      	sub	sp, #20
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8001d24:	4b0e      	ldr	r3, [pc, #56]	; (8001d60 <prvGetNextExpireTime+0x44>)
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	bf0c      	ite	eq
 8001d2e:	2301      	moveq	r3, #1
 8001d30:	2300      	movne	r3, #0
 8001d32:	b2db      	uxtb	r3, r3
 8001d34:	461a      	mov	r2, r3
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d105      	bne.n	8001d4e <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8001d42:	4b07      	ldr	r3, [pc, #28]	; (8001d60 <prvGetNextExpireTime+0x44>)
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	68db      	ldr	r3, [r3, #12]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	60fb      	str	r3, [r7, #12]
 8001d4c:	e001      	b.n	8001d52 <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8001d4e:	2300      	movs	r3, #0
 8001d50:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8001d52:	68fb      	ldr	r3, [r7, #12]
}
 8001d54:	4618      	mov	r0, r3
 8001d56:	3714      	adds	r7, #20
 8001d58:	46bd      	mov	sp, r7
 8001d5a:	bc80      	pop	{r7}
 8001d5c:	4770      	bx	lr
 8001d5e:	bf00      	nop
 8001d60:	20000548 	.word	0x20000548

08001d64 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8001d64:	b580      	push	{r7, lr}
 8001d66:	b084      	sub	sp, #16
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8001d6c:	f7ff f9be 	bl	80010ec <xTaskGetTickCount>
 8001d70:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8001d72:	4b0b      	ldr	r3, [pc, #44]	; (8001da0 <prvSampleTimeNow+0x3c>)
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	68fa      	ldr	r2, [r7, #12]
 8001d78:	429a      	cmp	r2, r3
 8001d7a:	d205      	bcs.n	8001d88 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8001d7c:	f000 f904 	bl	8001f88 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	2201      	movs	r2, #1
 8001d84:	601a      	str	r2, [r3, #0]
 8001d86:	e002      	b.n	8001d8e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8001d8e:	4a04      	ldr	r2, [pc, #16]	; (8001da0 <prvSampleTimeNow+0x3c>)
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8001d94:	68fb      	ldr	r3, [r7, #12]
}
 8001d96:	4618      	mov	r0, r3
 8001d98:	3710      	adds	r7, #16
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	bd80      	pop	{r7, pc}
 8001d9e:	bf00      	nop
 8001da0:	20000558 	.word	0x20000558

08001da4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8001da4:	b580      	push	{r7, lr}
 8001da6:	b086      	sub	sp, #24
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	60f8      	str	r0, [r7, #12]
 8001dac:	60b9      	str	r1, [r7, #8]
 8001dae:	607a      	str	r2, [r7, #4]
 8001db0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8001db2:	2300      	movs	r3, #0
 8001db4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	68ba      	ldr	r2, [r7, #8]
 8001dba:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	68fa      	ldr	r2, [r7, #12]
 8001dc0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8001dc2:	68ba      	ldr	r2, [r7, #8]
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	429a      	cmp	r2, r3
 8001dc8:	d812      	bhi.n	8001df0 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001dca:	687a      	ldr	r2, [r7, #4]
 8001dcc:	683b      	ldr	r3, [r7, #0]
 8001dce:	1ad2      	subs	r2, r2, r3
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	699b      	ldr	r3, [r3, #24]
 8001dd4:	429a      	cmp	r2, r3
 8001dd6:	d302      	bcc.n	8001dde <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8001dd8:	2301      	movs	r3, #1
 8001dda:	617b      	str	r3, [r7, #20]
 8001ddc:	e01b      	b.n	8001e16 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8001dde:	4b10      	ldr	r3, [pc, #64]	; (8001e20 <prvInsertTimerInActiveList+0x7c>)
 8001de0:	681a      	ldr	r2, [r3, #0]
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	3304      	adds	r3, #4
 8001de6:	4619      	mov	r1, r3
 8001de8:	4610      	mov	r0, r2
 8001dea:	f7fe fa0f 	bl	800020c <vListInsert>
 8001dee:	e012      	b.n	8001e16 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8001df0:	687a      	ldr	r2, [r7, #4]
 8001df2:	683b      	ldr	r3, [r7, #0]
 8001df4:	429a      	cmp	r2, r3
 8001df6:	d206      	bcs.n	8001e06 <prvInsertTimerInActiveList+0x62>
 8001df8:	68ba      	ldr	r2, [r7, #8]
 8001dfa:	683b      	ldr	r3, [r7, #0]
 8001dfc:	429a      	cmp	r2, r3
 8001dfe:	d302      	bcc.n	8001e06 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8001e00:	2301      	movs	r3, #1
 8001e02:	617b      	str	r3, [r7, #20]
 8001e04:	e007      	b.n	8001e16 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8001e06:	4b07      	ldr	r3, [pc, #28]	; (8001e24 <prvInsertTimerInActiveList+0x80>)
 8001e08:	681a      	ldr	r2, [r3, #0]
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	3304      	adds	r3, #4
 8001e0e:	4619      	mov	r1, r3
 8001e10:	4610      	mov	r0, r2
 8001e12:	f7fe f9fb 	bl	800020c <vListInsert>
		}
	}

	return xProcessTimerNow;
 8001e16:	697b      	ldr	r3, [r7, #20]
}
 8001e18:	4618      	mov	r0, r3
 8001e1a:	3718      	adds	r7, #24
 8001e1c:	46bd      	mov	sp, r7
 8001e1e:	bd80      	pop	{r7, pc}
 8001e20:	2000054c 	.word	0x2000054c
 8001e24:	20000548 	.word	0x20000548

08001e28 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	b08e      	sub	sp, #56	; 0x38
 8001e2c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8001e2e:	e098      	b.n	8001f62 <prvProcessReceivedCommands+0x13a>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	da18      	bge.n	8001e68 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8001e36:	1d3b      	adds	r3, r7, #4
 8001e38:	3304      	adds	r3, #4
 8001e3a:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8001e3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d10a      	bne.n	8001e58 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8001e42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001e46:	f383 8811 	msr	BASEPRI, r3
 8001e4a:	f3bf 8f6f 	isb	sy
 8001e4e:	f3bf 8f4f 	dsb	sy
 8001e52:	61fb      	str	r3, [r7, #28]
}
 8001e54:	bf00      	nop
 8001e56:	e7fe      	b.n	8001e56 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8001e58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001e5e:	6850      	ldr	r0, [r2, #4]
 8001e60:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001e62:	6892      	ldr	r2, [r2, #8]
 8001e64:	4611      	mov	r1, r2
 8001e66:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	db78      	blt.n	8001f60 <prvProcessReceivedCommands+0x138>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8001e72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e74:	695b      	ldr	r3, [r3, #20]
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d004      	beq.n	8001e84 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8001e7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e7c:	3304      	adds	r3, #4
 8001e7e:	4618      	mov	r0, r3
 8001e80:	f7fe f9fc 	bl	800027c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8001e84:	463b      	mov	r3, r7
 8001e86:	4618      	mov	r0, r3
 8001e88:	f7ff ff6c 	bl	8001d64 <prvSampleTimeNow>
 8001e8c:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	2b09      	cmp	r3, #9
 8001e92:	d866      	bhi.n	8001f62 <prvProcessReceivedCommands+0x13a>
 8001e94:	a201      	add	r2, pc, #4	; (adr r2, 8001e9c <prvProcessReceivedCommands+0x74>)
 8001e96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e9a:	bf00      	nop
 8001e9c:	08001ec5 	.word	0x08001ec5
 8001ea0:	08001ec5 	.word	0x08001ec5
 8001ea4:	08001ec5 	.word	0x08001ec5
 8001ea8:	08001f63 	.word	0x08001f63
 8001eac:	08001f21 	.word	0x08001f21
 8001eb0:	08001f59 	.word	0x08001f59
 8001eb4:	08001ec5 	.word	0x08001ec5
 8001eb8:	08001ec5 	.word	0x08001ec5
 8001ebc:	08001f63 	.word	0x08001f63
 8001ec0:	08001f21 	.word	0x08001f21
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8001ec4:	68ba      	ldr	r2, [r7, #8]
 8001ec6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ec8:	699b      	ldr	r3, [r3, #24]
 8001eca:	18d1      	adds	r1, r2, r3
 8001ecc:	68bb      	ldr	r3, [r7, #8]
 8001ece:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ed0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001ed2:	f7ff ff67 	bl	8001da4 <prvInsertTimerInActiveList>
 8001ed6:	4603      	mov	r3, r0
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d042      	beq.n	8001f62 <prvProcessReceivedCommands+0x13a>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8001edc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ede:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ee0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001ee2:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8001ee4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ee6:	69db      	ldr	r3, [r3, #28]
 8001ee8:	2b01      	cmp	r3, #1
 8001eea:	d13a      	bne.n	8001f62 <prvProcessReceivedCommands+0x13a>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8001eec:	68ba      	ldr	r2, [r7, #8]
 8001eee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ef0:	699b      	ldr	r3, [r3, #24]
 8001ef2:	441a      	add	r2, r3
 8001ef4:	2300      	movs	r3, #0
 8001ef6:	9300      	str	r3, [sp, #0]
 8001ef8:	2300      	movs	r3, #0
 8001efa:	2100      	movs	r1, #0
 8001efc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001efe:	f7ff fe1f 	bl	8001b40 <xTimerGenericCommand>
 8001f02:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8001f04:	6a3b      	ldr	r3, [r7, #32]
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d12b      	bne.n	8001f62 <prvProcessReceivedCommands+0x13a>
	__asm volatile
 8001f0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001f0e:	f383 8811 	msr	BASEPRI, r3
 8001f12:	f3bf 8f6f 	isb	sy
 8001f16:	f3bf 8f4f 	dsb	sy
 8001f1a:	61bb      	str	r3, [r7, #24]
}
 8001f1c:	bf00      	nop
 8001f1e:	e7fe      	b.n	8001f1e <prvProcessReceivedCommands+0xf6>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8001f20:	68ba      	ldr	r2, [r7, #8]
 8001f22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f24:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8001f26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f28:	699b      	ldr	r3, [r3, #24]
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d10a      	bne.n	8001f44 <prvProcessReceivedCommands+0x11c>
	__asm volatile
 8001f2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001f32:	f383 8811 	msr	BASEPRI, r3
 8001f36:	f3bf 8f6f 	isb	sy
 8001f3a:	f3bf 8f4f 	dsb	sy
 8001f3e:	617b      	str	r3, [r7, #20]
}
 8001f40:	bf00      	nop
 8001f42:	e7fe      	b.n	8001f42 <prvProcessReceivedCommands+0x11a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8001f44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f46:	699a      	ldr	r2, [r3, #24]
 8001f48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f4a:	18d1      	adds	r1, r2, r3
 8001f4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f4e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f50:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001f52:	f7ff ff27 	bl	8001da4 <prvInsertTimerInActiveList>
					break;
 8001f56:	e004      	b.n	8001f62 <prvProcessReceivedCommands+0x13a>
					allocated. */
					#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) )
					{
						/* The timer can only have been allocated dynamically -
						free it again. */
						vPortFree( pxTimer );
 8001f58:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001f5a:	f000 fb5b 	bl	8002614 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8001f5e:	e000      	b.n	8001f62 <prvProcessReceivedCommands+0x13a>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8001f60:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8001f62:	4b08      	ldr	r3, [pc, #32]	; (8001f84 <prvProcessReceivedCommands+0x15c>)
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	1d39      	adds	r1, r7, #4
 8001f68:	2200      	movs	r2, #0
 8001f6a:	4618      	mov	r0, r3
 8001f6c:	f7fe fc0c 	bl	8000788 <xQueueReceive>
 8001f70:	4603      	mov	r3, r0
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	f47f af5c 	bne.w	8001e30 <prvProcessReceivedCommands+0x8>
	}
}
 8001f78:	bf00      	nop
 8001f7a:	bf00      	nop
 8001f7c:	3730      	adds	r7, #48	; 0x30
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	bd80      	pop	{r7, pc}
 8001f82:	bf00      	nop
 8001f84:	20000550 	.word	0x20000550

08001f88 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	b088      	sub	sp, #32
 8001f8c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8001f8e:	e045      	b.n	800201c <prvSwitchTimerLists+0x94>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8001f90:	4b2c      	ldr	r3, [pc, #176]	; (8002044 <prvSwitchTimerLists+0xbc>)
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	68db      	ldr	r3, [r3, #12]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8001f9a:	4b2a      	ldr	r3, [pc, #168]	; (8002044 <prvSwitchTimerLists+0xbc>)
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	68db      	ldr	r3, [r3, #12]
 8001fa0:	68db      	ldr	r3, [r3, #12]
 8001fa2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	3304      	adds	r3, #4
 8001fa8:	4618      	mov	r0, r3
 8001faa:	f7fe f967 	bl	800027c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fb2:	68f8      	ldr	r0, [r7, #12]
 8001fb4:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	69db      	ldr	r3, [r3, #28]
 8001fba:	2b01      	cmp	r3, #1
 8001fbc:	d12e      	bne.n	800201c <prvSwitchTimerLists+0x94>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	699b      	ldr	r3, [r3, #24]
 8001fc2:	693a      	ldr	r2, [r7, #16]
 8001fc4:	4413      	add	r3, r2
 8001fc6:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8001fc8:	68ba      	ldr	r2, [r7, #8]
 8001fca:	693b      	ldr	r3, [r7, #16]
 8001fcc:	429a      	cmp	r2, r3
 8001fce:	d90e      	bls.n	8001fee <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	68ba      	ldr	r2, [r7, #8]
 8001fd4:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	68fa      	ldr	r2, [r7, #12]
 8001fda:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8001fdc:	4b19      	ldr	r3, [pc, #100]	; (8002044 <prvSwitchTimerLists+0xbc>)
 8001fde:	681a      	ldr	r2, [r3, #0]
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	3304      	adds	r3, #4
 8001fe4:	4619      	mov	r1, r3
 8001fe6:	4610      	mov	r0, r2
 8001fe8:	f7fe f910 	bl	800020c <vListInsert>
 8001fec:	e016      	b.n	800201c <prvSwitchTimerLists+0x94>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8001fee:	2300      	movs	r3, #0
 8001ff0:	9300      	str	r3, [sp, #0]
 8001ff2:	2300      	movs	r3, #0
 8001ff4:	693a      	ldr	r2, [r7, #16]
 8001ff6:	2100      	movs	r1, #0
 8001ff8:	68f8      	ldr	r0, [r7, #12]
 8001ffa:	f7ff fda1 	bl	8001b40 <xTimerGenericCommand>
 8001ffe:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	2b00      	cmp	r3, #0
 8002004:	d10a      	bne.n	800201c <prvSwitchTimerLists+0x94>
	__asm volatile
 8002006:	f04f 0350 	mov.w	r3, #80	; 0x50
 800200a:	f383 8811 	msr	BASEPRI, r3
 800200e:	f3bf 8f6f 	isb	sy
 8002012:	f3bf 8f4f 	dsb	sy
 8002016:	603b      	str	r3, [r7, #0]
}
 8002018:	bf00      	nop
 800201a:	e7fe      	b.n	800201a <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800201c:	4b09      	ldr	r3, [pc, #36]	; (8002044 <prvSwitchTimerLists+0xbc>)
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	2b00      	cmp	r3, #0
 8002024:	d1b4      	bne.n	8001f90 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8002026:	4b07      	ldr	r3, [pc, #28]	; (8002044 <prvSwitchTimerLists+0xbc>)
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800202c:	4b06      	ldr	r3, [pc, #24]	; (8002048 <prvSwitchTimerLists+0xc0>)
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	4a04      	ldr	r2, [pc, #16]	; (8002044 <prvSwitchTimerLists+0xbc>)
 8002032:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8002034:	4a04      	ldr	r2, [pc, #16]	; (8002048 <prvSwitchTimerLists+0xc0>)
 8002036:	697b      	ldr	r3, [r7, #20]
 8002038:	6013      	str	r3, [r2, #0]
}
 800203a:	bf00      	nop
 800203c:	3718      	adds	r7, #24
 800203e:	46bd      	mov	sp, r7
 8002040:	bd80      	pop	{r7, pc}
 8002042:	bf00      	nop
 8002044:	20000548 	.word	0x20000548
 8002048:	2000054c 	.word	0x2000054c

0800204c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800204c:	b580      	push	{r7, lr}
 800204e:	af00      	add	r7, sp, #0
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8002050:	f000 f924 	bl	800229c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8002054:	4b12      	ldr	r3, [pc, #72]	; (80020a0 <prvCheckForValidListAndQueue+0x54>)
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	2b00      	cmp	r3, #0
 800205a:	d11d      	bne.n	8002098 <prvCheckForValidListAndQueue+0x4c>
		{
			vListInitialise( &xActiveTimerList1 );
 800205c:	4811      	ldr	r0, [pc, #68]	; (80020a4 <prvCheckForValidListAndQueue+0x58>)
 800205e:	f7fe f887 	bl	8000170 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8002062:	4811      	ldr	r0, [pc, #68]	; (80020a8 <prvCheckForValidListAndQueue+0x5c>)
 8002064:	f7fe f884 	bl	8000170 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8002068:	4b10      	ldr	r3, [pc, #64]	; (80020ac <prvCheckForValidListAndQueue+0x60>)
 800206a:	4a0e      	ldr	r2, [pc, #56]	; (80020a4 <prvCheckForValidListAndQueue+0x58>)
 800206c:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800206e:	4b10      	ldr	r3, [pc, #64]	; (80020b0 <prvCheckForValidListAndQueue+0x64>)
 8002070:	4a0d      	ldr	r2, [pc, #52]	; (80020a8 <prvCheckForValidListAndQueue+0x5c>)
 8002072:	601a      	str	r2, [r3, #0]

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
			}
			#else
			{
				xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8002074:	2200      	movs	r2, #0
 8002076:	2110      	movs	r1, #16
 8002078:	200a      	movs	r0, #10
 800207a:	f7fe f991 	bl	80003a0 <xQueueGenericCreate>
 800207e:	4603      	mov	r3, r0
 8002080:	4a07      	ldr	r2, [pc, #28]	; (80020a0 <prvCheckForValidListAndQueue+0x54>)
 8002082:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8002084:	4b06      	ldr	r3, [pc, #24]	; (80020a0 <prvCheckForValidListAndQueue+0x54>)
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	2b00      	cmp	r3, #0
 800208a:	d005      	beq.n	8002098 <prvCheckForValidListAndQueue+0x4c>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800208c:	4b04      	ldr	r3, [pc, #16]	; (80020a0 <prvCheckForValidListAndQueue+0x54>)
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	4908      	ldr	r1, [pc, #32]	; (80020b4 <prvCheckForValidListAndQueue+0x68>)
 8002092:	4618      	mov	r0, r3
 8002094:	f7fe fd68 	bl	8000b68 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8002098:	f000 f930 	bl	80022fc <vPortExitCritical>
}
 800209c:	bf00      	nop
 800209e:	bd80      	pop	{r7, pc}
 80020a0:	20000550 	.word	0x20000550
 80020a4:	20000520 	.word	0x20000520
 80020a8:	20000534 	.word	0x20000534
 80020ac:	20000548 	.word	0x20000548
 80020b0:	2000054c 	.word	0x2000054c
 80020b4:	08003850 	.word	0x08003850

080020b8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80020b8:	b480      	push	{r7}
 80020ba:	b085      	sub	sp, #20
 80020bc:	af00      	add	r7, sp, #0
 80020be:	60f8      	str	r0, [r7, #12]
 80020c0:	60b9      	str	r1, [r7, #8]
 80020c2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	3b04      	subs	r3, #4
 80020c8:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80020d0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	3b04      	subs	r3, #4
 80020d6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80020d8:	68bb      	ldr	r3, [r7, #8]
 80020da:	f023 0201 	bic.w	r2, r3, #1
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	3b04      	subs	r3, #4
 80020e6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80020e8:	4a08      	ldr	r2, [pc, #32]	; (800210c <pxPortInitialiseStack+0x54>)
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	3b14      	subs	r3, #20
 80020f2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80020f4:	687a      	ldr	r2, [r7, #4]
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	3b20      	subs	r3, #32
 80020fe:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8002100:	68fb      	ldr	r3, [r7, #12]
}
 8002102:	4618      	mov	r0, r3
 8002104:	3714      	adds	r7, #20
 8002106:	46bd      	mov	sp, r7
 8002108:	bc80      	pop	{r7}
 800210a:	4770      	bx	lr
 800210c:	08002111 	.word	0x08002111

08002110 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8002110:	b480      	push	{r7}
 8002112:	b085      	sub	sp, #20
 8002114:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8002116:	2300      	movs	r3, #0
 8002118:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800211a:	4b12      	ldr	r3, [pc, #72]	; (8002164 <prvTaskExitError+0x54>)
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002122:	d00a      	beq.n	800213a <prvTaskExitError+0x2a>
	__asm volatile
 8002124:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002128:	f383 8811 	msr	BASEPRI, r3
 800212c:	f3bf 8f6f 	isb	sy
 8002130:	f3bf 8f4f 	dsb	sy
 8002134:	60fb      	str	r3, [r7, #12]
}
 8002136:	bf00      	nop
 8002138:	e7fe      	b.n	8002138 <prvTaskExitError+0x28>
	__asm volatile
 800213a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800213e:	f383 8811 	msr	BASEPRI, r3
 8002142:	f3bf 8f6f 	isb	sy
 8002146:	f3bf 8f4f 	dsb	sy
 800214a:	60bb      	str	r3, [r7, #8]
}
 800214c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800214e:	bf00      	nop
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	2b00      	cmp	r3, #0
 8002154:	d0fc      	beq.n	8002150 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8002156:	bf00      	nop
 8002158:	bf00      	nop
 800215a:	3714      	adds	r7, #20
 800215c:	46bd      	mov	sp, r7
 800215e:	bc80      	pop	{r7}
 8002160:	4770      	bx	lr
 8002162:	bf00      	nop
 8002164:	20000000 	.word	0x20000000
	...

08002170 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8002170:	4b07      	ldr	r3, [pc, #28]	; (8002190 <pxCurrentTCBConst2>)
 8002172:	6819      	ldr	r1, [r3, #0]
 8002174:	6808      	ldr	r0, [r1, #0]
 8002176:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800217a:	f380 8809 	msr	PSP, r0
 800217e:	f3bf 8f6f 	isb	sy
 8002182:	f04f 0000 	mov.w	r0, #0
 8002186:	f380 8811 	msr	BASEPRI, r0
 800218a:	f04e 0e0d 	orr.w	lr, lr, #13
 800218e:	4770      	bx	lr

08002190 <pxCurrentTCBConst2>:
 8002190:	20000020 	.word	0x20000020
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8002194:	bf00      	nop
 8002196:	bf00      	nop

08002198 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8002198:	4806      	ldr	r0, [pc, #24]	; (80021b4 <prvPortStartFirstTask+0x1c>)
 800219a:	6800      	ldr	r0, [r0, #0]
 800219c:	6800      	ldr	r0, [r0, #0]
 800219e:	f380 8808 	msr	MSP, r0
 80021a2:	b662      	cpsie	i
 80021a4:	b661      	cpsie	f
 80021a6:	f3bf 8f4f 	dsb	sy
 80021aa:	f3bf 8f6f 	isb	sy
 80021ae:	df00      	svc	0
 80021b0:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80021b2:	bf00      	nop
 80021b4:	e000ed08 	.word	0xe000ed08

080021b8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80021b8:	b580      	push	{r7, lr}
 80021ba:	b084      	sub	sp, #16
 80021bc:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80021be:	4b32      	ldr	r3, [pc, #200]	; (8002288 <xPortStartScheduler+0xd0>)
 80021c0:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	781b      	ldrb	r3, [r3, #0]
 80021c6:	b2db      	uxtb	r3, r3
 80021c8:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	22ff      	movs	r2, #255	; 0xff
 80021ce:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	781b      	ldrb	r3, [r3, #0]
 80021d4:	b2db      	uxtb	r3, r3
 80021d6:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80021d8:	78fb      	ldrb	r3, [r7, #3]
 80021da:	b2db      	uxtb	r3, r3
 80021dc:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80021e0:	b2da      	uxtb	r2, r3
 80021e2:	4b2a      	ldr	r3, [pc, #168]	; (800228c <xPortStartScheduler+0xd4>)
 80021e4:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80021e6:	4b2a      	ldr	r3, [pc, #168]	; (8002290 <xPortStartScheduler+0xd8>)
 80021e8:	2207      	movs	r2, #7
 80021ea:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80021ec:	e009      	b.n	8002202 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 80021ee:	4b28      	ldr	r3, [pc, #160]	; (8002290 <xPortStartScheduler+0xd8>)
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	3b01      	subs	r3, #1
 80021f4:	4a26      	ldr	r2, [pc, #152]	; (8002290 <xPortStartScheduler+0xd8>)
 80021f6:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80021f8:	78fb      	ldrb	r3, [r7, #3]
 80021fa:	b2db      	uxtb	r3, r3
 80021fc:	005b      	lsls	r3, r3, #1
 80021fe:	b2db      	uxtb	r3, r3
 8002200:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002202:	78fb      	ldrb	r3, [r7, #3]
 8002204:	b2db      	uxtb	r3, r3
 8002206:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800220a:	2b80      	cmp	r3, #128	; 0x80
 800220c:	d0ef      	beq.n	80021ee <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800220e:	4b20      	ldr	r3, [pc, #128]	; (8002290 <xPortStartScheduler+0xd8>)
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	f1c3 0307 	rsb	r3, r3, #7
 8002216:	2b04      	cmp	r3, #4
 8002218:	d00a      	beq.n	8002230 <xPortStartScheduler+0x78>
	__asm volatile
 800221a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800221e:	f383 8811 	msr	BASEPRI, r3
 8002222:	f3bf 8f6f 	isb	sy
 8002226:	f3bf 8f4f 	dsb	sy
 800222a:	60bb      	str	r3, [r7, #8]
}
 800222c:	bf00      	nop
 800222e:	e7fe      	b.n	800222e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8002230:	4b17      	ldr	r3, [pc, #92]	; (8002290 <xPortStartScheduler+0xd8>)
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	021b      	lsls	r3, r3, #8
 8002236:	4a16      	ldr	r2, [pc, #88]	; (8002290 <xPortStartScheduler+0xd8>)
 8002238:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800223a:	4b15      	ldr	r3, [pc, #84]	; (8002290 <xPortStartScheduler+0xd8>)
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002242:	4a13      	ldr	r2, [pc, #76]	; (8002290 <xPortStartScheduler+0xd8>)
 8002244:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	b2da      	uxtb	r2, r3
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800224e:	4b11      	ldr	r3, [pc, #68]	; (8002294 <xPortStartScheduler+0xdc>)
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	4a10      	ldr	r2, [pc, #64]	; (8002294 <xPortStartScheduler+0xdc>)
 8002254:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002258:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800225a:	4b0e      	ldr	r3, [pc, #56]	; (8002294 <xPortStartScheduler+0xdc>)
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	4a0d      	ldr	r2, [pc, #52]	; (8002294 <xPortStartScheduler+0xdc>)
 8002260:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8002264:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8002266:	f000 f8b9 	bl	80023dc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800226a:	4b0b      	ldr	r3, [pc, #44]	; (8002298 <xPortStartScheduler+0xe0>)
 800226c:	2200      	movs	r2, #0
 800226e:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8002270:	f7ff ff92 	bl	8002198 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8002274:	f7ff f806 	bl	8001284 <vTaskSwitchContext>
	prvTaskExitError();
 8002278:	f7ff ff4a 	bl	8002110 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800227c:	2300      	movs	r3, #0
}
 800227e:	4618      	mov	r0, r3
 8002280:	3710      	adds	r7, #16
 8002282:	46bd      	mov	sp, r7
 8002284:	bd80      	pop	{r7, pc}
 8002286:	bf00      	nop
 8002288:	e000e400 	.word	0xe000e400
 800228c:	2000055c 	.word	0x2000055c
 8002290:	20000560 	.word	0x20000560
 8002294:	e000ed20 	.word	0xe000ed20
 8002298:	20000000 	.word	0x20000000

0800229c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800229c:	b480      	push	{r7}
 800229e:	b083      	sub	sp, #12
 80022a0:	af00      	add	r7, sp, #0
	__asm volatile
 80022a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80022a6:	f383 8811 	msr	BASEPRI, r3
 80022aa:	f3bf 8f6f 	isb	sy
 80022ae:	f3bf 8f4f 	dsb	sy
 80022b2:	607b      	str	r3, [r7, #4]
}
 80022b4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80022b6:	4b0f      	ldr	r3, [pc, #60]	; (80022f4 <vPortEnterCritical+0x58>)
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	3301      	adds	r3, #1
 80022bc:	4a0d      	ldr	r2, [pc, #52]	; (80022f4 <vPortEnterCritical+0x58>)
 80022be:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80022c0:	4b0c      	ldr	r3, [pc, #48]	; (80022f4 <vPortEnterCritical+0x58>)
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	2b01      	cmp	r3, #1
 80022c6:	d10f      	bne.n	80022e8 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80022c8:	4b0b      	ldr	r3, [pc, #44]	; (80022f8 <vPortEnterCritical+0x5c>)
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	b2db      	uxtb	r3, r3
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d00a      	beq.n	80022e8 <vPortEnterCritical+0x4c>
	__asm volatile
 80022d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80022d6:	f383 8811 	msr	BASEPRI, r3
 80022da:	f3bf 8f6f 	isb	sy
 80022de:	f3bf 8f4f 	dsb	sy
 80022e2:	603b      	str	r3, [r7, #0]
}
 80022e4:	bf00      	nop
 80022e6:	e7fe      	b.n	80022e6 <vPortEnterCritical+0x4a>
	}
}
 80022e8:	bf00      	nop
 80022ea:	370c      	adds	r7, #12
 80022ec:	46bd      	mov	sp, r7
 80022ee:	bc80      	pop	{r7}
 80022f0:	4770      	bx	lr
 80022f2:	bf00      	nop
 80022f4:	20000000 	.word	0x20000000
 80022f8:	e000ed04 	.word	0xe000ed04

080022fc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80022fc:	b480      	push	{r7}
 80022fe:	b083      	sub	sp, #12
 8002300:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8002302:	4b11      	ldr	r3, [pc, #68]	; (8002348 <vPortExitCritical+0x4c>)
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	2b00      	cmp	r3, #0
 8002308:	d10a      	bne.n	8002320 <vPortExitCritical+0x24>
	__asm volatile
 800230a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800230e:	f383 8811 	msr	BASEPRI, r3
 8002312:	f3bf 8f6f 	isb	sy
 8002316:	f3bf 8f4f 	dsb	sy
 800231a:	607b      	str	r3, [r7, #4]
}
 800231c:	bf00      	nop
 800231e:	e7fe      	b.n	800231e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8002320:	4b09      	ldr	r3, [pc, #36]	; (8002348 <vPortExitCritical+0x4c>)
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	3b01      	subs	r3, #1
 8002326:	4a08      	ldr	r2, [pc, #32]	; (8002348 <vPortExitCritical+0x4c>)
 8002328:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800232a:	4b07      	ldr	r3, [pc, #28]	; (8002348 <vPortExitCritical+0x4c>)
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	2b00      	cmp	r3, #0
 8002330:	d105      	bne.n	800233e <vPortExitCritical+0x42>
 8002332:	2300      	movs	r3, #0
 8002334:	603b      	str	r3, [r7, #0]
	__asm volatile
 8002336:	683b      	ldr	r3, [r7, #0]
 8002338:	f383 8811 	msr	BASEPRI, r3
}
 800233c:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800233e:	bf00      	nop
 8002340:	370c      	adds	r7, #12
 8002342:	46bd      	mov	sp, r7
 8002344:	bc80      	pop	{r7}
 8002346:	4770      	bx	lr
 8002348:	20000000 	.word	0x20000000
 800234c:	00000000 	.word	0x00000000

08002350 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8002350:	f3ef 8009 	mrs	r0, PSP
 8002354:	f3bf 8f6f 	isb	sy
 8002358:	4b0d      	ldr	r3, [pc, #52]	; (8002390 <pxCurrentTCBConst>)
 800235a:	681a      	ldr	r2, [r3, #0]
 800235c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8002360:	6010      	str	r0, [r2, #0]
 8002362:	e92d 4008 	stmdb	sp!, {r3, lr}
 8002366:	f04f 0050 	mov.w	r0, #80	; 0x50
 800236a:	f380 8811 	msr	BASEPRI, r0
 800236e:	f7fe ff89 	bl	8001284 <vTaskSwitchContext>
 8002372:	f04f 0000 	mov.w	r0, #0
 8002376:	f380 8811 	msr	BASEPRI, r0
 800237a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800237e:	6819      	ldr	r1, [r3, #0]
 8002380:	6808      	ldr	r0, [r1, #0]
 8002382:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8002386:	f380 8809 	msr	PSP, r0
 800238a:	f3bf 8f6f 	isb	sy
 800238e:	4770      	bx	lr

08002390 <pxCurrentTCBConst>:
 8002390:	20000020 	.word	0x20000020
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8002394:	bf00      	nop
 8002396:	bf00      	nop

08002398 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8002398:	b580      	push	{r7, lr}
 800239a:	b082      	sub	sp, #8
 800239c:	af00      	add	r7, sp, #0
	__asm volatile
 800239e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80023a2:	f383 8811 	msr	BASEPRI, r3
 80023a6:	f3bf 8f6f 	isb	sy
 80023aa:	f3bf 8f4f 	dsb	sy
 80023ae:	607b      	str	r3, [r7, #4]
}
 80023b0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80023b2:	f7fe fea9 	bl	8001108 <xTaskIncrementTick>
 80023b6:	4603      	mov	r3, r0
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d003      	beq.n	80023c4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80023bc:	4b06      	ldr	r3, [pc, #24]	; (80023d8 <SysTick_Handler+0x40>)
 80023be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80023c2:	601a      	str	r2, [r3, #0]
 80023c4:	2300      	movs	r3, #0
 80023c6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80023c8:	683b      	ldr	r3, [r7, #0]
 80023ca:	f383 8811 	msr	BASEPRI, r3
}
 80023ce:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80023d0:	bf00      	nop
 80023d2:	3708      	adds	r7, #8
 80023d4:	46bd      	mov	sp, r7
 80023d6:	bd80      	pop	{r7, pc}
 80023d8:	e000ed04 	.word	0xe000ed04

080023dc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80023dc:	b480      	push	{r7}
 80023de:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80023e0:	4b08      	ldr	r3, [pc, #32]	; (8002404 <vPortSetupTimerInterrupt+0x28>)
 80023e2:	2200      	movs	r2, #0
 80023e4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80023e6:	4b08      	ldr	r3, [pc, #32]	; (8002408 <vPortSetupTimerInterrupt+0x2c>)
 80023e8:	2200      	movs	r2, #0
 80023ea:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80023ec:	4b07      	ldr	r3, [pc, #28]	; (800240c <vPortSetupTimerInterrupt+0x30>)
 80023ee:	f641 723f 	movw	r2, #7999	; 0x1f3f
 80023f2:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80023f4:	4b03      	ldr	r3, [pc, #12]	; (8002404 <vPortSetupTimerInterrupt+0x28>)
 80023f6:	2207      	movs	r2, #7
 80023f8:	601a      	str	r2, [r3, #0]
}
 80023fa:	bf00      	nop
 80023fc:	46bd      	mov	sp, r7
 80023fe:	bc80      	pop	{r7}
 8002400:	4770      	bx	lr
 8002402:	bf00      	nop
 8002404:	e000e010 	.word	0xe000e010
 8002408:	e000e018 	.word	0xe000e018
 800240c:	e000e014 	.word	0xe000e014

08002410 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8002410:	b480      	push	{r7}
 8002412:	b085      	sub	sp, #20
 8002414:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8002416:	f3ef 8305 	mrs	r3, IPSR
 800241a:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	2b0f      	cmp	r3, #15
 8002420:	d914      	bls.n	800244c <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8002422:	4a16      	ldr	r2, [pc, #88]	; (800247c <vPortValidateInterruptPriority+0x6c>)
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	4413      	add	r3, r2
 8002428:	781b      	ldrb	r3, [r3, #0]
 800242a:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800242c:	4b14      	ldr	r3, [pc, #80]	; (8002480 <vPortValidateInterruptPriority+0x70>)
 800242e:	781b      	ldrb	r3, [r3, #0]
 8002430:	7afa      	ldrb	r2, [r7, #11]
 8002432:	429a      	cmp	r2, r3
 8002434:	d20a      	bcs.n	800244c <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8002436:	f04f 0350 	mov.w	r3, #80	; 0x50
 800243a:	f383 8811 	msr	BASEPRI, r3
 800243e:	f3bf 8f6f 	isb	sy
 8002442:	f3bf 8f4f 	dsb	sy
 8002446:	607b      	str	r3, [r7, #4]
}
 8002448:	bf00      	nop
 800244a:	e7fe      	b.n	800244a <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800244c:	4b0d      	ldr	r3, [pc, #52]	; (8002484 <vPortValidateInterruptPriority+0x74>)
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002454:	4b0c      	ldr	r3, [pc, #48]	; (8002488 <vPortValidateInterruptPriority+0x78>)
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	429a      	cmp	r2, r3
 800245a:	d90a      	bls.n	8002472 <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800245c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002460:	f383 8811 	msr	BASEPRI, r3
 8002464:	f3bf 8f6f 	isb	sy
 8002468:	f3bf 8f4f 	dsb	sy
 800246c:	603b      	str	r3, [r7, #0]
}
 800246e:	bf00      	nop
 8002470:	e7fe      	b.n	8002470 <vPortValidateInterruptPriority+0x60>
	}
 8002472:	bf00      	nop
 8002474:	3714      	adds	r7, #20
 8002476:	46bd      	mov	sp, r7
 8002478:	bc80      	pop	{r7}
 800247a:	4770      	bx	lr
 800247c:	e000e3f0 	.word	0xe000e3f0
 8002480:	2000055c 	.word	0x2000055c
 8002484:	e000ed0c 	.word	0xe000ed0c
 8002488:	20000560 	.word	0x20000560

0800248c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800248c:	b580      	push	{r7, lr}
 800248e:	b08a      	sub	sp, #40	; 0x28
 8002490:	af00      	add	r7, sp, #0
 8002492:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8002494:	2300      	movs	r3, #0
 8002496:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8002498:	f7fe fd7c 	bl	8000f94 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800249c:	4b58      	ldr	r3, [pc, #352]	; (8002600 <pvPortMalloc+0x174>)
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d101      	bne.n	80024a8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80024a4:	f000 f910 	bl	80026c8 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80024a8:	4b56      	ldr	r3, [pc, #344]	; (8002604 <pvPortMalloc+0x178>)
 80024aa:	681a      	ldr	r2, [r3, #0]
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	4013      	ands	r3, r2
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	f040 808e 	bne.w	80025d2 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d01d      	beq.n	80024f8 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80024bc:	2208      	movs	r2, #8
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	4413      	add	r3, r2
 80024c2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	f003 0307 	and.w	r3, r3, #7
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d014      	beq.n	80024f8 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	f023 0307 	bic.w	r3, r3, #7
 80024d4:	3308      	adds	r3, #8
 80024d6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	f003 0307 	and.w	r3, r3, #7
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d00a      	beq.n	80024f8 <pvPortMalloc+0x6c>
	__asm volatile
 80024e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80024e6:	f383 8811 	msr	BASEPRI, r3
 80024ea:	f3bf 8f6f 	isb	sy
 80024ee:	f3bf 8f4f 	dsb	sy
 80024f2:	617b      	str	r3, [r7, #20]
}
 80024f4:	bf00      	nop
 80024f6:	e7fe      	b.n	80024f6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d069      	beq.n	80025d2 <pvPortMalloc+0x146>
 80024fe:	4b42      	ldr	r3, [pc, #264]	; (8002608 <pvPortMalloc+0x17c>)
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	687a      	ldr	r2, [r7, #4]
 8002504:	429a      	cmp	r2, r3
 8002506:	d864      	bhi.n	80025d2 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8002508:	4b40      	ldr	r3, [pc, #256]	; (800260c <pvPortMalloc+0x180>)
 800250a:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800250c:	4b3f      	ldr	r3, [pc, #252]	; (800260c <pvPortMalloc+0x180>)
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8002512:	e004      	b.n	800251e <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8002514:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002516:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8002518:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800251e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002520:	685b      	ldr	r3, [r3, #4]
 8002522:	687a      	ldr	r2, [r7, #4]
 8002524:	429a      	cmp	r2, r3
 8002526:	d903      	bls.n	8002530 <pvPortMalloc+0xa4>
 8002528:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	2b00      	cmp	r3, #0
 800252e:	d1f1      	bne.n	8002514 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8002530:	4b33      	ldr	r3, [pc, #204]	; (8002600 <pvPortMalloc+0x174>)
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002536:	429a      	cmp	r2, r3
 8002538:	d04b      	beq.n	80025d2 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800253a:	6a3b      	ldr	r3, [r7, #32]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	2208      	movs	r2, #8
 8002540:	4413      	add	r3, r2
 8002542:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8002544:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002546:	681a      	ldr	r2, [r3, #0]
 8002548:	6a3b      	ldr	r3, [r7, #32]
 800254a:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800254c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800254e:	685a      	ldr	r2, [r3, #4]
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	1ad2      	subs	r2, r2, r3
 8002554:	2308      	movs	r3, #8
 8002556:	005b      	lsls	r3, r3, #1
 8002558:	429a      	cmp	r2, r3
 800255a:	d91f      	bls.n	800259c <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800255c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	4413      	add	r3, r2
 8002562:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8002564:	69bb      	ldr	r3, [r7, #24]
 8002566:	f003 0307 	and.w	r3, r3, #7
 800256a:	2b00      	cmp	r3, #0
 800256c:	d00a      	beq.n	8002584 <pvPortMalloc+0xf8>
	__asm volatile
 800256e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002572:	f383 8811 	msr	BASEPRI, r3
 8002576:	f3bf 8f6f 	isb	sy
 800257a:	f3bf 8f4f 	dsb	sy
 800257e:	613b      	str	r3, [r7, #16]
}
 8002580:	bf00      	nop
 8002582:	e7fe      	b.n	8002582 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8002584:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002586:	685a      	ldr	r2, [r3, #4]
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	1ad2      	subs	r2, r2, r3
 800258c:	69bb      	ldr	r3, [r7, #24]
 800258e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8002590:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002592:	687a      	ldr	r2, [r7, #4]
 8002594:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8002596:	69b8      	ldr	r0, [r7, #24]
 8002598:	f000 f8f8 	bl	800278c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800259c:	4b1a      	ldr	r3, [pc, #104]	; (8002608 <pvPortMalloc+0x17c>)
 800259e:	681a      	ldr	r2, [r3, #0]
 80025a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025a2:	685b      	ldr	r3, [r3, #4]
 80025a4:	1ad3      	subs	r3, r2, r3
 80025a6:	4a18      	ldr	r2, [pc, #96]	; (8002608 <pvPortMalloc+0x17c>)
 80025a8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80025aa:	4b17      	ldr	r3, [pc, #92]	; (8002608 <pvPortMalloc+0x17c>)
 80025ac:	681a      	ldr	r2, [r3, #0]
 80025ae:	4b18      	ldr	r3, [pc, #96]	; (8002610 <pvPortMalloc+0x184>)
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	429a      	cmp	r2, r3
 80025b4:	d203      	bcs.n	80025be <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80025b6:	4b14      	ldr	r3, [pc, #80]	; (8002608 <pvPortMalloc+0x17c>)
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	4a15      	ldr	r2, [pc, #84]	; (8002610 <pvPortMalloc+0x184>)
 80025bc:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80025be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025c0:	685a      	ldr	r2, [r3, #4]
 80025c2:	4b10      	ldr	r3, [pc, #64]	; (8002604 <pvPortMalloc+0x178>)
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	431a      	orrs	r2, r3
 80025c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025ca:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80025cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025ce:	2200      	movs	r2, #0
 80025d0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80025d2:	f7fe fced 	bl	8000fb0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80025d6:	69fb      	ldr	r3, [r7, #28]
 80025d8:	f003 0307 	and.w	r3, r3, #7
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d00a      	beq.n	80025f6 <pvPortMalloc+0x16a>
	__asm volatile
 80025e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80025e4:	f383 8811 	msr	BASEPRI, r3
 80025e8:	f3bf 8f6f 	isb	sy
 80025ec:	f3bf 8f4f 	dsb	sy
 80025f0:	60fb      	str	r3, [r7, #12]
}
 80025f2:	bf00      	nop
 80025f4:	e7fe      	b.n	80025f4 <pvPortMalloc+0x168>
	return pvReturn;
 80025f6:	69fb      	ldr	r3, [r7, #28]
}
 80025f8:	4618      	mov	r0, r3
 80025fa:	3728      	adds	r7, #40	; 0x28
 80025fc:	46bd      	mov	sp, r7
 80025fe:	bd80      	pop	{r7, pc}
 8002600:	2000116c 	.word	0x2000116c
 8002604:	20001178 	.word	0x20001178
 8002608:	20001170 	.word	0x20001170
 800260c:	20001164 	.word	0x20001164
 8002610:	20001174 	.word	0x20001174

08002614 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8002614:	b580      	push	{r7, lr}
 8002616:	b086      	sub	sp, #24
 8002618:	af00      	add	r7, sp, #0
 800261a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	2b00      	cmp	r3, #0
 8002624:	d048      	beq.n	80026b8 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8002626:	2308      	movs	r3, #8
 8002628:	425b      	negs	r3, r3
 800262a:	697a      	ldr	r2, [r7, #20]
 800262c:	4413      	add	r3, r2
 800262e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8002630:	697b      	ldr	r3, [r7, #20]
 8002632:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8002634:	693b      	ldr	r3, [r7, #16]
 8002636:	685a      	ldr	r2, [r3, #4]
 8002638:	4b21      	ldr	r3, [pc, #132]	; (80026c0 <vPortFree+0xac>)
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	4013      	ands	r3, r2
 800263e:	2b00      	cmp	r3, #0
 8002640:	d10a      	bne.n	8002658 <vPortFree+0x44>
	__asm volatile
 8002642:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002646:	f383 8811 	msr	BASEPRI, r3
 800264a:	f3bf 8f6f 	isb	sy
 800264e:	f3bf 8f4f 	dsb	sy
 8002652:	60fb      	str	r3, [r7, #12]
}
 8002654:	bf00      	nop
 8002656:	e7fe      	b.n	8002656 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8002658:	693b      	ldr	r3, [r7, #16]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	2b00      	cmp	r3, #0
 800265e:	d00a      	beq.n	8002676 <vPortFree+0x62>
	__asm volatile
 8002660:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002664:	f383 8811 	msr	BASEPRI, r3
 8002668:	f3bf 8f6f 	isb	sy
 800266c:	f3bf 8f4f 	dsb	sy
 8002670:	60bb      	str	r3, [r7, #8]
}
 8002672:	bf00      	nop
 8002674:	e7fe      	b.n	8002674 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8002676:	693b      	ldr	r3, [r7, #16]
 8002678:	685a      	ldr	r2, [r3, #4]
 800267a:	4b11      	ldr	r3, [pc, #68]	; (80026c0 <vPortFree+0xac>)
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	4013      	ands	r3, r2
 8002680:	2b00      	cmp	r3, #0
 8002682:	d019      	beq.n	80026b8 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8002684:	693b      	ldr	r3, [r7, #16]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	2b00      	cmp	r3, #0
 800268a:	d115      	bne.n	80026b8 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800268c:	693b      	ldr	r3, [r7, #16]
 800268e:	685a      	ldr	r2, [r3, #4]
 8002690:	4b0b      	ldr	r3, [pc, #44]	; (80026c0 <vPortFree+0xac>)
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	43db      	mvns	r3, r3
 8002696:	401a      	ands	r2, r3
 8002698:	693b      	ldr	r3, [r7, #16]
 800269a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800269c:	f7fe fc7a 	bl	8000f94 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80026a0:	693b      	ldr	r3, [r7, #16]
 80026a2:	685a      	ldr	r2, [r3, #4]
 80026a4:	4b07      	ldr	r3, [pc, #28]	; (80026c4 <vPortFree+0xb0>)
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	4413      	add	r3, r2
 80026aa:	4a06      	ldr	r2, [pc, #24]	; (80026c4 <vPortFree+0xb0>)
 80026ac:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80026ae:	6938      	ldr	r0, [r7, #16]
 80026b0:	f000 f86c 	bl	800278c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80026b4:	f7fe fc7c 	bl	8000fb0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80026b8:	bf00      	nop
 80026ba:	3718      	adds	r7, #24
 80026bc:	46bd      	mov	sp, r7
 80026be:	bd80      	pop	{r7, pc}
 80026c0:	20001178 	.word	0x20001178
 80026c4:	20001170 	.word	0x20001170

080026c8 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80026c8:	b480      	push	{r7}
 80026ca:	b085      	sub	sp, #20
 80026cc:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80026ce:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80026d2:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80026d4:	4b27      	ldr	r3, [pc, #156]	; (8002774 <prvHeapInit+0xac>)
 80026d6:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	f003 0307 	and.w	r3, r3, #7
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d00c      	beq.n	80026fc <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	3307      	adds	r3, #7
 80026e6:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	f023 0307 	bic.w	r3, r3, #7
 80026ee:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80026f0:	68ba      	ldr	r2, [r7, #8]
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	1ad3      	subs	r3, r2, r3
 80026f6:	4a1f      	ldr	r2, [pc, #124]	; (8002774 <prvHeapInit+0xac>)
 80026f8:	4413      	add	r3, r2
 80026fa:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8002700:	4a1d      	ldr	r2, [pc, #116]	; (8002778 <prvHeapInit+0xb0>)
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8002706:	4b1c      	ldr	r3, [pc, #112]	; (8002778 <prvHeapInit+0xb0>)
 8002708:	2200      	movs	r2, #0
 800270a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	68ba      	ldr	r2, [r7, #8]
 8002710:	4413      	add	r3, r2
 8002712:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8002714:	2208      	movs	r2, #8
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	1a9b      	subs	r3, r3, r2
 800271a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	f023 0307 	bic.w	r3, r3, #7
 8002722:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	4a15      	ldr	r2, [pc, #84]	; (800277c <prvHeapInit+0xb4>)
 8002728:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800272a:	4b14      	ldr	r3, [pc, #80]	; (800277c <prvHeapInit+0xb4>)
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	2200      	movs	r2, #0
 8002730:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8002732:	4b12      	ldr	r3, [pc, #72]	; (800277c <prvHeapInit+0xb4>)
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	2200      	movs	r2, #0
 8002738:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800273e:	683b      	ldr	r3, [r7, #0]
 8002740:	68fa      	ldr	r2, [r7, #12]
 8002742:	1ad2      	subs	r2, r2, r3
 8002744:	683b      	ldr	r3, [r7, #0]
 8002746:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8002748:	4b0c      	ldr	r3, [pc, #48]	; (800277c <prvHeapInit+0xb4>)
 800274a:	681a      	ldr	r2, [r3, #0]
 800274c:	683b      	ldr	r3, [r7, #0]
 800274e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8002750:	683b      	ldr	r3, [r7, #0]
 8002752:	685b      	ldr	r3, [r3, #4]
 8002754:	4a0a      	ldr	r2, [pc, #40]	; (8002780 <prvHeapInit+0xb8>)
 8002756:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8002758:	683b      	ldr	r3, [r7, #0]
 800275a:	685b      	ldr	r3, [r3, #4]
 800275c:	4a09      	ldr	r2, [pc, #36]	; (8002784 <prvHeapInit+0xbc>)
 800275e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8002760:	4b09      	ldr	r3, [pc, #36]	; (8002788 <prvHeapInit+0xc0>)
 8002762:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8002766:	601a      	str	r2, [r3, #0]
}
 8002768:	bf00      	nop
 800276a:	3714      	adds	r7, #20
 800276c:	46bd      	mov	sp, r7
 800276e:	bc80      	pop	{r7}
 8002770:	4770      	bx	lr
 8002772:	bf00      	nop
 8002774:	20000564 	.word	0x20000564
 8002778:	20001164 	.word	0x20001164
 800277c:	2000116c 	.word	0x2000116c
 8002780:	20001174 	.word	0x20001174
 8002784:	20001170 	.word	0x20001170
 8002788:	20001178 	.word	0x20001178

0800278c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800278c:	b480      	push	{r7}
 800278e:	b085      	sub	sp, #20
 8002790:	af00      	add	r7, sp, #0
 8002792:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8002794:	4b27      	ldr	r3, [pc, #156]	; (8002834 <prvInsertBlockIntoFreeList+0xa8>)
 8002796:	60fb      	str	r3, [r7, #12]
 8002798:	e002      	b.n	80027a0 <prvInsertBlockIntoFreeList+0x14>
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	60fb      	str	r3, [r7, #12]
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	687a      	ldr	r2, [r7, #4]
 80027a6:	429a      	cmp	r2, r3
 80027a8:	d8f7      	bhi.n	800279a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	685b      	ldr	r3, [r3, #4]
 80027b2:	68ba      	ldr	r2, [r7, #8]
 80027b4:	4413      	add	r3, r2
 80027b6:	687a      	ldr	r2, [r7, #4]
 80027b8:	429a      	cmp	r2, r3
 80027ba:	d108      	bne.n	80027ce <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	685a      	ldr	r2, [r3, #4]
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	685b      	ldr	r3, [r3, #4]
 80027c4:	441a      	add	r2, r3
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	685b      	ldr	r3, [r3, #4]
 80027d6:	68ba      	ldr	r2, [r7, #8]
 80027d8:	441a      	add	r2, r3
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	429a      	cmp	r2, r3
 80027e0:	d118      	bne.n	8002814 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	681a      	ldr	r2, [r3, #0]
 80027e6:	4b14      	ldr	r3, [pc, #80]	; (8002838 <prvInsertBlockIntoFreeList+0xac>)
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	429a      	cmp	r2, r3
 80027ec:	d00d      	beq.n	800280a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	685a      	ldr	r2, [r3, #4]
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	685b      	ldr	r3, [r3, #4]
 80027f8:	441a      	add	r2, r3
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	681a      	ldr	r2, [r3, #0]
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	601a      	str	r2, [r3, #0]
 8002808:	e008      	b.n	800281c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800280a:	4b0b      	ldr	r3, [pc, #44]	; (8002838 <prvInsertBlockIntoFreeList+0xac>)
 800280c:	681a      	ldr	r2, [r3, #0]
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	601a      	str	r2, [r3, #0]
 8002812:	e003      	b.n	800281c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	681a      	ldr	r2, [r3, #0]
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800281c:	68fa      	ldr	r2, [r7, #12]
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	429a      	cmp	r2, r3
 8002822:	d002      	beq.n	800282a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	687a      	ldr	r2, [r7, #4]
 8002828:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800282a:	bf00      	nop
 800282c:	3714      	adds	r7, #20
 800282e:	46bd      	mov	sp, r7
 8002830:	bc80      	pop	{r7}
 8002832:	4770      	bx	lr
 8002834:	20001164 	.word	0x20001164
 8002838:	2000116c 	.word	0x2000116c

0800283c <HAL_Usart_RockBlock__Init>:
 *
 * 		@param[out]		-	none
 * 		@return value		-	none
 * 		Note			-
 */
void HAL_Usart_RockBlock__Init(void) {
 800283c:	b580      	push	{r7, lr}
 800283e:	b086      	sub	sp, #24
 8002840:	af00      	add	r7, sp, #0
	    USART_Config_t uart1_cfg ;
		uart1_cfg.Mode = USART_MODE_TX_RX ;
 8002842:	230c      	movs	r3, #12
 8002844:	703b      	strb	r3, [r7, #0]
		uart1_cfg.BaudRate = USART_BAUDRATE_9600 ;
 8002846:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 800284a:	607b      	str	r3, [r7, #4]
		uart1_cfg.PayLoad_Length = USART_PAYLOAD_8B ;
 800284c:	2300      	movs	r3, #0
 800284e:	813b      	strh	r3, [r7, #8]
		uart1_cfg.Parity = USART_PARITY_NONE ;
 8002850:	2300      	movs	r3, #0
 8002852:	817b      	strh	r3, [r7, #10]
		uart1_cfg.StopBits = USART_STOP_BITS_1 ;
 8002854:	2300      	movs	r3, #0
 8002856:	81bb      	strh	r3, [r7, #12]
		uart1_cfg.HW_FlowControl = USART_FLOWCONTROL_NONE ;
 8002858:	2300      	movs	r3, #0
 800285a:	81fb      	strh	r3, [r7, #14]
		uart1_cfg.IRQ_Enable = USART_IRQ_ENABLE_RXNE ;
 800285c:	2320      	movs	r3, #32
 800285e:	823b      	strh	r3, [r7, #16]
		uart1_cfg.p_IRQ_CallBack = ROCKBLOCK_Call_Back ;
 8002860:	4b06      	ldr	r3, [pc, #24]	; (800287c <HAL_Usart_RockBlock__Init+0x40>)
 8002862:	617b      	str	r3, [r7, #20]

		MCAL_USART_Init(USART1, &uart1_cfg) ;
 8002864:	463b      	mov	r3, r7
 8002866:	4619      	mov	r1, r3
 8002868:	4805      	ldr	r0, [pc, #20]	; (8002880 <HAL_Usart_RockBlock__Init+0x44>)
 800286a:	f000 fbc7 	bl	8002ffc <MCAL_USART_Init>
		MCAL_USART_GPIO_Pins(USART1) ;
 800286e:	4804      	ldr	r0, [pc, #16]	; (8002880 <HAL_Usart_RockBlock__Init+0x44>)
 8002870:	f000 fc8e 	bl	8003190 <MCAL_USART_GPIO_Pins>
}
 8002874:	bf00      	nop
 8002876:	3718      	adds	r7, #24
 8002878:	46bd      	mov	sp, r7
 800287a:	bd80      	pop	{r7, pc}
 800287c:	08003535 	.word	0x08003535
 8002880:	40013800 	.word	0x40013800

08002884 <HAL_ROCKBLOCK_Send_ALERT>:
 * 		@param[out]		-	none
 * 		@return value		-	none
 * 		Note			-	none
 */

void HAL_ROCKBLOCK_Send_ALERT(void){
 8002884:	b580      	push	{r7, lr}
 8002886:	b084      	sub	sp, #16
 8002888:	af00      	add	r7, sp, #0

	uint16_t p_p[6] = {'A','L','E','R','T','\0'};
 800288a:	4a11      	ldr	r2, [pc, #68]	; (80028d0 <HAL_ROCKBLOCK_Send_ALERT+0x4c>)
 800288c:	463b      	mov	r3, r7
 800288e:	ca07      	ldmia	r2, {r0, r1, r2}
 8002890:	e883 0007 	stmia.w	r3, {r0, r1, r2}
       uint8_t i=0;
 8002894:	2300      	movs	r3, #0
 8002896:	73fb      	strb	r3, [r7, #15]
	while(p_p[i] != (uint16_t)'\0'){
 8002898:	e00b      	b.n	80028b2 <HAL_ROCKBLOCK_Send_ALERT+0x2e>
		MCAL_USART_Send_Data(USART1 ,&p_p[i]  ,enable);
 800289a:	7bfb      	ldrb	r3, [r7, #15]
 800289c:	463a      	mov	r2, r7
 800289e:	005b      	lsls	r3, r3, #1
 80028a0:	4413      	add	r3, r2
 80028a2:	2201      	movs	r2, #1
 80028a4:	4619      	mov	r1, r3
 80028a6:	480b      	ldr	r0, [pc, #44]	; (80028d4 <HAL_ROCKBLOCK_Send_ALERT+0x50>)
 80028a8:	f000 fcfe 	bl	80032a8 <MCAL_USART_Send_Data>
		i++;
 80028ac:	7bfb      	ldrb	r3, [r7, #15]
 80028ae:	3301      	adds	r3, #1
 80028b0:	73fb      	strb	r3, [r7, #15]
	while(p_p[i] != (uint16_t)'\0'){
 80028b2:	7bfb      	ldrb	r3, [r7, #15]
 80028b4:	005b      	lsls	r3, r3, #1
 80028b6:	f107 0210 	add.w	r2, r7, #16
 80028ba:	4413      	add	r3, r2
 80028bc:	f833 3c10 	ldrh.w	r3, [r3, #-16]
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d1ea      	bne.n	800289a <HAL_ROCKBLOCK_Send_ALERT+0x16>
	}


}
 80028c4:	bf00      	nop
 80028c6:	bf00      	nop
 80028c8:	3710      	adds	r7, #16
 80028ca:	46bd      	mov	sp, r7
 80028cc:	bd80      	pop	{r7, pc}
 80028ce:	bf00      	nop
 80028d0:	08003858 	.word	0x08003858
 80028d4:	40013800 	.word	0x40013800

080028d8 <EXTI0_IRQHandler>:
	NVIC_IRQ23_EXTI5_9_DISABLE() ;
	NVIC_IRQ40_EXTI10_15_DISABLE() ;
}

// ----------------------------------------- ISR Functions -----------------------------------------
void EXTI0_IRQHandler (void) {
 80028d8:	b580      	push	{r7, lr}
 80028da:	af00      	add	r7, sp, #0
	// clear corresponding bit in pending register
	EXTI->PR |= (1 << 0) ;
 80028dc:	4b05      	ldr	r3, [pc, #20]	; (80028f4 <EXTI0_IRQHandler+0x1c>)
 80028de:	695b      	ldr	r3, [r3, #20]
 80028e0:	4a04      	ldr	r2, [pc, #16]	; (80028f4 <EXTI0_IRQHandler+0x1c>)
 80028e2:	f043 0301 	orr.w	r3, r3, #1
 80028e6:	6153      	str	r3, [r2, #20]

	// Call IRQ_CallBack
	GP_IRQ_CallBack[0]() ;
 80028e8:	4b03      	ldr	r3, [pc, #12]	; (80028f8 <EXTI0_IRQHandler+0x20>)
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	4798      	blx	r3

}
 80028ee:	bf00      	nop
 80028f0:	bd80      	pop	{r7, pc}
 80028f2:	bf00      	nop
 80028f4:	40010400 	.word	0x40010400
 80028f8:	200011d0 	.word	0x200011d0

080028fc <EXTI1_IRQHandler>:
void EXTI1_IRQHandler (void) {
 80028fc:	b580      	push	{r7, lr}
 80028fe:	af00      	add	r7, sp, #0
	// clear corresponding bit in pending register
	EXTI->PR |= (1 << 1) ;
 8002900:	4b05      	ldr	r3, [pc, #20]	; (8002918 <EXTI1_IRQHandler+0x1c>)
 8002902:	695b      	ldr	r3, [r3, #20]
 8002904:	4a04      	ldr	r2, [pc, #16]	; (8002918 <EXTI1_IRQHandler+0x1c>)
 8002906:	f043 0302 	orr.w	r3, r3, #2
 800290a:	6153      	str	r3, [r2, #20]

	// Call IRQ_CallBack
	GP_IRQ_CallBack[1]() ;
 800290c:	4b03      	ldr	r3, [pc, #12]	; (800291c <EXTI1_IRQHandler+0x20>)
 800290e:	685b      	ldr	r3, [r3, #4]
 8002910:	4798      	blx	r3
}
 8002912:	bf00      	nop
 8002914:	bd80      	pop	{r7, pc}
 8002916:	bf00      	nop
 8002918:	40010400 	.word	0x40010400
 800291c:	200011d0 	.word	0x200011d0

08002920 <EXTI2_IRQHandler>:
void EXTI2_IRQHandler (void) {
 8002920:	b580      	push	{r7, lr}
 8002922:	af00      	add	r7, sp, #0
	// clear corresponding bit in pending register
	EXTI->PR |= (1 << 2) ;
 8002924:	4b05      	ldr	r3, [pc, #20]	; (800293c <EXTI2_IRQHandler+0x1c>)
 8002926:	695b      	ldr	r3, [r3, #20]
 8002928:	4a04      	ldr	r2, [pc, #16]	; (800293c <EXTI2_IRQHandler+0x1c>)
 800292a:	f043 0304 	orr.w	r3, r3, #4
 800292e:	6153      	str	r3, [r2, #20]

	// Call IRQ_CallBack
	GP_IRQ_CallBack[2]() ;
 8002930:	4b03      	ldr	r3, [pc, #12]	; (8002940 <EXTI2_IRQHandler+0x20>)
 8002932:	689b      	ldr	r3, [r3, #8]
 8002934:	4798      	blx	r3
}
 8002936:	bf00      	nop
 8002938:	bd80      	pop	{r7, pc}
 800293a:	bf00      	nop
 800293c:	40010400 	.word	0x40010400
 8002940:	200011d0 	.word	0x200011d0

08002944 <EXTI3_IRQHandler>:
void EXTI3_IRQHandler (void) {
 8002944:	b580      	push	{r7, lr}
 8002946:	af00      	add	r7, sp, #0
	// clear corresponding bit in pending register
	EXTI->PR |= (1 << 3) ;
 8002948:	4b05      	ldr	r3, [pc, #20]	; (8002960 <EXTI3_IRQHandler+0x1c>)
 800294a:	695b      	ldr	r3, [r3, #20]
 800294c:	4a04      	ldr	r2, [pc, #16]	; (8002960 <EXTI3_IRQHandler+0x1c>)
 800294e:	f043 0308 	orr.w	r3, r3, #8
 8002952:	6153      	str	r3, [r2, #20]

	// Call IRQ_CallBack
	GP_IRQ_CallBack[3]() ;
 8002954:	4b03      	ldr	r3, [pc, #12]	; (8002964 <EXTI3_IRQHandler+0x20>)
 8002956:	68db      	ldr	r3, [r3, #12]
 8002958:	4798      	blx	r3
}
 800295a:	bf00      	nop
 800295c:	bd80      	pop	{r7, pc}
 800295e:	bf00      	nop
 8002960:	40010400 	.word	0x40010400
 8002964:	200011d0 	.word	0x200011d0

08002968 <EXTI4_IRQHandler>:
void EXTI4_IRQHandler (void) {
 8002968:	b580      	push	{r7, lr}
 800296a:	af00      	add	r7, sp, #0
	// clear corresponding bit in pending register
	EXTI->PR |= (1 << 4) ;
 800296c:	4b05      	ldr	r3, [pc, #20]	; (8002984 <EXTI4_IRQHandler+0x1c>)
 800296e:	695b      	ldr	r3, [r3, #20]
 8002970:	4a04      	ldr	r2, [pc, #16]	; (8002984 <EXTI4_IRQHandler+0x1c>)
 8002972:	f043 0310 	orr.w	r3, r3, #16
 8002976:	6153      	str	r3, [r2, #20]

	// Call IRQ_CallBack
	GP_IRQ_CallBack[4]() ;
 8002978:	4b03      	ldr	r3, [pc, #12]	; (8002988 <EXTI4_IRQHandler+0x20>)
 800297a:	691b      	ldr	r3, [r3, #16]
 800297c:	4798      	blx	r3
}
 800297e:	bf00      	nop
 8002980:	bd80      	pop	{r7, pc}
 8002982:	bf00      	nop
 8002984:	40010400 	.word	0x40010400
 8002988:	200011d0 	.word	0x200011d0

0800298c <EXTI9_5_IRQHandler>:
void EXTI9_5_IRQHandler (void) {
 800298c:	b580      	push	{r7, lr}
 800298e:	af00      	add	r7, sp, #0
	if (EXTI->PR & (1 << 5)) {
 8002990:	4b26      	ldr	r3, [pc, #152]	; (8002a2c <EXTI9_5_IRQHandler+0xa0>)
 8002992:	695b      	ldr	r3, [r3, #20]
 8002994:	f003 0320 	and.w	r3, r3, #32
 8002998:	2b00      	cmp	r3, #0
 800299a:	d008      	beq.n	80029ae <EXTI9_5_IRQHandler+0x22>
		// clear corresponding bit in pending register
		EXTI->PR |= (1 << 5) ;
 800299c:	4b23      	ldr	r3, [pc, #140]	; (8002a2c <EXTI9_5_IRQHandler+0xa0>)
 800299e:	695b      	ldr	r3, [r3, #20]
 80029a0:	4a22      	ldr	r2, [pc, #136]	; (8002a2c <EXTI9_5_IRQHandler+0xa0>)
 80029a2:	f043 0320 	orr.w	r3, r3, #32
 80029a6:	6153      	str	r3, [r2, #20]

		// Call IRQ_CallBack
		GP_IRQ_CallBack[5]() ;
 80029a8:	4b21      	ldr	r3, [pc, #132]	; (8002a30 <EXTI9_5_IRQHandler+0xa4>)
 80029aa:	695b      	ldr	r3, [r3, #20]
 80029ac:	4798      	blx	r3
	}
	if (EXTI->PR & (1 << 6)) {
 80029ae:	4b1f      	ldr	r3, [pc, #124]	; (8002a2c <EXTI9_5_IRQHandler+0xa0>)
 80029b0:	695b      	ldr	r3, [r3, #20]
 80029b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d008      	beq.n	80029cc <EXTI9_5_IRQHandler+0x40>
		// clear corresponding bit in pending register
		EXTI->PR |= (1 << 6) ;
 80029ba:	4b1c      	ldr	r3, [pc, #112]	; (8002a2c <EXTI9_5_IRQHandler+0xa0>)
 80029bc:	695b      	ldr	r3, [r3, #20]
 80029be:	4a1b      	ldr	r2, [pc, #108]	; (8002a2c <EXTI9_5_IRQHandler+0xa0>)
 80029c0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80029c4:	6153      	str	r3, [r2, #20]

		// Call IRQ_CallBack
		GP_IRQ_CallBack[6]() ;
 80029c6:	4b1a      	ldr	r3, [pc, #104]	; (8002a30 <EXTI9_5_IRQHandler+0xa4>)
 80029c8:	699b      	ldr	r3, [r3, #24]
 80029ca:	4798      	blx	r3
	}
	if (EXTI->PR & (1 << 7)) {
 80029cc:	4b17      	ldr	r3, [pc, #92]	; (8002a2c <EXTI9_5_IRQHandler+0xa0>)
 80029ce:	695b      	ldr	r3, [r3, #20]
 80029d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d008      	beq.n	80029ea <EXTI9_5_IRQHandler+0x5e>
		// clear corresponding bit in pending register
		EXTI->PR |= (1 << 7) ;
 80029d8:	4b14      	ldr	r3, [pc, #80]	; (8002a2c <EXTI9_5_IRQHandler+0xa0>)
 80029da:	695b      	ldr	r3, [r3, #20]
 80029dc:	4a13      	ldr	r2, [pc, #76]	; (8002a2c <EXTI9_5_IRQHandler+0xa0>)
 80029de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80029e2:	6153      	str	r3, [r2, #20]

		// Call IRQ_CallBack
		GP_IRQ_CallBack[7]() ;
 80029e4:	4b12      	ldr	r3, [pc, #72]	; (8002a30 <EXTI9_5_IRQHandler+0xa4>)
 80029e6:	69db      	ldr	r3, [r3, #28]
 80029e8:	4798      	blx	r3
	}
	if (EXTI->PR & (1 << 8)) {
 80029ea:	4b10      	ldr	r3, [pc, #64]	; (8002a2c <EXTI9_5_IRQHandler+0xa0>)
 80029ec:	695b      	ldr	r3, [r3, #20]
 80029ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d008      	beq.n	8002a08 <EXTI9_5_IRQHandler+0x7c>
		// clear corresponding bit in pending register
		EXTI->PR |= (1 << 8) ;
 80029f6:	4b0d      	ldr	r3, [pc, #52]	; (8002a2c <EXTI9_5_IRQHandler+0xa0>)
 80029f8:	695b      	ldr	r3, [r3, #20]
 80029fa:	4a0c      	ldr	r2, [pc, #48]	; (8002a2c <EXTI9_5_IRQHandler+0xa0>)
 80029fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a00:	6153      	str	r3, [r2, #20]

		// Call IRQ_CallBack
		GP_IRQ_CallBack[8]() ;
 8002a02:	4b0b      	ldr	r3, [pc, #44]	; (8002a30 <EXTI9_5_IRQHandler+0xa4>)
 8002a04:	6a1b      	ldr	r3, [r3, #32]
 8002a06:	4798      	blx	r3
	}
	if (EXTI->PR & (1 << 9)) {
 8002a08:	4b08      	ldr	r3, [pc, #32]	; (8002a2c <EXTI9_5_IRQHandler+0xa0>)
 8002a0a:	695b      	ldr	r3, [r3, #20]
 8002a0c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d008      	beq.n	8002a26 <EXTI9_5_IRQHandler+0x9a>
		// clear corresponding bit in pending register
		EXTI->PR |= (1 << 9) ;
 8002a14:	4b05      	ldr	r3, [pc, #20]	; (8002a2c <EXTI9_5_IRQHandler+0xa0>)
 8002a16:	695b      	ldr	r3, [r3, #20]
 8002a18:	4a04      	ldr	r2, [pc, #16]	; (8002a2c <EXTI9_5_IRQHandler+0xa0>)
 8002a1a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002a1e:	6153      	str	r3, [r2, #20]

		// Call IRQ_CallBack
		GP_IRQ_CallBack[9]() ;
 8002a20:	4b03      	ldr	r3, [pc, #12]	; (8002a30 <EXTI9_5_IRQHandler+0xa4>)
 8002a22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a24:	4798      	blx	r3
	}
}
 8002a26:	bf00      	nop
 8002a28:	bd80      	pop	{r7, pc}
 8002a2a:	bf00      	nop
 8002a2c:	40010400 	.word	0x40010400
 8002a30:	200011d0 	.word	0x200011d0

08002a34 <EXTI15_10_IRQHandler>:
void EXTI15_10_IRQHandler (void) {
 8002a34:	b580      	push	{r7, lr}
 8002a36:	af00      	add	r7, sp, #0
	if (EXTI->PR & (1 << 10)) {
 8002a38:	4b26      	ldr	r3, [pc, #152]	; (8002ad4 <EXTI15_10_IRQHandler+0xa0>)
 8002a3a:	695b      	ldr	r3, [r3, #20]
 8002a3c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d008      	beq.n	8002a56 <EXTI15_10_IRQHandler+0x22>
		// clear corresponding bit in pending register
		EXTI->PR |= (1 << 10) ;
 8002a44:	4b23      	ldr	r3, [pc, #140]	; (8002ad4 <EXTI15_10_IRQHandler+0xa0>)
 8002a46:	695b      	ldr	r3, [r3, #20]
 8002a48:	4a22      	ldr	r2, [pc, #136]	; (8002ad4 <EXTI15_10_IRQHandler+0xa0>)
 8002a4a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002a4e:	6153      	str	r3, [r2, #20]

		// Call IRQ_CallBack
		GP_IRQ_CallBack[10]() ;
 8002a50:	4b21      	ldr	r3, [pc, #132]	; (8002ad8 <EXTI15_10_IRQHandler+0xa4>)
 8002a52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a54:	4798      	blx	r3
	}
	if (EXTI->PR & (1 << 11)) {
 8002a56:	4b1f      	ldr	r3, [pc, #124]	; (8002ad4 <EXTI15_10_IRQHandler+0xa0>)
 8002a58:	695b      	ldr	r3, [r3, #20]
 8002a5a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d008      	beq.n	8002a74 <EXTI15_10_IRQHandler+0x40>
		// clear corresponding bit in pending register
		EXTI->PR |= (1 << 11) ;
 8002a62:	4b1c      	ldr	r3, [pc, #112]	; (8002ad4 <EXTI15_10_IRQHandler+0xa0>)
 8002a64:	695b      	ldr	r3, [r3, #20]
 8002a66:	4a1b      	ldr	r2, [pc, #108]	; (8002ad4 <EXTI15_10_IRQHandler+0xa0>)
 8002a68:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002a6c:	6153      	str	r3, [r2, #20]

		// Call IRQ_CallBack
		GP_IRQ_CallBack[11]() ;
 8002a6e:	4b1a      	ldr	r3, [pc, #104]	; (8002ad8 <EXTI15_10_IRQHandler+0xa4>)
 8002a70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a72:	4798      	blx	r3
	}
	if (EXTI->PR & (1 << 12)) {
 8002a74:	4b17      	ldr	r3, [pc, #92]	; (8002ad4 <EXTI15_10_IRQHandler+0xa0>)
 8002a76:	695b      	ldr	r3, [r3, #20]
 8002a78:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d008      	beq.n	8002a92 <EXTI15_10_IRQHandler+0x5e>
		// clear corresponding bit in pending register
		EXTI->PR |= (1 << 12) ;
 8002a80:	4b14      	ldr	r3, [pc, #80]	; (8002ad4 <EXTI15_10_IRQHandler+0xa0>)
 8002a82:	695b      	ldr	r3, [r3, #20]
 8002a84:	4a13      	ldr	r2, [pc, #76]	; (8002ad4 <EXTI15_10_IRQHandler+0xa0>)
 8002a86:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002a8a:	6153      	str	r3, [r2, #20]

		// Call IRQ_CallBack
		GP_IRQ_CallBack[12]() ;
 8002a8c:	4b12      	ldr	r3, [pc, #72]	; (8002ad8 <EXTI15_10_IRQHandler+0xa4>)
 8002a8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a90:	4798      	blx	r3
	}
	if (EXTI->PR & (1 << 13)) {
 8002a92:	4b10      	ldr	r3, [pc, #64]	; (8002ad4 <EXTI15_10_IRQHandler+0xa0>)
 8002a94:	695b      	ldr	r3, [r3, #20]
 8002a96:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d008      	beq.n	8002ab0 <EXTI15_10_IRQHandler+0x7c>
		// clear corresponding bit in pending register
		EXTI->PR |= (1 << 13) ;
 8002a9e:	4b0d      	ldr	r3, [pc, #52]	; (8002ad4 <EXTI15_10_IRQHandler+0xa0>)
 8002aa0:	695b      	ldr	r3, [r3, #20]
 8002aa2:	4a0c      	ldr	r2, [pc, #48]	; (8002ad4 <EXTI15_10_IRQHandler+0xa0>)
 8002aa4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002aa8:	6153      	str	r3, [r2, #20]

		// Call IRQ_CallBack
		GP_IRQ_CallBack[13]() ;
 8002aaa:	4b0b      	ldr	r3, [pc, #44]	; (8002ad8 <EXTI15_10_IRQHandler+0xa4>)
 8002aac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002aae:	4798      	blx	r3
	}
	if (EXTI->PR & (1 << 14)) {
 8002ab0:	4b08      	ldr	r3, [pc, #32]	; (8002ad4 <EXTI15_10_IRQHandler+0xa0>)
 8002ab2:	695b      	ldr	r3, [r3, #20]
 8002ab4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d008      	beq.n	8002ace <EXTI15_10_IRQHandler+0x9a>
		// clear corresponding bit in pending register
		EXTI->PR |= (1 << 14) ;
 8002abc:	4b05      	ldr	r3, [pc, #20]	; (8002ad4 <EXTI15_10_IRQHandler+0xa0>)
 8002abe:	695b      	ldr	r3, [r3, #20]
 8002ac0:	4a04      	ldr	r2, [pc, #16]	; (8002ad4 <EXTI15_10_IRQHandler+0xa0>)
 8002ac2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002ac6:	6153      	str	r3, [r2, #20]

		// Call IRQ_CallBack
		GP_IRQ_CallBack[14]() ;
 8002ac8:	4b03      	ldr	r3, [pc, #12]	; (8002ad8 <EXTI15_10_IRQHandler+0xa4>)
 8002aca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002acc:	4798      	blx	r3
	}
}
 8002ace:	bf00      	nop
 8002ad0:	bd80      	pop	{r7, pc}
 8002ad2:	bf00      	nop
 8002ad4:	40010400 	.word	0x40010400
 8002ad8:	200011d0 	.word	0x200011d0

08002adc <GPIO_CRLH_GetPosition>:
 *
 *      Author: Mahmoud Elkot
 */
#include "GPIO.h"

static GPIO_CRLH_GetPosition (uint16_t PinNumber) {
 8002adc:	b480      	push	{r7}
 8002ade:	b083      	sub	sp, #12
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	4603      	mov	r3, r0
 8002ae4:	80fb      	strh	r3, [r7, #6]
	switch (PinNumber) {
 8002ae6:	88fb      	ldrh	r3, [r7, #6]
 8002ae8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002aec:	f000 80a5 	beq.w	8002c3a <GPIO_CRLH_GetPosition+0x15e>
 8002af0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002af4:	f300 80a3 	bgt.w	8002c3e <GPIO_CRLH_GetPosition+0x162>
 8002af8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002afc:	f000 809b 	beq.w	8002c36 <GPIO_CRLH_GetPosition+0x15a>
 8002b00:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002b04:	f300 809b 	bgt.w	8002c3e <GPIO_CRLH_GetPosition+0x162>
 8002b08:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002b0c:	f000 8091 	beq.w	8002c32 <GPIO_CRLH_GetPosition+0x156>
 8002b10:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002b14:	f300 8093 	bgt.w	8002c3e <GPIO_CRLH_GetPosition+0x162>
 8002b18:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002b1c:	f000 8087 	beq.w	8002c2e <GPIO_CRLH_GetPosition+0x152>
 8002b20:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002b24:	f300 808b 	bgt.w	8002c3e <GPIO_CRLH_GetPosition+0x162>
 8002b28:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002b2c:	d07d      	beq.n	8002c2a <GPIO_CRLH_GetPosition+0x14e>
 8002b2e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002b32:	f300 8084 	bgt.w	8002c3e <GPIO_CRLH_GetPosition+0x162>
 8002b36:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b3a:	d074      	beq.n	8002c26 <GPIO_CRLH_GetPosition+0x14a>
 8002b3c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b40:	dc7d      	bgt.n	8002c3e <GPIO_CRLH_GetPosition+0x162>
 8002b42:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002b46:	d06c      	beq.n	8002c22 <GPIO_CRLH_GetPosition+0x146>
 8002b48:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002b4c:	dc77      	bgt.n	8002c3e <GPIO_CRLH_GetPosition+0x162>
 8002b4e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002b52:	d064      	beq.n	8002c1e <GPIO_CRLH_GetPosition+0x142>
 8002b54:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002b58:	dc71      	bgt.n	8002c3e <GPIO_CRLH_GetPosition+0x162>
 8002b5a:	2b80      	cmp	r3, #128	; 0x80
 8002b5c:	d05d      	beq.n	8002c1a <GPIO_CRLH_GetPosition+0x13e>
 8002b5e:	2b80      	cmp	r3, #128	; 0x80
 8002b60:	dc6d      	bgt.n	8002c3e <GPIO_CRLH_GetPosition+0x162>
 8002b62:	2b20      	cmp	r3, #32
 8002b64:	dc48      	bgt.n	8002bf8 <GPIO_CRLH_GetPosition+0x11c>
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	dd69      	ble.n	8002c3e <GPIO_CRLH_GetPosition+0x162>
 8002b6a:	3b01      	subs	r3, #1
 8002b6c:	2b1f      	cmp	r3, #31
 8002b6e:	d866      	bhi.n	8002c3e <GPIO_CRLH_GetPosition+0x162>
 8002b70:	a201      	add	r2, pc, #4	; (adr r2, 8002b78 <GPIO_CRLH_GetPosition+0x9c>)
 8002b72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b76:	bf00      	nop
 8002b78:	08002bff 	.word	0x08002bff
 8002b7c:	08002c03 	.word	0x08002c03
 8002b80:	08002c3f 	.word	0x08002c3f
 8002b84:	08002c07 	.word	0x08002c07
 8002b88:	08002c3f 	.word	0x08002c3f
 8002b8c:	08002c3f 	.word	0x08002c3f
 8002b90:	08002c3f 	.word	0x08002c3f
 8002b94:	08002c0b 	.word	0x08002c0b
 8002b98:	08002c3f 	.word	0x08002c3f
 8002b9c:	08002c3f 	.word	0x08002c3f
 8002ba0:	08002c3f 	.word	0x08002c3f
 8002ba4:	08002c3f 	.word	0x08002c3f
 8002ba8:	08002c3f 	.word	0x08002c3f
 8002bac:	08002c3f 	.word	0x08002c3f
 8002bb0:	08002c3f 	.word	0x08002c3f
 8002bb4:	08002c0f 	.word	0x08002c0f
 8002bb8:	08002c3f 	.word	0x08002c3f
 8002bbc:	08002c3f 	.word	0x08002c3f
 8002bc0:	08002c3f 	.word	0x08002c3f
 8002bc4:	08002c3f 	.word	0x08002c3f
 8002bc8:	08002c3f 	.word	0x08002c3f
 8002bcc:	08002c3f 	.word	0x08002c3f
 8002bd0:	08002c3f 	.word	0x08002c3f
 8002bd4:	08002c3f 	.word	0x08002c3f
 8002bd8:	08002c3f 	.word	0x08002c3f
 8002bdc:	08002c3f 	.word	0x08002c3f
 8002be0:	08002c3f 	.word	0x08002c3f
 8002be4:	08002c3f 	.word	0x08002c3f
 8002be8:	08002c3f 	.word	0x08002c3f
 8002bec:	08002c3f 	.word	0x08002c3f
 8002bf0:	08002c3f 	.word	0x08002c3f
 8002bf4:	08002c13 	.word	0x08002c13
 8002bf8:	2b40      	cmp	r3, #64	; 0x40
 8002bfa:	d00c      	beq.n	8002c16 <GPIO_CRLH_GetPosition+0x13a>
 8002bfc:	e01f      	b.n	8002c3e <GPIO_CRLH_GetPosition+0x162>
	case GPIO_PIN_0 :
		return 0 ;
 8002bfe:	2300      	movs	r3, #0
 8002c00:	e01d      	b.n	8002c3e <GPIO_CRLH_GetPosition+0x162>
		break ;
	case GPIO_PIN_1 :
		return 4 ;
 8002c02:	2304      	movs	r3, #4
 8002c04:	e01b      	b.n	8002c3e <GPIO_CRLH_GetPosition+0x162>
		break ;
	case GPIO_PIN_2 :
		return 8 ;
 8002c06:	2308      	movs	r3, #8
 8002c08:	e019      	b.n	8002c3e <GPIO_CRLH_GetPosition+0x162>
		break ;
	case GPIO_PIN_3 :
		return 12 ;
 8002c0a:	230c      	movs	r3, #12
 8002c0c:	e017      	b.n	8002c3e <GPIO_CRLH_GetPosition+0x162>
		break ;
	case GPIO_PIN_4 :
		return 16 ;
 8002c0e:	2310      	movs	r3, #16
 8002c10:	e015      	b.n	8002c3e <GPIO_CRLH_GetPosition+0x162>
		break ;
	case GPIO_PIN_5 :
		return 20 ;
 8002c12:	2314      	movs	r3, #20
 8002c14:	e013      	b.n	8002c3e <GPIO_CRLH_GetPosition+0x162>
		break ;
	case GPIO_PIN_6 :
		return 24 ;
 8002c16:	2318      	movs	r3, #24
 8002c18:	e011      	b.n	8002c3e <GPIO_CRLH_GetPosition+0x162>
		break ;
	case GPIO_PIN_7 :
		return 28 ;
 8002c1a:	231c      	movs	r3, #28
 8002c1c:	e00f      	b.n	8002c3e <GPIO_CRLH_GetPosition+0x162>
		break ;
	case GPIO_PIN_8 :
		return 0 ;
 8002c1e:	2300      	movs	r3, #0
 8002c20:	e00d      	b.n	8002c3e <GPIO_CRLH_GetPosition+0x162>
		break ;
	case GPIO_PIN_9 :
		return 4 ;
 8002c22:	2304      	movs	r3, #4
 8002c24:	e00b      	b.n	8002c3e <GPIO_CRLH_GetPosition+0x162>
		break ;
	case GPIO_PIN_10 :
		return 8 ;
 8002c26:	2308      	movs	r3, #8
 8002c28:	e009      	b.n	8002c3e <GPIO_CRLH_GetPosition+0x162>
		break ;
	case GPIO_PIN_11 :
		return 12 ;
 8002c2a:	230c      	movs	r3, #12
 8002c2c:	e007      	b.n	8002c3e <GPIO_CRLH_GetPosition+0x162>
		break ;
	case GPIO_PIN_12 :
		return 16 ;
 8002c2e:	2310      	movs	r3, #16
 8002c30:	e005      	b.n	8002c3e <GPIO_CRLH_GetPosition+0x162>
		break ;
	case GPIO_PIN_13 :
		return 20 ;
 8002c32:	2314      	movs	r3, #20
 8002c34:	e003      	b.n	8002c3e <GPIO_CRLH_GetPosition+0x162>
		break ;
	case GPIO_PIN_14 :
		return 24 ;
 8002c36:	2318      	movs	r3, #24
 8002c38:	e001      	b.n	8002c3e <GPIO_CRLH_GetPosition+0x162>
		break ;
	case GPIO_PIN_15 :
		return 28 ;
 8002c3a:	231c      	movs	r3, #28
 8002c3c:	e7ff      	b.n	8002c3e <GPIO_CRLH_GetPosition+0x162>
		break ;
	}
}
 8002c3e:	4618      	mov	r0, r3
 8002c40:	370c      	adds	r7, #12
 8002c42:	46bd      	mov	sp, r7
 8002c44:	bc80      	pop	{r7}
 8002c46:	4770      	bx	lr

08002c48 <MCAL_GPIO_Init>:
 * 		@return value		-	none
 * 		Note			-	STM32F103C6 has GPIO A,B,C,D,E,F,G Modules
 * 						But LQFP48 Package has only GPIO A , B , part of C , part of D
 *
 */
void MCAL_GPIO_Init (GPIO_TypeDef* GPIOx , GPIO_PinConfig_t* PinConfig) {
 8002c48:	b590      	push	{r4, r7, lr}
 8002c4a:	b085      	sub	sp, #20
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	6078      	str	r0, [r7, #4]
 8002c50:	6039      	str	r1, [r7, #0]

	uint8_t Pin_Config_Value = 0 ;
 8002c52:	2300      	movs	r3, #0
 8002c54:	73fb      	strb	r3, [r7, #15]

	// Port Configuration register Low (GPIOx_CRL) configure PINS from 0 to 7
	// Port Configuration register High (GPIOx_CRH) configure PINS from 8 to 15
	volatile uint32_t* ConfigReg = NULL ;
 8002c56:	2300      	movs	r3, #0
 8002c58:	60bb      	str	r3, [r7, #8]
	ConfigReg = (PinConfig->GPIO_PinNumber < GPIO_PIN_8 ) ? (&GPIOx->CRL) : (&GPIOx->CRH) ;
 8002c5a:	683b      	ldr	r3, [r7, #0]
 8002c5c:	881b      	ldrh	r3, [r3, #0]
 8002c5e:	2bff      	cmp	r3, #255	; 0xff
 8002c60:	d801      	bhi.n	8002c66 <MCAL_GPIO_Init+0x1e>
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	e001      	b.n	8002c6a <MCAL_GPIO_Init+0x22>
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	3304      	adds	r3, #4
 8002c6a:	60bb      	str	r3, [r7, #8]

	// clear CNF and MODE
	(*ConfigReg) &= ~ (0xF << GPIO_CRLH_GetPosition(PinConfig->GPIO_PinNumber)) ;
 8002c6c:	683b      	ldr	r3, [r7, #0]
 8002c6e:	881b      	ldrh	r3, [r3, #0]
 8002c70:	4618      	mov	r0, r3
 8002c72:	f7ff ff33 	bl	8002adc <GPIO_CRLH_GetPosition>
 8002c76:	4603      	mov	r3, r0
 8002c78:	220f      	movs	r2, #15
 8002c7a:	fa02 f303 	lsl.w	r3, r2, r3
 8002c7e:	43da      	mvns	r2, r3
 8002c80:	68bb      	ldr	r3, [r7, #8]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	401a      	ands	r2, r3
 8002c86:	68bb      	ldr	r3, [r7, #8]
 8002c88:	601a      	str	r2, [r3, #0]

	// if pin is output
	if ( (PinConfig->GPIO_MODE == GPIO_MODE_AF_OPEN_DRAIN) || (PinConfig->GPIO_MODE == GPIO_MODE_AF_PUSH_PULL) || (PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_PUSH_PULL) || (PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_OPEN_DRAIN) ) {
 8002c8a:	683b      	ldr	r3, [r7, #0]
 8002c8c:	789b      	ldrb	r3, [r3, #2]
 8002c8e:	2b07      	cmp	r3, #7
 8002c90:	d00b      	beq.n	8002caa <MCAL_GPIO_Init+0x62>
 8002c92:	683b      	ldr	r3, [r7, #0]
 8002c94:	789b      	ldrb	r3, [r3, #2]
 8002c96:	2b06      	cmp	r3, #6
 8002c98:	d007      	beq.n	8002caa <MCAL_GPIO_Init+0x62>
 8002c9a:	683b      	ldr	r3, [r7, #0]
 8002c9c:	789b      	ldrb	r3, [r3, #2]
 8002c9e:	2b04      	cmp	r3, #4
 8002ca0:	d003      	beq.n	8002caa <MCAL_GPIO_Init+0x62>
 8002ca2:	683b      	ldr	r3, [r7, #0]
 8002ca4:	789b      	ldrb	r3, [r3, #2]
 8002ca6:	2b05      	cmp	r3, #5
 8002ca8:	d11c      	bne.n	8002ce4 <MCAL_GPIO_Init+0x9c>
		// Set CNF and MODE
		Pin_Config_Value = ( (((PinConfig->GPIO_MODE - 4) << 2) | (PinConfig->GPIO_Output_Speed)) & 0x0F ) ;
 8002caa:	683b      	ldr	r3, [r7, #0]
 8002cac:	789b      	ldrb	r3, [r3, #2]
 8002cae:	3b04      	subs	r3, #4
 8002cb0:	009b      	lsls	r3, r3, #2
 8002cb2:	b25a      	sxtb	r2, r3
 8002cb4:	683b      	ldr	r3, [r7, #0]
 8002cb6:	78db      	ldrb	r3, [r3, #3]
 8002cb8:	b25b      	sxtb	r3, r3
 8002cba:	4313      	orrs	r3, r2
 8002cbc:	b25b      	sxtb	r3, r3
 8002cbe:	b2db      	uxtb	r3, r3
 8002cc0:	f003 030f 	and.w	r3, r3, #15
 8002cc4:	73fb      	strb	r3, [r7, #15]
		(*ConfigReg) |= ( (Pin_Config_Value) << (GPIO_CRLH_GetPosition(PinConfig->GPIO_PinNumber)) ) ;
 8002cc6:	7bfc      	ldrb	r4, [r7, #15]
 8002cc8:	683b      	ldr	r3, [r7, #0]
 8002cca:	881b      	ldrh	r3, [r3, #0]
 8002ccc:	4618      	mov	r0, r3
 8002cce:	f7ff ff05 	bl	8002adc <GPIO_CRLH_GetPosition>
 8002cd2:	4603      	mov	r3, r0
 8002cd4:	fa04 f203 	lsl.w	r2, r4, r3
 8002cd8:	68bb      	ldr	r3, [r7, #8]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	431a      	orrs	r2, r3
 8002cde:	68bb      	ldr	r3, [r7, #8]
 8002ce0:	601a      	str	r2, [r3, #0]
 8002ce2:	e05c      	b.n	8002d9e <MCAL_GPIO_Init+0x156>
	}
	// if pin is input
	else {
		if ((PinConfig->GPIO_MODE == GPIO_MODE_INPUT_FLOATING) || (PinConfig->GPIO_MODE == GPIO_MODE_ANALOG)) {
 8002ce4:	683b      	ldr	r3, [r7, #0]
 8002ce6:	789b      	ldrb	r3, [r3, #2]
 8002ce8:	2b01      	cmp	r3, #1
 8002cea:	d003      	beq.n	8002cf4 <MCAL_GPIO_Init+0xac>
 8002cec:	683b      	ldr	r3, [r7, #0]
 8002cee:	789b      	ldrb	r3, [r3, #2]
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d115      	bne.n	8002d20 <MCAL_GPIO_Init+0xd8>
			// Set CNF and MODE
			Pin_Config_Value = ( (((PinConfig->GPIO_MODE) << 2) | (0x0)) & 0x0F ) ;
 8002cf4:	683b      	ldr	r3, [r7, #0]
 8002cf6:	789b      	ldrb	r3, [r3, #2]
 8002cf8:	009b      	lsls	r3, r3, #2
 8002cfa:	b2db      	uxtb	r3, r3
 8002cfc:	f003 030f 	and.w	r3, r3, #15
 8002d00:	73fb      	strb	r3, [r7, #15]
			(*ConfigReg) |= ( (Pin_Config_Value) << (GPIO_CRLH_GetPosition(PinConfig->GPIO_PinNumber)) ) ;
 8002d02:	7bfc      	ldrb	r4, [r7, #15]
 8002d04:	683b      	ldr	r3, [r7, #0]
 8002d06:	881b      	ldrh	r3, [r3, #0]
 8002d08:	4618      	mov	r0, r3
 8002d0a:	f7ff fee7 	bl	8002adc <GPIO_CRLH_GetPosition>
 8002d0e:	4603      	mov	r3, r0
 8002d10:	fa04 f203 	lsl.w	r2, r4, r3
 8002d14:	68bb      	ldr	r3, [r7, #8]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	431a      	orrs	r2, r3
 8002d1a:	68bb      	ldr	r3, [r7, #8]
 8002d1c:	601a      	str	r2, [r3, #0]
 8002d1e:	e03e      	b.n	8002d9e <MCAL_GPIO_Init+0x156>
		}
		else if (PinConfig->GPIO_MODE == GPIO_MODE_AF_INPUT) {
 8002d20:	683b      	ldr	r3, [r7, #0]
 8002d22:	789b      	ldrb	r3, [r3, #2]
 8002d24:	2b08      	cmp	r3, #8
 8002d26:	d115      	bne.n	8002d54 <MCAL_GPIO_Init+0x10c>
			// Set CNF and MODE
			Pin_Config_Value = ( (((PinConfig->GPIO_MODE) << 2) | (0x0)) & 0x0F ) ;
 8002d28:	683b      	ldr	r3, [r7, #0]
 8002d2a:	789b      	ldrb	r3, [r3, #2]
 8002d2c:	009b      	lsls	r3, r3, #2
 8002d2e:	b2db      	uxtb	r3, r3
 8002d30:	f003 030f 	and.w	r3, r3, #15
 8002d34:	73fb      	strb	r3, [r7, #15]
			(*ConfigReg) |= ( (Pin_Config_Value) << (GPIO_CRLH_GetPosition(PinConfig->GPIO_PinNumber)) ) ;
 8002d36:	7bfc      	ldrb	r4, [r7, #15]
 8002d38:	683b      	ldr	r3, [r7, #0]
 8002d3a:	881b      	ldrh	r3, [r3, #0]
 8002d3c:	4618      	mov	r0, r3
 8002d3e:	f7ff fecd 	bl	8002adc <GPIO_CRLH_GetPosition>
 8002d42:	4603      	mov	r3, r0
 8002d44:	fa04 f203 	lsl.w	r2, r4, r3
 8002d48:	68bb      	ldr	r3, [r7, #8]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	431a      	orrs	r2, r3
 8002d4e:	68bb      	ldr	r3, [r7, #8]
 8002d50:	601a      	str	r2, [r3, #0]
			(*ConfigReg) |= ( (Pin_Config_Value) << (GPIO_CRLH_GetPosition(PinConfig->GPIO_PinNumber)) ) ;

		}
	}

}
 8002d52:	e024      	b.n	8002d9e <MCAL_GPIO_Init+0x156>
			Pin_Config_Value = ( (((GPIO_MODE_INPUT_PULL_UP) << 2) | (0x0)) & 0x0F ) ;
 8002d54:	2308      	movs	r3, #8
 8002d56:	73fb      	strb	r3, [r7, #15]
			if (PinConfig->GPIO_MODE == GPIO_MODE_INPUT_PULL_UP) {
 8002d58:	683b      	ldr	r3, [r7, #0]
 8002d5a:	789b      	ldrb	r3, [r3, #2]
 8002d5c:	2b02      	cmp	r3, #2
 8002d5e:	d107      	bne.n	8002d70 <MCAL_GPIO_Init+0x128>
				GPIOx->ODR |= PinConfig->GPIO_PinNumber ;
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	68db      	ldr	r3, [r3, #12]
 8002d64:	683a      	ldr	r2, [r7, #0]
 8002d66:	8812      	ldrh	r2, [r2, #0]
 8002d68:	431a      	orrs	r2, r3
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	60da      	str	r2, [r3, #12]
 8002d6e:	e007      	b.n	8002d80 <MCAL_GPIO_Init+0x138>
				GPIOx->ODR &= ~(PinConfig->GPIO_PinNumber) ;
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	68db      	ldr	r3, [r3, #12]
 8002d74:	683a      	ldr	r2, [r7, #0]
 8002d76:	8812      	ldrh	r2, [r2, #0]
 8002d78:	43d2      	mvns	r2, r2
 8002d7a:	401a      	ands	r2, r3
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	60da      	str	r2, [r3, #12]
			(*ConfigReg) |= ( (Pin_Config_Value) << (GPIO_CRLH_GetPosition(PinConfig->GPIO_PinNumber)) ) ;
 8002d80:	7bfc      	ldrb	r4, [r7, #15]
 8002d82:	683b      	ldr	r3, [r7, #0]
 8002d84:	881b      	ldrh	r3, [r3, #0]
 8002d86:	4618      	mov	r0, r3
 8002d88:	f7ff fea8 	bl	8002adc <GPIO_CRLH_GetPosition>
 8002d8c:	4603      	mov	r3, r0
 8002d8e:	fa04 f203 	lsl.w	r2, r4, r3
 8002d92:	68bb      	ldr	r3, [r7, #8]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	431a      	orrs	r2, r3
 8002d98:	68bb      	ldr	r3, [r7, #8]
 8002d9a:	601a      	str	r2, [r3, #0]
}
 8002d9c:	e7ff      	b.n	8002d9e <MCAL_GPIO_Init+0x156>
 8002d9e:	bf00      	nop
 8002da0:	3714      	adds	r7, #20
 8002da2:	46bd      	mov	sp, r7
 8002da4:	bd90      	pop	{r4, r7, pc}

08002da6 <MCAL_GPIO_ReadPin>:
 * 		@param[in]		-	PinNumber : where PinNumber can be (GPIO_PIN_0 .. 15) according to @ref GPIO_PINS_define
 * 		@param[out]		- 	none
 * 		@return value		-	value of input pin according to @ref GPIO_PIN_state
 * 		Note			-	none
 */
uint8_t MCAL_GPIO_ReadPin (GPIO_TypeDef* GPIOx , uint16_t PinNumber) {
 8002da6:	b480      	push	{r7}
 8002da8:	b083      	sub	sp, #12
 8002daa:	af00      	add	r7, sp, #0
 8002dac:	6078      	str	r0, [r7, #4]
 8002dae:	460b      	mov	r3, r1
 8002db0:	807b      	strh	r3, [r7, #2]
	if ( (GPIOx->IDR & PinNumber) != (uint32_t)GPIO_PIN_RESET) {
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	689a      	ldr	r2, [r3, #8]
 8002db6:	887b      	ldrh	r3, [r7, #2]
 8002db8:	4013      	ands	r3, r2
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d001      	beq.n	8002dc2 <MCAL_GPIO_ReadPin+0x1c>
		return GPIO_PIN_SET ;
 8002dbe:	2301      	movs	r3, #1
 8002dc0:	e000      	b.n	8002dc4 <MCAL_GPIO_ReadPin+0x1e>
	}
	else {
		return GPIO_PIN_RESET ;
 8002dc2:	2300      	movs	r3, #0
	}
}
 8002dc4:	4618      	mov	r0, r3
 8002dc6:	370c      	adds	r7, #12
 8002dc8:	46bd      	mov	sp, r7
 8002dca:	bc80      	pop	{r7}
 8002dcc:	4770      	bx	lr

08002dce <MCAL_GPIO_WritePin>:
 * 		@param[in]		-	Value required to be written on the specified pin
 * 		@param[out]		- 	none
 * 		@return value		-	none
 * 		Note			-	none
 */
void MCAL_GPIO_WritePin (GPIO_TypeDef* GPIOx , uint16_t PinNumber , uint8_t Value) {
 8002dce:	b480      	push	{r7}
 8002dd0:	b083      	sub	sp, #12
 8002dd2:	af00      	add	r7, sp, #0
 8002dd4:	6078      	str	r0, [r7, #4]
 8002dd6:	460b      	mov	r3, r1
 8002dd8:	807b      	strh	r3, [r7, #2]
 8002dda:	4613      	mov	r3, r2
 8002ddc:	707b      	strb	r3, [r7, #1]
	if (Value != GPIO_PIN_RESET) {
 8002dde:	787b      	ldrb	r3, [r7, #1]
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d006      	beq.n	8002df2 <MCAL_GPIO_WritePin+0x24>
		GPIOx->ODR |= ((uint32_t)PinNumber) ;
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	68da      	ldr	r2, [r3, #12]
 8002de8:	887b      	ldrh	r3, [r7, #2]
 8002dea:	431a      	orrs	r2, r3
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	60da      	str	r2, [r3, #12]
	}
	else {
		GPIOx->ODR &= ~((uint32_t)PinNumber) ;
	}
}
 8002df0:	e006      	b.n	8002e00 <MCAL_GPIO_WritePin+0x32>
		GPIOx->ODR &= ~((uint32_t)PinNumber) ;
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	68da      	ldr	r2, [r3, #12]
 8002df6:	887b      	ldrh	r3, [r7, #2]
 8002df8:	43db      	mvns	r3, r3
 8002dfa:	401a      	ands	r2, r3
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	60da      	str	r2, [r3, #12]
}
 8002e00:	bf00      	nop
 8002e02:	370c      	adds	r7, #12
 8002e04:	46bd      	mov	sp, r7
 8002e06:	bc80      	pop	{r7}
 8002e08:	4770      	bx	lr
	...

08002e0c <MCAL_RCC_Get_SysClk_Freq>:
 * 		@param[in]		-	none
 * 		@param[out]		-	none
 * 		@return value		-	SysClk frequency
 * 		Note			-	none
 */
uint32_t MCAL_RCC_Get_SysClk_Freq (void) {
 8002e0c:	b480      	push	{r7}
 8002e0e:	af00      	add	r7, sp, #0
	switch ((RCC->CFGR >> 2) & 0b11) {
 8002e10:	4b0b      	ldr	r3, [pc, #44]	; (8002e40 <MCAL_RCC_Get_SysClk_Freq+0x34>)
 8002e12:	685b      	ldr	r3, [r3, #4]
 8002e14:	089b      	lsrs	r3, r3, #2
 8002e16:	f003 0303 	and.w	r3, r3, #3
 8002e1a:	2b02      	cmp	r3, #2
 8002e1c:	d00a      	beq.n	8002e34 <MCAL_RCC_Get_SysClk_Freq+0x28>
 8002e1e:	2b02      	cmp	r3, #2
 8002e20:	d80a      	bhi.n	8002e38 <MCAL_RCC_Get_SysClk_Freq+0x2c>
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d002      	beq.n	8002e2c <MCAL_RCC_Get_SysClk_Freq+0x20>
 8002e26:	2b01      	cmp	r3, #1
 8002e28:	d002      	beq.n	8002e30 <MCAL_RCC_Get_SysClk_Freq+0x24>
 8002e2a:	e005      	b.n	8002e38 <MCAL_RCC_Get_SysClk_Freq+0x2c>
	case 0 :
		return HSI_CLK ;
 8002e2c:	4b05      	ldr	r3, [pc, #20]	; (8002e44 <MCAL_RCC_Get_SysClk_Freq+0x38>)
 8002e2e:	e003      	b.n	8002e38 <MCAL_RCC_Get_SysClk_Freq+0x2c>
		break ;
	case 1 :
		return HSE_CLK ;
 8002e30:	4b05      	ldr	r3, [pc, #20]	; (8002e48 <MCAL_RCC_Get_SysClk_Freq+0x3c>)
 8002e32:	e001      	b.n	8002e38 <MCAL_RCC_Get_SysClk_Freq+0x2c>
		break ;
	case 2 :
		return PLL_CLK ;
 8002e34:	4b04      	ldr	r3, [pc, #16]	; (8002e48 <MCAL_RCC_Get_SysClk_Freq+0x3c>)
 8002e36:	e7ff      	b.n	8002e38 <MCAL_RCC_Get_SysClk_Freq+0x2c>
		break ;
	}
}
 8002e38:	4618      	mov	r0, r3
 8002e3a:	46bd      	mov	sp, r7
 8002e3c:	bc80      	pop	{r7}
 8002e3e:	4770      	bx	lr
 8002e40:	40021000 	.word	0x40021000
 8002e44:	007a1200 	.word	0x007a1200
 8002e48:	00f42400 	.word	0x00f42400

08002e4c <MCAL_RCC_Get_HClk_Freq>:
 * 		@param[in]		-	none
 * 		@param[out]		-	none
 * 		@return value		-	AHB clock frequency
 * 		Note			-	none
 */
uint32_t MCAL_RCC_Get_HClk_Freq (void) {
 8002e4c:	b580      	push	{r7, lr}
 8002e4e:	b084      	sub	sp, #16
 8002e50:	af00      	add	r7, sp, #0
	uint32_t prescaler ;
	uint32_t cfg_value ;
	uint32_t Hclk ;
	cfg_value = (RCC->CFGR >> 4) & 0b1111 ;
 8002e52:	4b2b      	ldr	r3, [pc, #172]	; (8002f00 <MCAL_RCC_Get_HClk_Freq+0xb4>)
 8002e54:	685b      	ldr	r3, [r3, #4]
 8002e56:	091b      	lsrs	r3, r3, #4
 8002e58:	f003 030f 	and.w	r3, r3, #15
 8002e5c:	60bb      	str	r3, [r7, #8]
 8002e5e:	68bb      	ldr	r3, [r7, #8]
 8002e60:	2b0f      	cmp	r3, #15
 8002e62:	d840      	bhi.n	8002ee6 <MCAL_RCC_Get_HClk_Freq+0x9a>
 8002e64:	a201      	add	r2, pc, #4	; (adr r2, 8002e6c <MCAL_RCC_Get_HClk_Freq+0x20>)
 8002e66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e6a:	bf00      	nop
 8002e6c:	08002ead 	.word	0x08002ead
 8002e70:	08002ead 	.word	0x08002ead
 8002e74:	08002ead 	.word	0x08002ead
 8002e78:	08002ead 	.word	0x08002ead
 8002e7c:	08002ead 	.word	0x08002ead
 8002e80:	08002ead 	.word	0x08002ead
 8002e84:	08002ead 	.word	0x08002ead
 8002e88:	08002ead 	.word	0x08002ead
 8002e8c:	08002eb3 	.word	0x08002eb3
 8002e90:	08002eb9 	.word	0x08002eb9
 8002e94:	08002ebf 	.word	0x08002ebf
 8002e98:	08002ec5 	.word	0x08002ec5
 8002e9c:	08002ecb 	.word	0x08002ecb
 8002ea0:	08002ed1 	.word	0x08002ed1
 8002ea4:	08002ed7 	.word	0x08002ed7
 8002ea8:	08002edf 	.word	0x08002edf
	case 0b0011 :
	case 0b0100 :
	case 0b0101 :
	case 0b0110 :
	case 0b0111 :
		prescaler = 1 ;
 8002eac:	2301      	movs	r3, #1
 8002eae:	60fb      	str	r3, [r7, #12]
		break ;
 8002eb0:	e019      	b.n	8002ee6 <MCAL_RCC_Get_HClk_Freq+0x9a>
	case 0b1000 :
		prescaler = 2 ;
 8002eb2:	2302      	movs	r3, #2
 8002eb4:	60fb      	str	r3, [r7, #12]
		break ;
 8002eb6:	e016      	b.n	8002ee6 <MCAL_RCC_Get_HClk_Freq+0x9a>
	case 0b1001 :
		prescaler = 4 ;
 8002eb8:	2304      	movs	r3, #4
 8002eba:	60fb      	str	r3, [r7, #12]
		break ;
 8002ebc:	e013      	b.n	8002ee6 <MCAL_RCC_Get_HClk_Freq+0x9a>
	case 0b1010 :
		prescaler = 8 ;
 8002ebe:	2308      	movs	r3, #8
 8002ec0:	60fb      	str	r3, [r7, #12]
		break ;
 8002ec2:	e010      	b.n	8002ee6 <MCAL_RCC_Get_HClk_Freq+0x9a>
	case 0b1011 :
		prescaler = 16 ;
 8002ec4:	2310      	movs	r3, #16
 8002ec6:	60fb      	str	r3, [r7, #12]
		break ;
 8002ec8:	e00d      	b.n	8002ee6 <MCAL_RCC_Get_HClk_Freq+0x9a>
	case 0b1100 :
		prescaler = 64 ;
 8002eca:	2340      	movs	r3, #64	; 0x40
 8002ecc:	60fb      	str	r3, [r7, #12]
		break ;
 8002ece:	e00a      	b.n	8002ee6 <MCAL_RCC_Get_HClk_Freq+0x9a>
	case 0b1101 :
		prescaler = 128 ;
 8002ed0:	2380      	movs	r3, #128	; 0x80
 8002ed2:	60fb      	str	r3, [r7, #12]
		break ;
 8002ed4:	e007      	b.n	8002ee6 <MCAL_RCC_Get_HClk_Freq+0x9a>
	case 0b1110 :
		prescaler = 256 ;
 8002ed6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002eda:	60fb      	str	r3, [r7, #12]
		break ;
 8002edc:	e003      	b.n	8002ee6 <MCAL_RCC_Get_HClk_Freq+0x9a>
	case 0b1111 :
		prescaler = 512 ;
 8002ede:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002ee2:	60fb      	str	r3, [r7, #12]
		break ;
 8002ee4:	bf00      	nop
	}
	Hclk = (uint32_t)(MCAL_RCC_Get_SysClk_Freq() / prescaler) ;
 8002ee6:	f7ff ff91 	bl	8002e0c <MCAL_RCC_Get_SysClk_Freq>
 8002eea:	4602      	mov	r2, r0
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ef2:	607b      	str	r3, [r7, #4]
	return Hclk ;
 8002ef4:	687b      	ldr	r3, [r7, #4]
}
 8002ef6:	4618      	mov	r0, r3
 8002ef8:	3710      	adds	r7, #16
 8002efa:	46bd      	mov	sp, r7
 8002efc:	bd80      	pop	{r7, pc}
 8002efe:	bf00      	nop
 8002f00:	40021000 	.word	0x40021000

08002f04 <MCAL_RCC_Get_PClk1_Freq>:
 * 		@param[in]		-	none
 * 		@param[out]		-	none
 * 		@return value		-	APB1 clock frequency
 * 		Note			-	none
 */
uint32_t MCAL_RCC_Get_PClk1_Freq (void) {
 8002f04:	b580      	push	{r7, lr}
 8002f06:	b084      	sub	sp, #16
 8002f08:	af00      	add	r7, sp, #0
	uint32_t prescaler ;
	uint32_t cfg_value ;
	uint32_t Pclk1 ;
	cfg_value = (RCC->CFGR >> 8) & 0b111 ;
 8002f0a:	4b1c      	ldr	r3, [pc, #112]	; (8002f7c <MCAL_RCC_Get_PClk1_Freq+0x78>)
 8002f0c:	685b      	ldr	r3, [r3, #4]
 8002f0e:	0a1b      	lsrs	r3, r3, #8
 8002f10:	f003 0307 	and.w	r3, r3, #7
 8002f14:	60bb      	str	r3, [r7, #8]
 8002f16:	68bb      	ldr	r3, [r7, #8]
 8002f18:	2b07      	cmp	r3, #7
 8002f1a:	d822      	bhi.n	8002f62 <MCAL_RCC_Get_PClk1_Freq+0x5e>
 8002f1c:	a201      	add	r2, pc, #4	; (adr r2, 8002f24 <MCAL_RCC_Get_PClk1_Freq+0x20>)
 8002f1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f22:	bf00      	nop
 8002f24:	08002f45 	.word	0x08002f45
 8002f28:	08002f45 	.word	0x08002f45
 8002f2c:	08002f45 	.word	0x08002f45
 8002f30:	08002f45 	.word	0x08002f45
 8002f34:	08002f4b 	.word	0x08002f4b
 8002f38:	08002f51 	.word	0x08002f51
 8002f3c:	08002f57 	.word	0x08002f57
 8002f40:	08002f5d 	.word	0x08002f5d
	switch (cfg_value) {
	case 0b000 :
	case 0b001 :
	case 0b010 :
	case 0b011 :
		prescaler = 1 ;
 8002f44:	2301      	movs	r3, #1
 8002f46:	60fb      	str	r3, [r7, #12]
		break ;
 8002f48:	e00b      	b.n	8002f62 <MCAL_RCC_Get_PClk1_Freq+0x5e>
	case 0b100 :
		prescaler = 2 ;
 8002f4a:	2302      	movs	r3, #2
 8002f4c:	60fb      	str	r3, [r7, #12]
		break ;
 8002f4e:	e008      	b.n	8002f62 <MCAL_RCC_Get_PClk1_Freq+0x5e>
	case 0b101 :
		prescaler = 4 ;
 8002f50:	2304      	movs	r3, #4
 8002f52:	60fb      	str	r3, [r7, #12]
		break ;
 8002f54:	e005      	b.n	8002f62 <MCAL_RCC_Get_PClk1_Freq+0x5e>
	case 0b110 :
		prescaler = 8 ;
 8002f56:	2308      	movs	r3, #8
 8002f58:	60fb      	str	r3, [r7, #12]
		break ;
 8002f5a:	e002      	b.n	8002f62 <MCAL_RCC_Get_PClk1_Freq+0x5e>
	case 0b111 :
		prescaler = 16 ;
 8002f5c:	2310      	movs	r3, #16
 8002f5e:	60fb      	str	r3, [r7, #12]
		break ;
 8002f60:	bf00      	nop
	}
	Pclk1 = (uint32_t)(MCAL_RCC_Get_HClk_Freq() / prescaler) ;
 8002f62:	f7ff ff73 	bl	8002e4c <MCAL_RCC_Get_HClk_Freq>
 8002f66:	4602      	mov	r2, r0
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f6e:	607b      	str	r3, [r7, #4]
	return Pclk1 ;
 8002f70:	687b      	ldr	r3, [r7, #4]
}
 8002f72:	4618      	mov	r0, r3
 8002f74:	3710      	adds	r7, #16
 8002f76:	46bd      	mov	sp, r7
 8002f78:	bd80      	pop	{r7, pc}
 8002f7a:	bf00      	nop
 8002f7c:	40021000 	.word	0x40021000

08002f80 <MCAL_RCC_Get_PClk2_Freq>:
 * 		@param[in]		-	none
 * 		@param[out]		-	none
 * 		@return value		-	APB2 clock frequency
 * 		Note			-	none
 */
uint32_t MCAL_RCC_Get_PClk2_Freq (void) {
 8002f80:	b580      	push	{r7, lr}
 8002f82:	b084      	sub	sp, #16
 8002f84:	af00      	add	r7, sp, #0
	uint32_t prescaler ;
	uint32_t cfg_value ;
	uint32_t Pclk2 ;
	cfg_value = (RCC->CFGR >> 11) & 0b111 ;
 8002f86:	4b1c      	ldr	r3, [pc, #112]	; (8002ff8 <MCAL_RCC_Get_PClk2_Freq+0x78>)
 8002f88:	685b      	ldr	r3, [r3, #4]
 8002f8a:	0adb      	lsrs	r3, r3, #11
 8002f8c:	f003 0307 	and.w	r3, r3, #7
 8002f90:	60bb      	str	r3, [r7, #8]
 8002f92:	68bb      	ldr	r3, [r7, #8]
 8002f94:	2b07      	cmp	r3, #7
 8002f96:	d822      	bhi.n	8002fde <MCAL_RCC_Get_PClk2_Freq+0x5e>
 8002f98:	a201      	add	r2, pc, #4	; (adr r2, 8002fa0 <MCAL_RCC_Get_PClk2_Freq+0x20>)
 8002f9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f9e:	bf00      	nop
 8002fa0:	08002fc1 	.word	0x08002fc1
 8002fa4:	08002fc1 	.word	0x08002fc1
 8002fa8:	08002fc1 	.word	0x08002fc1
 8002fac:	08002fc1 	.word	0x08002fc1
 8002fb0:	08002fc7 	.word	0x08002fc7
 8002fb4:	08002fcd 	.word	0x08002fcd
 8002fb8:	08002fd3 	.word	0x08002fd3
 8002fbc:	08002fd9 	.word	0x08002fd9
	switch (cfg_value) {
	case 0b000 :
	case 0b001 :
	case 0b010 :
	case 0b011 :
		prescaler = 1 ;
 8002fc0:	2301      	movs	r3, #1
 8002fc2:	60fb      	str	r3, [r7, #12]
		break ;
 8002fc4:	e00b      	b.n	8002fde <MCAL_RCC_Get_PClk2_Freq+0x5e>
	case 0b100 :
		prescaler = 2 ;
 8002fc6:	2302      	movs	r3, #2
 8002fc8:	60fb      	str	r3, [r7, #12]
		break ;
 8002fca:	e008      	b.n	8002fde <MCAL_RCC_Get_PClk2_Freq+0x5e>
	case 0b101 :
		prescaler = 4 ;
 8002fcc:	2304      	movs	r3, #4
 8002fce:	60fb      	str	r3, [r7, #12]
		break ;
 8002fd0:	e005      	b.n	8002fde <MCAL_RCC_Get_PClk2_Freq+0x5e>
	case 0b110 :
		prescaler = 8 ;
 8002fd2:	2308      	movs	r3, #8
 8002fd4:	60fb      	str	r3, [r7, #12]
		break ;
 8002fd6:	e002      	b.n	8002fde <MCAL_RCC_Get_PClk2_Freq+0x5e>
	case 0b111 :
		prescaler = 16 ;
 8002fd8:	2310      	movs	r3, #16
 8002fda:	60fb      	str	r3, [r7, #12]
		break ;
 8002fdc:	bf00      	nop
	}
	Pclk2 = (uint32_t)(MCAL_RCC_Get_HClk_Freq() / prescaler) ;
 8002fde:	f7ff ff35 	bl	8002e4c <MCAL_RCC_Get_HClk_Freq>
 8002fe2:	4602      	mov	r2, r0
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fea:	607b      	str	r3, [r7, #4]
	return Pclk2 ;
 8002fec:	687b      	ldr	r3, [r7, #4]
}
 8002fee:	4618      	mov	r0, r3
 8002ff0:	3710      	adds	r7, #16
 8002ff2:	46bd      	mov	sp, r7
 8002ff4:	bd80      	pop	{r7, pc}
 8002ff6:	bf00      	nop
 8002ff8:	40021000 	.word	0x40021000

08002ffc <MCAL_USART_Init>:
 * 						USART configurations required
 * 		@param[out]		-	none
 * 		@return value		-	none
 * 		Note			-	Configuration MACROS can be found in USART.h
 */
void MCAL_USART_Init(USART_TypeDef* USARTx , USART_Config_t* USART_Config) {
 8002ffc:	b580      	push	{r7, lr}
 8002ffe:	b084      	sub	sp, #16
 8003000:	af00      	add	r7, sp, #0
 8003002:	6078      	str	r0, [r7, #4]
 8003004:	6039      	str	r1, [r7, #0]
	uint32_t pclk ;
	uint32_t BRR_value ;

	// enable USART clock
	if (USARTx == USART1) {
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	4a5a      	ldr	r2, [pc, #360]	; (8003174 <MCAL_USART_Init+0x178>)
 800300a:	4293      	cmp	r3, r2
 800300c:	d109      	bne.n	8003022 <MCAL_USART_Init+0x26>
		CLK_EN_USART1() ;
 800300e:	4b5a      	ldr	r3, [pc, #360]	; (8003178 <MCAL_USART_Init+0x17c>)
 8003010:	699b      	ldr	r3, [r3, #24]
 8003012:	4a59      	ldr	r2, [pc, #356]	; (8003178 <MCAL_USART_Init+0x17c>)
 8003014:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003018:	6193      	str	r3, [r2, #24]
		g_USART_Cfg[0] = USART_Config ;
 800301a:	4a58      	ldr	r2, [pc, #352]	; (800317c <MCAL_USART_Init+0x180>)
 800301c:	683b      	ldr	r3, [r7, #0]
 800301e:	6013      	str	r3, [r2, #0]
 8003020:	e01a      	b.n	8003058 <MCAL_USART_Init+0x5c>
	}
	else if (USARTx == USART2) {
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	4a56      	ldr	r2, [pc, #344]	; (8003180 <MCAL_USART_Init+0x184>)
 8003026:	4293      	cmp	r3, r2
 8003028:	d109      	bne.n	800303e <MCAL_USART_Init+0x42>
		CLK_EN_USART2() ;
 800302a:	4b53      	ldr	r3, [pc, #332]	; (8003178 <MCAL_USART_Init+0x17c>)
 800302c:	69db      	ldr	r3, [r3, #28]
 800302e:	4a52      	ldr	r2, [pc, #328]	; (8003178 <MCAL_USART_Init+0x17c>)
 8003030:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003034:	61d3      	str	r3, [r2, #28]
		g_USART_Cfg[1] = USART_Config ;
 8003036:	4a51      	ldr	r2, [pc, #324]	; (800317c <MCAL_USART_Init+0x180>)
 8003038:	683b      	ldr	r3, [r7, #0]
 800303a:	6053      	str	r3, [r2, #4]
 800303c:	e00c      	b.n	8003058 <MCAL_USART_Init+0x5c>
	}
	else if (USARTx == USART3) {
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	4a50      	ldr	r2, [pc, #320]	; (8003184 <MCAL_USART_Init+0x188>)
 8003042:	4293      	cmp	r3, r2
 8003044:	d108      	bne.n	8003058 <MCAL_USART_Init+0x5c>
		CLK_EN_USART3() ;
 8003046:	4b4c      	ldr	r3, [pc, #304]	; (8003178 <MCAL_USART_Init+0x17c>)
 8003048:	69db      	ldr	r3, [r3, #28]
 800304a:	4a4b      	ldr	r2, [pc, #300]	; (8003178 <MCAL_USART_Init+0x17c>)
 800304c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003050:	61d3      	str	r3, [r2, #28]
		g_USART_Cfg[2] = USART_Config ;
 8003052:	4a4a      	ldr	r2, [pc, #296]	; (800317c <MCAL_USART_Init+0x180>)
 8003054:	683b      	ldr	r3, [r7, #0]
 8003056:	6093      	str	r3, [r2, #8]
         //return Error Not_Ok

	}

	// enable USART
	USARTx->CR1 |= ((uint32_t)1 << 13) ;
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	68db      	ldr	r3, [r3, #12]
 800305c:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	60da      	str	r2, [r3, #12]

	// initialize USART mode
	USARTx->CR1 |= USART_Config->Mode ;
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	68db      	ldr	r3, [r3, #12]
 8003068:	683a      	ldr	r2, [r7, #0]
 800306a:	7812      	ldrb	r2, [r2, #0]
 800306c:	431a      	orrs	r2, r3
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	60da      	str	r2, [r3, #12]

	// initialize USART payload length
	USARTx->CR1 |= USART_Config->PayLoad_Length ;
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	68db      	ldr	r3, [r3, #12]
 8003076:	683a      	ldr	r2, [r7, #0]
 8003078:	8912      	ldrh	r2, [r2, #8]
 800307a:	431a      	orrs	r2, r3
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	60da      	str	r2, [r3, #12]

	// initialize USART parity
	USARTx->CR1 |= USART_Config->Parity ;
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	68db      	ldr	r3, [r3, #12]
 8003084:	683a      	ldr	r2, [r7, #0]
 8003086:	8952      	ldrh	r2, [r2, #10]
 8003088:	431a      	orrs	r2, r3
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	60da      	str	r2, [r3, #12]

	// initialize USART stop bits
	USARTx->CR2 |= USART_Config->StopBits ;
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	691b      	ldr	r3, [r3, #16]
 8003092:	683a      	ldr	r2, [r7, #0]
 8003094:	8992      	ldrh	r2, [r2, #12]
 8003096:	431a      	orrs	r2, r3
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	611a      	str	r2, [r3, #16]

	// initialize USART Hardware flow control
	USARTx->CR3 |= USART_Config->HW_FlowControl ;
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	695b      	ldr	r3, [r3, #20]
 80030a0:	683a      	ldr	r2, [r7, #0]
 80030a2:	89d2      	ldrh	r2, [r2, #14]
 80030a4:	431a      	orrs	r2, r3
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	615a      	str	r2, [r3, #20]

	// Baud rate configuration
	if (USARTx == USART1) {
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	4a31      	ldr	r2, [pc, #196]	; (8003174 <MCAL_USART_Init+0x178>)
 80030ae:	4293      	cmp	r3, r2
 80030b0:	d103      	bne.n	80030ba <MCAL_USART_Init+0xbe>
		pclk = MCAL_RCC_Get_PClk2_Freq() ;
 80030b2:	f7ff ff65 	bl	8002f80 <MCAL_RCC_Get_PClk2_Freq>
 80030b6:	60f8      	str	r0, [r7, #12]
 80030b8:	e002      	b.n	80030c0 <MCAL_USART_Init+0xc4>
	}
	else {
		pclk = MCAL_RCC_Get_PClk1_Freq() ;
 80030ba:	f7ff ff23 	bl	8002f04 <MCAL_RCC_Get_PClk1_Freq>
 80030be:	60f8      	str	r0, [r7, #12]
	}

	BRR_value = USART_BRR_REG_VALUE(pclk,USART_Config->BaudRate) ;
 80030c0:	683b      	ldr	r3, [r7, #0]
 80030c2:	685b      	ldr	r3, [r3, #4]
 80030c4:	011b      	lsls	r3, r3, #4
 80030c6:	68fa      	ldr	r2, [r7, #12]
 80030c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80030cc:	0119      	lsls	r1, r3, #4
 80030ce:	68fa      	ldr	r2, [r7, #12]
 80030d0:	4613      	mov	r3, r2
 80030d2:	009b      	lsls	r3, r3, #2
 80030d4:	4413      	add	r3, r2
 80030d6:	009a      	lsls	r2, r3, #2
 80030d8:	441a      	add	r2, r3
 80030da:	683b      	ldr	r3, [r7, #0]
 80030dc:	685b      	ldr	r3, [r3, #4]
 80030de:	009b      	lsls	r3, r3, #2
 80030e0:	fbb2 f2f3 	udiv	r2, r2, r3
 80030e4:	683b      	ldr	r3, [r7, #0]
 80030e6:	685b      	ldr	r3, [r3, #4]
 80030e8:	011b      	lsls	r3, r3, #4
 80030ea:	68f8      	ldr	r0, [r7, #12]
 80030ec:	fbb0 f3f3 	udiv	r3, r0, r3
 80030f0:	2064      	movs	r0, #100	; 0x64
 80030f2:	fb00 f303 	mul.w	r3, r0, r3
 80030f6:	1ad3      	subs	r3, r2, r3
 80030f8:	011b      	lsls	r3, r3, #4
 80030fa:	4a23      	ldr	r2, [pc, #140]	; (8003188 <MCAL_USART_Init+0x18c>)
 80030fc:	fba2 2303 	umull	r2, r3, r2, r3
 8003100:	095b      	lsrs	r3, r3, #5
 8003102:	f003 030f 	and.w	r3, r3, #15
 8003106:	430b      	orrs	r3, r1
 8003108:	60bb      	str	r3, [r7, #8]
	USARTx->BRR |= BRR_value ;
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	689a      	ldr	r2, [r3, #8]
 800310e:	68bb      	ldr	r3, [r7, #8]
 8003110:	431a      	orrs	r2, r3
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	609a      	str	r2, [r3, #8]

	// enable / disable interrupt
	if (USART_Config->IRQ_Enable != USART_IRQ_ENABLE_NONE) {
 8003116:	683b      	ldr	r3, [r7, #0]
 8003118:	8a1b      	ldrh	r3, [r3, #16]
 800311a:	2b00      	cmp	r3, #0
 800311c:	d026      	beq.n	800316c <MCAL_USART_Init+0x170>
		USARTx->CR1 |= USART_Config->IRQ_Enable ;
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	68db      	ldr	r3, [r3, #12]
 8003122:	683a      	ldr	r2, [r7, #0]
 8003124:	8a12      	ldrh	r2, [r2, #16]
 8003126:	431a      	orrs	r2, r3
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	60da      	str	r2, [r3, #12]

		// enable NVIC
		if (USARTx == USART1){
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	4a11      	ldr	r2, [pc, #68]	; (8003174 <MCAL_USART_Init+0x178>)
 8003130:	4293      	cmp	r3, r2
 8003132:	d106      	bne.n	8003142 <MCAL_USART_Init+0x146>
			NVIC_IRQ37_USART1_ENABLE() ;
 8003134:	4b15      	ldr	r3, [pc, #84]	; (800318c <MCAL_USART_Init+0x190>)
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	4a14      	ldr	r2, [pc, #80]	; (800318c <MCAL_USART_Init+0x190>)
 800313a:	f043 0320 	orr.w	r3, r3, #32
 800313e:	6013      	str	r3, [r2, #0]
			NVIC_IRQ39_USART3_ENABLE() ;
		}
		else{}
	}
	else{}
}
 8003140:	e014      	b.n	800316c <MCAL_USART_Init+0x170>
		else if (USARTx == USART2) {
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	4a0e      	ldr	r2, [pc, #56]	; (8003180 <MCAL_USART_Init+0x184>)
 8003146:	4293      	cmp	r3, r2
 8003148:	d106      	bne.n	8003158 <MCAL_USART_Init+0x15c>
			NVIC_IRQ38_USART2_ENABLE() ;
 800314a:	4b10      	ldr	r3, [pc, #64]	; (800318c <MCAL_USART_Init+0x190>)
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	4a0f      	ldr	r2, [pc, #60]	; (800318c <MCAL_USART_Init+0x190>)
 8003150:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003154:	6013      	str	r3, [r2, #0]
}
 8003156:	e009      	b.n	800316c <MCAL_USART_Init+0x170>
		else if (USARTx == USART3) {
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	4a0a      	ldr	r2, [pc, #40]	; (8003184 <MCAL_USART_Init+0x188>)
 800315c:	4293      	cmp	r3, r2
 800315e:	d105      	bne.n	800316c <MCAL_USART_Init+0x170>
			NVIC_IRQ39_USART3_ENABLE() ;
 8003160:	4b0a      	ldr	r3, [pc, #40]	; (800318c <MCAL_USART_Init+0x190>)
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	4a09      	ldr	r2, [pc, #36]	; (800318c <MCAL_USART_Init+0x190>)
 8003166:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800316a:	6013      	str	r3, [r2, #0]
}
 800316c:	bf00      	nop
 800316e:	3710      	adds	r7, #16
 8003170:	46bd      	mov	sp, r7
 8003172:	bd80      	pop	{r7, pc}
 8003174:	40013800 	.word	0x40013800
 8003178:	40021000 	.word	0x40021000
 800317c:	2000117c 	.word	0x2000117c
 8003180:	40004400 	.word	0x40004400
 8003184:	40004800 	.word	0x40004800
 8003188:	51eb851f 	.word	0x51eb851f
 800318c:	e000e104 	.word	0xe000e104

08003190 <MCAL_USART_GPIO_Pins>:
 * 		@param[out]		-	none
 * 		@return value		-	none
 * 		Note			-	required AF modes can be found in TRM @ section 9.1.11 GPIO configurations for device peripherals
 *						AFIO pins can be found in TRM @ section 9.3 Alternate function I/O
 */
void MCAL_USART_GPIO_Pins (USART_TypeDef* USARTx) {
 8003190:	b580      	push	{r7, lr}
 8003192:	b088      	sub	sp, #32
 8003194:	af00      	add	r7, sp, #0
 8003196:	6078      	str	r0, [r7, #4]
	/*
	 * USARTx_TX	Alternate function push-pull
	 * USARTx_RX	Input floating / Input pull-up
	 */
	if (USARTx == USART1) {
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	4a3d      	ldr	r2, [pc, #244]	; (8003290 <MCAL_USART_GPIO_Pins+0x100>)
 800319c:	4293      	cmp	r3, r2
 800319e:	d124      	bne.n	80031ea <MCAL_USART_GPIO_Pins+0x5a>
		/*
		 * USART1_TX	PA9
		 * USART1_RX	PA10
		 */
		CLK_EN_GPIOA() ;
 80031a0:	4b3c      	ldr	r3, [pc, #240]	; (8003294 <MCAL_USART_GPIO_Pins+0x104>)
 80031a2:	699b      	ldr	r3, [r3, #24]
 80031a4:	4a3b      	ldr	r2, [pc, #236]	; (8003294 <MCAL_USART_GPIO_Pins+0x104>)
 80031a6:	f043 0304 	orr.w	r3, r3, #4
 80031aa:	6193      	str	r3, [r2, #24]
		CLK_EN_AFIO() ;
 80031ac:	4b39      	ldr	r3, [pc, #228]	; (8003294 <MCAL_USART_GPIO_Pins+0x104>)
 80031ae:	699b      	ldr	r3, [r3, #24]
 80031b0:	4a38      	ldr	r2, [pc, #224]	; (8003294 <MCAL_USART_GPIO_Pins+0x104>)
 80031b2:	f043 0301 	orr.w	r3, r3, #1
 80031b6:	6193      	str	r3, [r2, #24]

		GPIO_PinConfig_t usart_tx_config ;
		usart_tx_config.GPIO_MODE = GPIO_MODE_AF_PUSH_PULL ;
 80031b8:	2306      	movs	r3, #6
 80031ba:	77bb      	strb	r3, [r7, #30]
		usart_tx_config .GPIO_Output_Speed = GPIO_SPEED_10M ;
 80031bc:	2301      	movs	r3, #1
 80031be:	77fb      	strb	r3, [r7, #31]
		usart_tx_config .GPIO_PinNumber = GPIO_PIN_9 ;
 80031c0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80031c4:	83bb      	strh	r3, [r7, #28]
		MCAL_GPIO_Init(GPIOA, &usart_tx_config) ;
 80031c6:	f107 031c 	add.w	r3, r7, #28
 80031ca:	4619      	mov	r1, r3
 80031cc:	4832      	ldr	r0, [pc, #200]	; (8003298 <MCAL_USART_GPIO_Pins+0x108>)
 80031ce:	f7ff fd3b 	bl	8002c48 <MCAL_GPIO_Init>

		GPIO_PinConfig_t usart_rx_config ;
		usart_rx_config.GPIO_MODE = GPIO_MODE_INPUT_FLOATING ;
 80031d2:	2301      	movs	r3, #1
 80031d4:	76bb      	strb	r3, [r7, #26]
		usart_rx_config.GPIO_PinNumber = GPIO_PIN_10 ;
 80031d6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80031da:	833b      	strh	r3, [r7, #24]
		MCAL_GPIO_Init(GPIOA, &usart_rx_config) ;
 80031dc:	f107 0318 	add.w	r3, r7, #24
 80031e0:	4619      	mov	r1, r3
 80031e2:	482d      	ldr	r0, [pc, #180]	; (8003298 <MCAL_USART_GPIO_Pins+0x108>)
 80031e4:	f7ff fd30 	bl	8002c48 <MCAL_GPIO_Init>
		usart_rx_config.GPIO_PinNumber = GPIO_PIN_11 ;
		MCAL_GPIO_Init(GPIOB, &usart_rx_config) ;
	}
	else{}

}
 80031e8:	e04e      	b.n	8003288 <MCAL_USART_GPIO_Pins+0xf8>
	else if (USARTx == USART2) {
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	4a2b      	ldr	r2, [pc, #172]	; (800329c <MCAL_USART_GPIO_Pins+0x10c>)
 80031ee:	4293      	cmp	r3, r2
 80031f0:	d122      	bne.n	8003238 <MCAL_USART_GPIO_Pins+0xa8>
		CLK_EN_GPIOA() ;
 80031f2:	4b28      	ldr	r3, [pc, #160]	; (8003294 <MCAL_USART_GPIO_Pins+0x104>)
 80031f4:	699b      	ldr	r3, [r3, #24]
 80031f6:	4a27      	ldr	r2, [pc, #156]	; (8003294 <MCAL_USART_GPIO_Pins+0x104>)
 80031f8:	f043 0304 	orr.w	r3, r3, #4
 80031fc:	6193      	str	r3, [r2, #24]
		CLK_EN_AFIO() ;
 80031fe:	4b25      	ldr	r3, [pc, #148]	; (8003294 <MCAL_USART_GPIO_Pins+0x104>)
 8003200:	699b      	ldr	r3, [r3, #24]
 8003202:	4a24      	ldr	r2, [pc, #144]	; (8003294 <MCAL_USART_GPIO_Pins+0x104>)
 8003204:	f043 0301 	orr.w	r3, r3, #1
 8003208:	6193      	str	r3, [r2, #24]
		usart_tx_config.GPIO_MODE = GPIO_MODE_AF_PUSH_PULL ;
 800320a:	2306      	movs	r3, #6
 800320c:	75bb      	strb	r3, [r7, #22]
		usart_tx_config .GPIO_Output_Speed = GPIO_SPEED_10M ;
 800320e:	2301      	movs	r3, #1
 8003210:	75fb      	strb	r3, [r7, #23]
		usart_tx_config .GPIO_PinNumber = GPIO_PIN_2 ;
 8003212:	2304      	movs	r3, #4
 8003214:	82bb      	strh	r3, [r7, #20]
		MCAL_GPIO_Init(GPIOA, &usart_tx_config) ;
 8003216:	f107 0314 	add.w	r3, r7, #20
 800321a:	4619      	mov	r1, r3
 800321c:	481e      	ldr	r0, [pc, #120]	; (8003298 <MCAL_USART_GPIO_Pins+0x108>)
 800321e:	f7ff fd13 	bl	8002c48 <MCAL_GPIO_Init>
		usart_rx_config.GPIO_MODE = GPIO_MODE_INPUT_FLOATING ;
 8003222:	2301      	movs	r3, #1
 8003224:	74bb      	strb	r3, [r7, #18]
		usart_rx_config.GPIO_PinNumber = GPIO_PIN_3 ;
 8003226:	2308      	movs	r3, #8
 8003228:	823b      	strh	r3, [r7, #16]
		MCAL_GPIO_Init(GPIOA, &usart_rx_config) ;
 800322a:	f107 0310 	add.w	r3, r7, #16
 800322e:	4619      	mov	r1, r3
 8003230:	4819      	ldr	r0, [pc, #100]	; (8003298 <MCAL_USART_GPIO_Pins+0x108>)
 8003232:	f7ff fd09 	bl	8002c48 <MCAL_GPIO_Init>
}
 8003236:	e027      	b.n	8003288 <MCAL_USART_GPIO_Pins+0xf8>
	else if (USARTx == USART3) {
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	4a19      	ldr	r2, [pc, #100]	; (80032a0 <MCAL_USART_GPIO_Pins+0x110>)
 800323c:	4293      	cmp	r3, r2
 800323e:	d123      	bne.n	8003288 <MCAL_USART_GPIO_Pins+0xf8>
		CLK_EN_GPIOB() ;
 8003240:	4b14      	ldr	r3, [pc, #80]	; (8003294 <MCAL_USART_GPIO_Pins+0x104>)
 8003242:	699b      	ldr	r3, [r3, #24]
 8003244:	4a13      	ldr	r2, [pc, #76]	; (8003294 <MCAL_USART_GPIO_Pins+0x104>)
 8003246:	f043 0308 	orr.w	r3, r3, #8
 800324a:	6193      	str	r3, [r2, #24]
		CLK_EN_AFIO() ;
 800324c:	4b11      	ldr	r3, [pc, #68]	; (8003294 <MCAL_USART_GPIO_Pins+0x104>)
 800324e:	699b      	ldr	r3, [r3, #24]
 8003250:	4a10      	ldr	r2, [pc, #64]	; (8003294 <MCAL_USART_GPIO_Pins+0x104>)
 8003252:	f043 0301 	orr.w	r3, r3, #1
 8003256:	6193      	str	r3, [r2, #24]
		usart_tx_config.GPIO_MODE = GPIO_MODE_AF_PUSH_PULL ;
 8003258:	2306      	movs	r3, #6
 800325a:	73bb      	strb	r3, [r7, #14]
		usart_tx_config .GPIO_Output_Speed = GPIO_SPEED_10M ;
 800325c:	2301      	movs	r3, #1
 800325e:	73fb      	strb	r3, [r7, #15]
		usart_tx_config .GPIO_PinNumber = GPIO_PIN_10 ;
 8003260:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003264:	81bb      	strh	r3, [r7, #12]
		MCAL_GPIO_Init(GPIOB, &usart_tx_config) ;
 8003266:	f107 030c 	add.w	r3, r7, #12
 800326a:	4619      	mov	r1, r3
 800326c:	480d      	ldr	r0, [pc, #52]	; (80032a4 <MCAL_USART_GPIO_Pins+0x114>)
 800326e:	f7ff fceb 	bl	8002c48 <MCAL_GPIO_Init>
		usart_rx_config.GPIO_MODE = GPIO_MODE_INPUT_FLOATING ;
 8003272:	2301      	movs	r3, #1
 8003274:	72bb      	strb	r3, [r7, #10]
		usart_rx_config.GPIO_PinNumber = GPIO_PIN_11 ;
 8003276:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800327a:	813b      	strh	r3, [r7, #8]
		MCAL_GPIO_Init(GPIOB, &usart_rx_config) ;
 800327c:	f107 0308 	add.w	r3, r7, #8
 8003280:	4619      	mov	r1, r3
 8003282:	4808      	ldr	r0, [pc, #32]	; (80032a4 <MCAL_USART_GPIO_Pins+0x114>)
 8003284:	f7ff fce0 	bl	8002c48 <MCAL_GPIO_Init>
}
 8003288:	bf00      	nop
 800328a:	3720      	adds	r7, #32
 800328c:	46bd      	mov	sp, r7
 800328e:	bd80      	pop	{r7, pc}
 8003290:	40013800 	.word	0x40013800
 8003294:	40021000 	.word	0x40021000
 8003298:	40010800 	.word	0x40010800
 800329c:	40004400 	.word	0x40004400
 80032a0:	40004800 	.word	0x40004800
 80032a4:	40010c00 	.word	0x40010c00

080032a8 <MCAL_USART_Send_Data>:
 * 						polling mechanism state (enable / disable)
 * 		@param[out]		-	none
 * 		@return value		-	none
 * 		Note			-	none
 */
void MCAL_USART_Send_Data(USART_TypeDef* USARTx , uint16_t* data , EN_Polling_Mechanism polling_state) {
 80032a8:	b480      	push	{r7}
 80032aa:	b085      	sub	sp, #20
 80032ac:	af00      	add	r7, sp, #0
 80032ae:	60f8      	str	r0, [r7, #12]
 80032b0:	60b9      	str	r1, [r7, #8]
 80032b2:	4613      	mov	r3, r2
 80032b4:	71fb      	strb	r3, [r7, #7]

	if (polling_state == enable) {
 80032b6:	79fb      	ldrb	r3, [r7, #7]
 80032b8:	2b01      	cmp	r3, #1
 80032ba:	d106      	bne.n	80032ca <MCAL_USART_Send_Data+0x22>
		 * 	The TXE bit is set by hardware and it indicates:
			• The data has been moved from TDR to the shift register and the data transmission has started.
			• The TDR register is empty.
			• The next data can be written in the USART_DR register without overwriting the previous data.
		 */
		while (!(USARTx->SR & ((uint32_t)1 << 7))){}
 80032bc:	bf00      	nop
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d0f9      	beq.n	80032be <MCAL_USART_Send_Data+0x16>
	}
	if (USARTx == USART1) {
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	4a2b      	ldr	r2, [pc, #172]	; (800337c <MCAL_USART_Send_Data+0xd4>)
 80032ce:	4293      	cmp	r3, r2
 80032d0:	d117      	bne.n	8003302 <MCAL_USART_Send_Data+0x5a>
		if (g_USART_Cfg[0]->PayLoad_Length == USART_PAYLOAD_8B) {
 80032d2:	4b2b      	ldr	r3, [pc, #172]	; (8003380 <MCAL_USART_Send_Data+0xd8>)
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	891b      	ldrh	r3, [r3, #8]
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d105      	bne.n	80032e8 <MCAL_USART_Send_Data+0x40>
			USARTx->DR = (*data) & (uint8_t)0xFF ;
 80032dc:	68bb      	ldr	r3, [r7, #8]
 80032de:	881b      	ldrh	r3, [r3, #0]
 80032e0:	b2da      	uxtb	r2, r3
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	605a      	str	r2, [r3, #4]
			USARTx->DR = (*data) & (uint16_t)0x1FF ;
		}
		else{}
	}
	else{}
}
 80032e6:	e043      	b.n	8003370 <MCAL_USART_Send_Data+0xc8>
		else if (g_USART_Cfg[0]->PayLoad_Length == USART_PAYLOAD_9B) {
 80032e8:	4b25      	ldr	r3, [pc, #148]	; (8003380 <MCAL_USART_Send_Data+0xd8>)
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	891b      	ldrh	r3, [r3, #8]
 80032ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80032f2:	d13d      	bne.n	8003370 <MCAL_USART_Send_Data+0xc8>
			USARTx->DR = (*data) & (uint16_t)0x1FF ;
 80032f4:	68bb      	ldr	r3, [r7, #8]
 80032f6:	881b      	ldrh	r3, [r3, #0]
 80032f8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	605a      	str	r2, [r3, #4]
}
 8003300:	e036      	b.n	8003370 <MCAL_USART_Send_Data+0xc8>
	else if (USARTx == USART2) {
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	4a1f      	ldr	r2, [pc, #124]	; (8003384 <MCAL_USART_Send_Data+0xdc>)
 8003306:	4293      	cmp	r3, r2
 8003308:	d117      	bne.n	800333a <MCAL_USART_Send_Data+0x92>
		if (g_USART_Cfg[1]->PayLoad_Length == USART_PAYLOAD_8B) {
 800330a:	4b1d      	ldr	r3, [pc, #116]	; (8003380 <MCAL_USART_Send_Data+0xd8>)
 800330c:	685b      	ldr	r3, [r3, #4]
 800330e:	891b      	ldrh	r3, [r3, #8]
 8003310:	2b00      	cmp	r3, #0
 8003312:	d105      	bne.n	8003320 <MCAL_USART_Send_Data+0x78>
			USARTx->DR = (*data) & (uint8_t)0xFF ;
 8003314:	68bb      	ldr	r3, [r7, #8]
 8003316:	881b      	ldrh	r3, [r3, #0]
 8003318:	b2da      	uxtb	r2, r3
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	605a      	str	r2, [r3, #4]
}
 800331e:	e027      	b.n	8003370 <MCAL_USART_Send_Data+0xc8>
		else if (g_USART_Cfg[1]->PayLoad_Length == USART_PAYLOAD_9B) {
 8003320:	4b17      	ldr	r3, [pc, #92]	; (8003380 <MCAL_USART_Send_Data+0xd8>)
 8003322:	685b      	ldr	r3, [r3, #4]
 8003324:	891b      	ldrh	r3, [r3, #8]
 8003326:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800332a:	d121      	bne.n	8003370 <MCAL_USART_Send_Data+0xc8>
			USARTx->DR = (*data) & (uint16_t)0x1FF ;
 800332c:	68bb      	ldr	r3, [r7, #8]
 800332e:	881b      	ldrh	r3, [r3, #0]
 8003330:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	605a      	str	r2, [r3, #4]
}
 8003338:	e01a      	b.n	8003370 <MCAL_USART_Send_Data+0xc8>
	else if (USARTx == USART3) {
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	4a12      	ldr	r2, [pc, #72]	; (8003388 <MCAL_USART_Send_Data+0xe0>)
 800333e:	4293      	cmp	r3, r2
 8003340:	d116      	bne.n	8003370 <MCAL_USART_Send_Data+0xc8>
		if (g_USART_Cfg[2]->PayLoad_Length == USART_PAYLOAD_8B) {
 8003342:	4b0f      	ldr	r3, [pc, #60]	; (8003380 <MCAL_USART_Send_Data+0xd8>)
 8003344:	689b      	ldr	r3, [r3, #8]
 8003346:	891b      	ldrh	r3, [r3, #8]
 8003348:	2b00      	cmp	r3, #0
 800334a:	d105      	bne.n	8003358 <MCAL_USART_Send_Data+0xb0>
			USARTx->DR = (*data) & (uint8_t)0xFF ;
 800334c:	68bb      	ldr	r3, [r7, #8]
 800334e:	881b      	ldrh	r3, [r3, #0]
 8003350:	b2da      	uxtb	r2, r3
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	605a      	str	r2, [r3, #4]
}
 8003356:	e00b      	b.n	8003370 <MCAL_USART_Send_Data+0xc8>
		else if (g_USART_Cfg[2]->PayLoad_Length == USART_PAYLOAD_9B) {
 8003358:	4b09      	ldr	r3, [pc, #36]	; (8003380 <MCAL_USART_Send_Data+0xd8>)
 800335a:	689b      	ldr	r3, [r3, #8]
 800335c:	891b      	ldrh	r3, [r3, #8]
 800335e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003362:	d105      	bne.n	8003370 <MCAL_USART_Send_Data+0xc8>
			USARTx->DR = (*data) & (uint16_t)0x1FF ;
 8003364:	68bb      	ldr	r3, [r7, #8]
 8003366:	881b      	ldrh	r3, [r3, #0]
 8003368:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	605a      	str	r2, [r3, #4]
}
 8003370:	bf00      	nop
 8003372:	3714      	adds	r7, #20
 8003374:	46bd      	mov	sp, r7
 8003376:	bc80      	pop	{r7}
 8003378:	4770      	bx	lr
 800337a:	bf00      	nop
 800337c:	40013800 	.word	0x40013800
 8003380:	2000117c 	.word	0x2000117c
 8003384:	40004400 	.word	0x40004400
 8003388:	40004800 	.word	0x40004800

0800338c <MCAL_USART_Receive_Data>:
 * 						polling mechanism state (enable / disable)
 * 		@param[out]		-	none
 * 		@return value		-	none
 * 		Note			-	none
 */
void MCAL_USART_Receive_Data(USART_TypeDef* USARTx , uint16_t* data , EN_Polling_Mechanism polling_state) {
 800338c:	b480      	push	{r7}
 800338e:	b085      	sub	sp, #20
 8003390:	af00      	add	r7, sp, #0
 8003392:	60f8      	str	r0, [r7, #12]
 8003394:	60b9      	str	r1, [r7, #8]
 8003396:	4613      	mov	r3, r2
 8003398:	71fb      	strb	r3, [r7, #7]
	if (polling_state == enable) {
 800339a:	79fb      	ldrb	r3, [r7, #7]
 800339c:	2b01      	cmp	r3, #1
 800339e:	d106      	bne.n	80033ae <MCAL_USART_Receive_Data+0x22>
		// wait for RXNE flag to be set
		/*
		 *	It indicates that the content of the shift register is transferred to the RDR.
		 *	In other words, data has been received and can be read
		 */
		while (!(USARTx->SR & ((uint32_t)1 << 5))){}
 80033a0:	bf00      	nop
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	f003 0320 	and.w	r3, r3, #32
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d0f9      	beq.n	80033a2 <MCAL_USART_Receive_Data+0x16>
	}

	if (USARTx == USART1) {
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	4a4d      	ldr	r2, [pc, #308]	; (80034e8 <MCAL_USART_Receive_Data+0x15c>)
 80033b2:	4293      	cmp	r3, r2
 80033b4:	d12e      	bne.n	8003414 <MCAL_USART_Receive_Data+0x88>
		if (g_USART_Cfg[0]->PayLoad_Length == USART_PAYLOAD_9B) {			// 9 Bits Data
 80033b6:	4b4d      	ldr	r3, [pc, #308]	; (80034ec <MCAL_USART_Receive_Data+0x160>)
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	891b      	ldrh	r3, [r3, #8]
 80033bc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80033c0:	d112      	bne.n	80033e8 <MCAL_USART_Receive_Data+0x5c>
			if (g_USART_Cfg[0]->Parity == USART_PARITY_NONE) {
 80033c2:	4b4a      	ldr	r3, [pc, #296]	; (80034ec <MCAL_USART_Receive_Data+0x160>)
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	895b      	ldrh	r3, [r3, #10]
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d105      	bne.n	80033d8 <MCAL_USART_Receive_Data+0x4c>
				// All 9 bits are data
				*data = USARTx->DR ;
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	685b      	ldr	r3, [r3, #4]
 80033d0:	b29a      	uxth	r2, r3
 80033d2:	68bb      	ldr	r3, [r7, #8]
 80033d4:	801a      	strh	r2, [r3, #0]
				*data = USARTx->DR & (uint8_t)0x7F ;
			}
		}
	}
	else{}
}
 80033d6:	e082      	b.n	80034de <MCAL_USART_Receive_Data+0x152>
				*data = USARTx->DR & (uint8_t)0xFF ;
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	685b      	ldr	r3, [r3, #4]
 80033dc:	b29b      	uxth	r3, r3
 80033de:	b2db      	uxtb	r3, r3
 80033e0:	b29a      	uxth	r2, r3
 80033e2:	68bb      	ldr	r3, [r7, #8]
 80033e4:	801a      	strh	r2, [r3, #0]
}
 80033e6:	e07a      	b.n	80034de <MCAL_USART_Receive_Data+0x152>
			if (g_USART_Cfg[0]->Parity == USART_PARITY_NONE) {
 80033e8:	4b40      	ldr	r3, [pc, #256]	; (80034ec <MCAL_USART_Receive_Data+0x160>)
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	895b      	ldrh	r3, [r3, #10]
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d107      	bne.n	8003402 <MCAL_USART_Receive_Data+0x76>
				*data = USARTx->DR & (uint8_t)0xFF  ;
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	685b      	ldr	r3, [r3, #4]
 80033f6:	b29b      	uxth	r3, r3
 80033f8:	b2db      	uxtb	r3, r3
 80033fa:	b29a      	uxth	r2, r3
 80033fc:	68bb      	ldr	r3, [r7, #8]
 80033fe:	801a      	strh	r2, [r3, #0]
}
 8003400:	e06d      	b.n	80034de <MCAL_USART_Receive_Data+0x152>
				*data = USARTx->DR & (uint8_t)0x7F ;
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	685b      	ldr	r3, [r3, #4]
 8003406:	b29b      	uxth	r3, r3
 8003408:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800340c:	b29a      	uxth	r2, r3
 800340e:	68bb      	ldr	r3, [r7, #8]
 8003410:	801a      	strh	r2, [r3, #0]
}
 8003412:	e064      	b.n	80034de <MCAL_USART_Receive_Data+0x152>
	else if (USARTx == USART2) {
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	4a36      	ldr	r2, [pc, #216]	; (80034f0 <MCAL_USART_Receive_Data+0x164>)
 8003418:	4293      	cmp	r3, r2
 800341a:	d12e      	bne.n	800347a <MCAL_USART_Receive_Data+0xee>
		if (g_USART_Cfg[1]->PayLoad_Length == USART_PAYLOAD_9B) {			// 9 Bits Data
 800341c:	4b33      	ldr	r3, [pc, #204]	; (80034ec <MCAL_USART_Receive_Data+0x160>)
 800341e:	685b      	ldr	r3, [r3, #4]
 8003420:	891b      	ldrh	r3, [r3, #8]
 8003422:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003426:	d112      	bne.n	800344e <MCAL_USART_Receive_Data+0xc2>
			if (g_USART_Cfg[1]->Parity == USART_PARITY_NONE) {
 8003428:	4b30      	ldr	r3, [pc, #192]	; (80034ec <MCAL_USART_Receive_Data+0x160>)
 800342a:	685b      	ldr	r3, [r3, #4]
 800342c:	895b      	ldrh	r3, [r3, #10]
 800342e:	2b00      	cmp	r3, #0
 8003430:	d105      	bne.n	800343e <MCAL_USART_Receive_Data+0xb2>
				*data = USARTx->DR ;
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	685b      	ldr	r3, [r3, #4]
 8003436:	b29a      	uxth	r2, r3
 8003438:	68bb      	ldr	r3, [r7, #8]
 800343a:	801a      	strh	r2, [r3, #0]
}
 800343c:	e04f      	b.n	80034de <MCAL_USART_Receive_Data+0x152>
				*data = USARTx->DR & (uint8_t)0xFF ;
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	685b      	ldr	r3, [r3, #4]
 8003442:	b29b      	uxth	r3, r3
 8003444:	b2db      	uxtb	r3, r3
 8003446:	b29a      	uxth	r2, r3
 8003448:	68bb      	ldr	r3, [r7, #8]
 800344a:	801a      	strh	r2, [r3, #0]
}
 800344c:	e047      	b.n	80034de <MCAL_USART_Receive_Data+0x152>
			if (g_USART_Cfg[1]->Parity == USART_PARITY_NONE) {
 800344e:	4b27      	ldr	r3, [pc, #156]	; (80034ec <MCAL_USART_Receive_Data+0x160>)
 8003450:	685b      	ldr	r3, [r3, #4]
 8003452:	895b      	ldrh	r3, [r3, #10]
 8003454:	2b00      	cmp	r3, #0
 8003456:	d107      	bne.n	8003468 <MCAL_USART_Receive_Data+0xdc>
				*data = USARTx->DR & (uint8_t)0xFF  ;
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	685b      	ldr	r3, [r3, #4]
 800345c:	b29b      	uxth	r3, r3
 800345e:	b2db      	uxtb	r3, r3
 8003460:	b29a      	uxth	r2, r3
 8003462:	68bb      	ldr	r3, [r7, #8]
 8003464:	801a      	strh	r2, [r3, #0]
}
 8003466:	e03a      	b.n	80034de <MCAL_USART_Receive_Data+0x152>
				*data = USARTx->DR & (uint8_t)0x7F ;
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	685b      	ldr	r3, [r3, #4]
 800346c:	b29b      	uxth	r3, r3
 800346e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003472:	b29a      	uxth	r2, r3
 8003474:	68bb      	ldr	r3, [r7, #8]
 8003476:	801a      	strh	r2, [r3, #0]
}
 8003478:	e031      	b.n	80034de <MCAL_USART_Receive_Data+0x152>
	else if (USARTx == USART3) {
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	4a1d      	ldr	r2, [pc, #116]	; (80034f4 <MCAL_USART_Receive_Data+0x168>)
 800347e:	4293      	cmp	r3, r2
 8003480:	d12d      	bne.n	80034de <MCAL_USART_Receive_Data+0x152>
		if (g_USART_Cfg[2]->PayLoad_Length == USART_PAYLOAD_9B) {			// 9 Bits Data
 8003482:	4b1a      	ldr	r3, [pc, #104]	; (80034ec <MCAL_USART_Receive_Data+0x160>)
 8003484:	689b      	ldr	r3, [r3, #8]
 8003486:	891b      	ldrh	r3, [r3, #8]
 8003488:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800348c:	d112      	bne.n	80034b4 <MCAL_USART_Receive_Data+0x128>
			if (g_USART_Cfg[2]->Parity == USART_PARITY_NONE) {
 800348e:	4b17      	ldr	r3, [pc, #92]	; (80034ec <MCAL_USART_Receive_Data+0x160>)
 8003490:	689b      	ldr	r3, [r3, #8]
 8003492:	895b      	ldrh	r3, [r3, #10]
 8003494:	2b00      	cmp	r3, #0
 8003496:	d105      	bne.n	80034a4 <MCAL_USART_Receive_Data+0x118>
				*data = USARTx->DR ;
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	685b      	ldr	r3, [r3, #4]
 800349c:	b29a      	uxth	r2, r3
 800349e:	68bb      	ldr	r3, [r7, #8]
 80034a0:	801a      	strh	r2, [r3, #0]
}
 80034a2:	e01c      	b.n	80034de <MCAL_USART_Receive_Data+0x152>
				*data = USARTx->DR & (uint8_t)0xFF ;
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	685b      	ldr	r3, [r3, #4]
 80034a8:	b29b      	uxth	r3, r3
 80034aa:	b2db      	uxtb	r3, r3
 80034ac:	b29a      	uxth	r2, r3
 80034ae:	68bb      	ldr	r3, [r7, #8]
 80034b0:	801a      	strh	r2, [r3, #0]
}
 80034b2:	e014      	b.n	80034de <MCAL_USART_Receive_Data+0x152>
			if (g_USART_Cfg[2]->Parity == USART_PARITY_NONE) {
 80034b4:	4b0d      	ldr	r3, [pc, #52]	; (80034ec <MCAL_USART_Receive_Data+0x160>)
 80034b6:	689b      	ldr	r3, [r3, #8]
 80034b8:	895b      	ldrh	r3, [r3, #10]
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d107      	bne.n	80034ce <MCAL_USART_Receive_Data+0x142>
				*data = USARTx->DR & (uint8_t)0xFF  ;
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	685b      	ldr	r3, [r3, #4]
 80034c2:	b29b      	uxth	r3, r3
 80034c4:	b2db      	uxtb	r3, r3
 80034c6:	b29a      	uxth	r2, r3
 80034c8:	68bb      	ldr	r3, [r7, #8]
 80034ca:	801a      	strh	r2, [r3, #0]
}
 80034cc:	e007      	b.n	80034de <MCAL_USART_Receive_Data+0x152>
				*data = USARTx->DR & (uint8_t)0x7F ;
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	685b      	ldr	r3, [r3, #4]
 80034d2:	b29b      	uxth	r3, r3
 80034d4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80034d8:	b29a      	uxth	r2, r3
 80034da:	68bb      	ldr	r3, [r7, #8]
 80034dc:	801a      	strh	r2, [r3, #0]
}
 80034de:	bf00      	nop
 80034e0:	3714      	adds	r7, #20
 80034e2:	46bd      	mov	sp, r7
 80034e4:	bc80      	pop	{r7}
 80034e6:	4770      	bx	lr
 80034e8:	40013800 	.word	0x40013800
 80034ec:	2000117c 	.word	0x2000117c
 80034f0:	40004400 	.word	0x40004400
 80034f4:	40004800 	.word	0x40004800

080034f8 <USART1_IRQHandler>:




//-------------------------------------------ISRs---------------------------------------------------
void USART1_IRQHandler (void) {
 80034f8:	b580      	push	{r7, lr}
 80034fa:	af00      	add	r7, sp, #0
	g_USART_Cfg[0]->p_IRQ_CallBack() ;
 80034fc:	4b02      	ldr	r3, [pc, #8]	; (8003508 <USART1_IRQHandler+0x10>)
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	695b      	ldr	r3, [r3, #20]
 8003502:	4798      	blx	r3
}
 8003504:	bf00      	nop
 8003506:	bd80      	pop	{r7, pc}
 8003508:	2000117c 	.word	0x2000117c

0800350c <USART2_IRQHandler>:
void USART2_IRQHandler (void) {
 800350c:	b580      	push	{r7, lr}
 800350e:	af00      	add	r7, sp, #0
	g_USART_Cfg[1]->p_IRQ_CallBack() ;
 8003510:	4b02      	ldr	r3, [pc, #8]	; (800351c <USART2_IRQHandler+0x10>)
 8003512:	685b      	ldr	r3, [r3, #4]
 8003514:	695b      	ldr	r3, [r3, #20]
 8003516:	4798      	blx	r3
}
 8003518:	bf00      	nop
 800351a:	bd80      	pop	{r7, pc}
 800351c:	2000117c 	.word	0x2000117c

08003520 <USART3_IRQHandler>:
void USART3_IRQHandler (void) {
 8003520:	b580      	push	{r7, lr}
 8003522:	af00      	add	r7, sp, #0
	g_USART_Cfg[2]->p_IRQ_CallBack() ;
 8003524:	4b02      	ldr	r3, [pc, #8]	; (8003530 <USART3_IRQHandler+0x10>)
 8003526:	689b      	ldr	r3, [r3, #8]
 8003528:	695b      	ldr	r3, [r3, #20]
 800352a:	4798      	blx	r3
}
 800352c:	bf00      	nop
 800352e:	bd80      	pop	{r7, pc}
 8003530:	2000117c 	.word	0x2000117c

08003534 <ROCKBLOCK_Call_Back>:
#include "main.h"



/////////////////////////////////////ISR/////////////////////
void  ROCKBLOCK_Call_Back (void) {
 8003534:	b580      	push	{r7, lr}
 8003536:	af00      	add	r7, sp, #0
 //check from status Flag IF interrupt from TX OR RX.
    if((USART1->SR & ((uint32_t)1 << 7)) != 0)   //check if tx Register is empty.
 8003538:	4b18      	ldr	r3, [pc, #96]	; (800359c <ROCKBLOCK_Call_Back+0x68>)
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003540:	2b00      	cmp	r3, #0
 8003542:	d128      	bne.n	8003596 <ROCKBLOCK_Call_Back+0x62>
//do what ever here...when transmit is ended .....

    }
    else{
     static uint8_t i=0;
	MCAL_USART_Receive_Data(USART1, &ch, disable) ;
 8003544:	2200      	movs	r2, #0
 8003546:	4916      	ldr	r1, [pc, #88]	; (80035a0 <ROCKBLOCK_Call_Back+0x6c>)
 8003548:	4814      	ldr	r0, [pc, #80]	; (800359c <ROCKBLOCK_Call_Back+0x68>)
 800354a:	f7ff ff1f 	bl	800338c <MCAL_USART_Receive_Data>
     if(ch != '\r'){
 800354e:	4b14      	ldr	r3, [pc, #80]	; (80035a0 <ROCKBLOCK_Call_Back+0x6c>)
 8003550:	881b      	ldrh	r3, [r3, #0]
 8003552:	2b0d      	cmp	r3, #13
 8003554:	d00e      	beq.n	8003574 <ROCKBLOCK_Call_Back+0x40>
    	String_Data[i]=ch;   // Store it in array.
 8003556:	4b13      	ldr	r3, [pc, #76]	; (80035a4 <ROCKBLOCK_Call_Back+0x70>)
 8003558:	781b      	ldrb	r3, [r3, #0]
 800355a:	461a      	mov	r2, r3
 800355c:	4b10      	ldr	r3, [pc, #64]	; (80035a0 <ROCKBLOCK_Call_Back+0x6c>)
 800355e:	8819      	ldrh	r1, [r3, #0]
 8003560:	4b11      	ldr	r3, [pc, #68]	; (80035a8 <ROCKBLOCK_Call_Back+0x74>)
 8003562:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
    	i++;
 8003566:	4b0f      	ldr	r3, [pc, #60]	; (80035a4 <ROCKBLOCK_Call_Back+0x70>)
 8003568:	781b      	ldrb	r3, [r3, #0]
 800356a:	3301      	adds	r3, #1
 800356c:	b2da      	uxtb	r2, r3
 800356e:	4b0d      	ldr	r3, [pc, #52]	; (80035a4 <ROCKBLOCK_Call_Back+0x70>)
 8003570:	701a      	strb	r2, [r3, #0]

     }
   }


}
 8003572:	e010      	b.n	8003596 <ROCKBLOCK_Call_Back+0x62>
    	 String_Data[i]='\0';
 8003574:	4b0b      	ldr	r3, [pc, #44]	; (80035a4 <ROCKBLOCK_Call_Back+0x70>)
 8003576:	781b      	ldrb	r3, [r3, #0]
 8003578:	461a      	mov	r2, r3
 800357a:	4b0b      	ldr	r3, [pc, #44]	; (80035a8 <ROCKBLOCK_Call_Back+0x74>)
 800357c:	2100      	movs	r1, #0
 800357e:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
    	 i=0;   //Reset Index
 8003582:	4b08      	ldr	r3, [pc, #32]	; (80035a4 <ROCKBLOCK_Call_Back+0x70>)
 8003584:	2200      	movs	r2, #0
 8003586:	701a      	strb	r2, [r3, #0]
    xTaskNotify(Relay_Task_Handle,0x0,eNoAction);
 8003588:	4b08      	ldr	r3, [pc, #32]	; (80035ac <ROCKBLOCK_Call_Back+0x78>)
 800358a:	6818      	ldr	r0, [r3, #0]
 800358c:	2300      	movs	r3, #0
 800358e:	2200      	movs	r2, #0
 8003590:	2100      	movs	r1, #0
 8003592:	f7fe f9ab 	bl	80018ec <xTaskGenericNotify>
}
 8003596:	bf00      	nop
 8003598:	bd80      	pop	{r7, pc}
 800359a:	bf00      	nop
 800359c:	40013800 	.word	0x40013800
 80035a0:	2000121c 	.word	0x2000121c
 80035a4:	2000118c 	.word	0x2000118c
 80035a8:	2000120c 	.word	0x2000120c
 80035ac:	20001188 	.word	0x20001188

080035b0 <main>:



int main(void)
{
 80035b0:	b580      	push	{r7, lr}
 80035b2:	b082      	sub	sp, #8
 80035b4:	af02      	add	r7, sp, #8
     ///init_pins//
	GPIO_Init();
 80035b6:	f000 f8b3 	bl	8003720 <GPIO_Init>
      ///init Rock_Block
	HAL_Usart_RockBlock__Init();
 80035ba:	f7ff f93f 	bl	800283c <HAL_Usart_RockBlock__Init>
	//////////Create Task_Relay///////
	xTaskCreate(Relay_Task, "Relay_Task", configMINIMAL_STACK_SIZE, NULL, 2, &Relay_Task_Handle);
 80035be:	4b0b      	ldr	r3, [pc, #44]	; (80035ec <main+0x3c>)
 80035c0:	9301      	str	r3, [sp, #4]
 80035c2:	2302      	movs	r3, #2
 80035c4:	9300      	str	r3, [sp, #0]
 80035c6:	2300      	movs	r3, #0
 80035c8:	2280      	movs	r2, #128	; 0x80
 80035ca:	4909      	ldr	r1, [pc, #36]	; (80035f0 <main+0x40>)
 80035cc:	4809      	ldr	r0, [pc, #36]	; (80035f4 <main+0x44>)
 80035ce:	f7fd fb27 	bl	8000c20 <xTaskCreate>
	/////////////////Create System_X_Check_Task/////////
	xTaskCreate(check_system_x, "check_system_x", configMINIMAL_STACK_SIZE, NULL, 2, NULL);
 80035d2:	2300      	movs	r3, #0
 80035d4:	9301      	str	r3, [sp, #4]
 80035d6:	2302      	movs	r3, #2
 80035d8:	9300      	str	r3, [sp, #0]
 80035da:	2300      	movs	r3, #0
 80035dc:	2280      	movs	r2, #128	; 0x80
 80035de:	4906      	ldr	r1, [pc, #24]	; (80035f8 <main+0x48>)
 80035e0:	4806      	ldr	r0, [pc, #24]	; (80035fc <main+0x4c>)
 80035e2:	f7fd fb1d 	bl	8000c20 <xTaskCreate>

	//
   vTaskStartScheduler();
 80035e6:	f7fd fc87 	bl	8000ef8 <vTaskStartScheduler>

	while (1) {
 80035ea:	e7fe      	b.n	80035ea <main+0x3a>
 80035ec:	20001188 	.word	0x20001188
 80035f0:	08003864 	.word	0x08003864
 80035f4:	08003601 	.word	0x08003601
 80035f8:	08003870 	.word	0x08003870
 80035fc:	08003681 	.word	0x08003681

08003600 <Relay_Task>:

}



void Relay_Task(void*params){
 8003600:	b590      	push	{r4, r7, lr}
 8003602:	b08b      	sub	sp, #44	; 0x2c
 8003604:	af00      	add	r7, sp, #0
 8003606:	6078      	str	r0, [r7, #4]
	//Task Notification
	//xTaskNotifyWait(ulBitsToClearOnEntry, ulBitsToClearOnExit, pulNotificationValue, xTicksToWait)
	//xTaskNotifyFromISR()
	//uint16_t* TURNON=(uint16_t*)"TURNON";
	//uint16_t* TURNOFF=(uint16_t*)"TURNOFF";
	uint16_t TURNON []={'T','U','R','N','O','N','\0'};
 8003608:	4b19      	ldr	r3, [pc, #100]	; (8003670 <Relay_Task+0x70>)
 800360a:	f107 0418 	add.w	r4, r7, #24
 800360e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003610:	c407      	stmia	r4!, {r0, r1, r2}
 8003612:	8023      	strh	r3, [r4, #0]
	uint16_t TURNOFF []={'T','U','R','N','O','F','F','\0'};
 8003614:	4b17      	ldr	r3, [pc, #92]	; (8003674 <Relay_Task+0x74>)
 8003616:	f107 0408 	add.w	r4, r7, #8
 800361a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800361c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	while(1){
	if(xTaskNotifyWait(0, 0, NULL, portMAX_DELAY)==pdTRUE){
 8003620:	f04f 33ff 	mov.w	r3, #4294967295
 8003624:	2200      	movs	r2, #0
 8003626:	2100      	movs	r1, #0
 8003628:	2000      	movs	r0, #0
 800362a:	f7fe f905 	bl	8001838 <xTaskNotifyWait>
 800362e:	4603      	mov	r3, r0
 8003630:	2b01      	cmp	r3, #1
 8003632:	d1f5      	bne.n	8003620 <Relay_Task+0x20>
      //Compare String In String_Data.


		if(string_compare(String_Data,TURNON ) == TRUE){
 8003634:	f107 0318 	add.w	r3, r7, #24
 8003638:	4619      	mov	r1, r3
 800363a:	480f      	ldr	r0, [pc, #60]	; (8003678 <Relay_Task+0x78>)
 800363c:	f000 f834 	bl	80036a8 <string_compare>
 8003640:	4603      	mov	r3, r0
 8003642:	2b01      	cmp	r3, #1
 8003644:	d105      	bne.n	8003652 <Relay_Task+0x52>
   		 //turn on Relay
   		 MCAL_GPIO_WritePin(GPIOB,GPIO_PIN_2, GPIO_PIN_SET);
 8003646:	2201      	movs	r2, #1
 8003648:	2104      	movs	r1, #4
 800364a:	480c      	ldr	r0, [pc, #48]	; (800367c <Relay_Task+0x7c>)
 800364c:	f7ff fbbf 	bl	8002dce <MCAL_GPIO_WritePin>
 8003650:	e7e6      	b.n	8003620 <Relay_Task+0x20>

   	           }

   	  else if(string_compare(String_Data,TURNOFF)== TRUE)
 8003652:	f107 0308 	add.w	r3, r7, #8
 8003656:	4619      	mov	r1, r3
 8003658:	4807      	ldr	r0, [pc, #28]	; (8003678 <Relay_Task+0x78>)
 800365a:	f000 f825 	bl	80036a8 <string_compare>
 800365e:	4603      	mov	r3, r0
 8003660:	2b01      	cmp	r3, #1
 8003662:	d1dd      	bne.n	8003620 <Relay_Task+0x20>
   		 {
   		 //Turn off Relay.
   			 MCAL_GPIO_WritePin(GPIOB,GPIO_PIN_2, GPIO_PIN_RESET);
 8003664:	2200      	movs	r2, #0
 8003666:	2104      	movs	r1, #4
 8003668:	4804      	ldr	r0, [pc, #16]	; (800367c <Relay_Task+0x7c>)
 800366a:	f7ff fbb0 	bl	8002dce <MCAL_GPIO_WritePin>
	if(xTaskNotifyWait(0, 0, NULL, portMAX_DELAY)==pdTRUE){
 800366e:	e7d7      	b.n	8003620 <Relay_Task+0x20>
 8003670:	08003880 	.word	0x08003880
 8003674:	08003890 	.word	0x08003890
 8003678:	2000120c 	.word	0x2000120c
 800367c:	40010c00 	.word	0x40010c00

08003680 <check_system_x>:
 * 		@param[out]		-	  None
 * 		@return value		-	None
 * 		Note			-	None
 */

void check_system_x(void* params){
 8003680:	b580      	push	{r7, lr}
 8003682:	b082      	sub	sp, #8
 8003684:	af00      	add	r7, sp, #0
 8003686:	6078      	str	r0, [r7, #4]

	while(1){
	if(MCAL_GPIO_ReadPin(GPIOB,GPIO_PIN_3) == GPIO_PIN_RESET)  //Detect active low
 8003688:	2108      	movs	r1, #8
 800368a:	4806      	ldr	r0, [pc, #24]	; (80036a4 <check_system_x+0x24>)
 800368c:	f7ff fb8b 	bl	8002da6 <MCAL_GPIO_ReadPin>
 8003690:	4603      	mov	r3, r0
 8003692:	2b00      	cmp	r3, #0
 8003694:	d1f8      	bne.n	8003688 <check_system_x+0x8>
	{

    HAL_ROCKBLOCK_Send_ALERT();
 8003696:	f7ff f8f5 	bl	8002884 <HAL_ROCKBLOCK_Send_ALERT>
		vTaskDelay(10);   //  Send Alert Every 10 MS
 800369a:	200a      	movs	r0, #10
 800369c:	f7fd fbf8 	bl	8000e90 <vTaskDelay>
	if(MCAL_GPIO_ReadPin(GPIOB,GPIO_PIN_3) == GPIO_PIN_RESET)  //Detect active low
 80036a0:	e7f2      	b.n	8003688 <check_system_x+0x8>
 80036a2:	bf00      	nop
 80036a4:	40010c00 	.word	0x40010c00

080036a8 <string_compare>:
 * 		Note			-	the String len shouldn't exceed 255 character len.
 */


uint8_t string_compare(uint16_t* str1, uint16_t* str2)
{
 80036a8:	b480      	push	{r7}
 80036aa:	b085      	sub	sp, #20
 80036ac:	af00      	add	r7, sp, #0
 80036ae:	6078      	str	r0, [r7, #4]
 80036b0:	6039      	str	r1, [r7, #0]
    uint8_t ctr=0;
 80036b2:	2300      	movs	r3, #0
 80036b4:	73fb      	strb	r3, [r7, #15]

    while(str1[ctr]==str2[ctr])
 80036b6:	e010      	b.n	80036da <string_compare+0x32>
    {
        if(str1[ctr]==(uint16_t)'\0'||str2[ctr]==(uint16_t)'\0'){
 80036b8:	7bfb      	ldrb	r3, [r7, #15]
 80036ba:	005b      	lsls	r3, r3, #1
 80036bc:	687a      	ldr	r2, [r7, #4]
 80036be:	4413      	add	r3, r2
 80036c0:	881b      	ldrh	r3, [r3, #0]
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d015      	beq.n	80036f2 <string_compare+0x4a>
 80036c6:	7bfb      	ldrb	r3, [r7, #15]
 80036c8:	005b      	lsls	r3, r3, #1
 80036ca:	683a      	ldr	r2, [r7, #0]
 80036cc:	4413      	add	r3, r2
 80036ce:	881b      	ldrh	r3, [r3, #0]
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d00e      	beq.n	80036f2 <string_compare+0x4a>
            break;
        }
        ctr++;
 80036d4:	7bfb      	ldrb	r3, [r7, #15]
 80036d6:	3301      	adds	r3, #1
 80036d8:	73fb      	strb	r3, [r7, #15]
    while(str1[ctr]==str2[ctr])
 80036da:	7bfb      	ldrb	r3, [r7, #15]
 80036dc:	005b      	lsls	r3, r3, #1
 80036de:	687a      	ldr	r2, [r7, #4]
 80036e0:	4413      	add	r3, r2
 80036e2:	881a      	ldrh	r2, [r3, #0]
 80036e4:	7bfb      	ldrb	r3, [r7, #15]
 80036e6:	005b      	lsls	r3, r3, #1
 80036e8:	6839      	ldr	r1, [r7, #0]
 80036ea:	440b      	add	r3, r1
 80036ec:	881b      	ldrh	r3, [r3, #0]
 80036ee:	429a      	cmp	r2, r3
 80036f0:	d0e2      	beq.n	80036b8 <string_compare+0x10>
    }
    if(str1[ctr]==(uint16_t)'\0' && str2[ctr]==(uint16_t)'\0')
 80036f2:	7bfb      	ldrb	r3, [r7, #15]
 80036f4:	005b      	lsls	r3, r3, #1
 80036f6:	687a      	ldr	r2, [r7, #4]
 80036f8:	4413      	add	r3, r2
 80036fa:	881b      	ldrh	r3, [r3, #0]
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d108      	bne.n	8003712 <string_compare+0x6a>
 8003700:	7bfb      	ldrb	r3, [r7, #15]
 8003702:	005b      	lsls	r3, r3, #1
 8003704:	683a      	ldr	r2, [r7, #0]
 8003706:	4413      	add	r3, r2
 8003708:	881b      	ldrh	r3, [r3, #0]
 800370a:	2b00      	cmp	r3, #0
 800370c:	d101      	bne.n	8003712 <string_compare+0x6a>
    {
        return 1;
 800370e:	2301      	movs	r3, #1
 8003710:	e000      	b.n	8003714 <string_compare+0x6c>
    }
        else
        {
        return 0;
 8003712:	2300      	movs	r3, #0

        }
}
 8003714:	4618      	mov	r0, r3
 8003716:	3714      	adds	r7, #20
 8003718:	46bd      	mov	sp, r7
 800371a:	bc80      	pop	{r7}
 800371c:	4770      	bx	lr
	...

08003720 <GPIO_Init>:
 * 		@param[out]		-	  None
 * 		@return value		-	None
 * 		Note			-	None.
 */

void GPIO_Init(void){
 8003720:	b580      	push	{r7, lr}
 8003722:	b082      	sub	sp, #8
 8003724:	af00      	add	r7, sp, #0
	GPIO_PinConfig_t gpio_PB2;
	gpio_PB2.GPIO_PinNumber = GPIO_PIN_2;
 8003726:	2304      	movs	r3, #4
 8003728:	80bb      	strh	r3, [r7, #4]
	gpio_PB2.GPIO_MODE = GPIO_MODE_OUTPUT_PUSH_PULL;
 800372a:	2304      	movs	r3, #4
 800372c:	71bb      	strb	r3, [r7, #6]
	gpio_PB2.GPIO_Output_Speed= GPIO_SPEED_10M;
 800372e:	2301      	movs	r3, #1
 8003730:	71fb      	strb	r3, [r7, #7]
	MCAL_GPIO_Init(GPIOB, &gpio_PB2);  ///init pin
 8003732:	1d3b      	adds	r3, r7, #4
 8003734:	4619      	mov	r1, r3
 8003736:	4809      	ldr	r0, [pc, #36]	; (800375c <GPIO_Init+0x3c>)
 8003738:	f7ff fa86 	bl	8002c48 <MCAL_GPIO_Init>
      //MCAL_GPIO_Init(GPIOx, PinConfig)

	////////input from system x  active low//////////
	GPIO_PinConfig_t gpio_PB3;
	gpio_PB2.GPIO_PinNumber = GPIO_PIN_3;
 800373c:	2308      	movs	r3, #8
 800373e:	80bb      	strh	r3, [r7, #4]
	gpio_PB2.GPIO_MODE = GPIO_MODE_INPUT_PULL_UP;  //active low
 8003740:	2302      	movs	r3, #2
 8003742:	71bb      	strb	r3, [r7, #6]
	gpio_PB2.GPIO_Output_Speed= GPIO_SPEED_10M;
 8003744:	2301      	movs	r3, #1
 8003746:	71fb      	strb	r3, [r7, #7]
	MCAL_GPIO_Init(GPIOB, &gpio_PB3);  ///init pin
 8003748:	463b      	mov	r3, r7
 800374a:	4619      	mov	r1, r3
 800374c:	4803      	ldr	r0, [pc, #12]	; (800375c <GPIO_Init+0x3c>)
 800374e:	f7ff fa7b 	bl	8002c48 <MCAL_GPIO_Init>




}
 8003752:	bf00      	nop
 8003754:	3708      	adds	r7, #8
 8003756:	46bd      	mov	sp, r7
 8003758:	bd80      	pop	{r7, pc}
 800375a:	bf00      	nop
 800375c:	40010c00 	.word	0x40010c00

08003760 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8003760:	480d      	ldr	r0, [pc, #52]	; (8003798 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8003762:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8003764:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003768:	480c      	ldr	r0, [pc, #48]	; (800379c <LoopForever+0x6>)
  ldr r1, =_edata
 800376a:	490d      	ldr	r1, [pc, #52]	; (80037a0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800376c:	4a0d      	ldr	r2, [pc, #52]	; (80037a4 <LoopForever+0xe>)
  movs r3, #0
 800376e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003770:	e002      	b.n	8003778 <LoopCopyDataInit>

08003772 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003772:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003774:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003776:	3304      	adds	r3, #4

08003778 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003778:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800377a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800377c:	d3f9      	bcc.n	8003772 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800377e:	4a0a      	ldr	r2, [pc, #40]	; (80037a8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8003780:	4c0a      	ldr	r4, [pc, #40]	; (80037ac <LoopForever+0x16>)
  movs r3, #0
 8003782:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003784:	e001      	b.n	800378a <LoopFillZerobss>

08003786 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003786:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003788:	3204      	adds	r2, #4

0800378a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800378a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800378c:	d3fb      	bcc.n	8003786 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800378e:	f000 f811 	bl	80037b4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8003792:	f7ff ff0d 	bl	80035b0 <main>

08003796 <LoopForever>:

LoopForever:
    b LoopForever
 8003796:	e7fe      	b.n	8003796 <LoopForever>
  ldr   r0, =_estack
 8003798:	20002800 	.word	0x20002800
  ldr r0, =_sdata
 800379c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80037a0:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 80037a4:	080038a8 	.word	0x080038a8
  ldr r2, =_sbss
 80037a8:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 80037ac:	20001220 	.word	0x20001220

080037b0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80037b0:	e7fe      	b.n	80037b0 <ADC1_2_IRQHandler>
	...

080037b4 <__libc_init_array>:
 80037b4:	b570      	push	{r4, r5, r6, lr}
 80037b6:	2600      	movs	r6, #0
 80037b8:	4d0c      	ldr	r5, [pc, #48]	; (80037ec <__libc_init_array+0x38>)
 80037ba:	4c0d      	ldr	r4, [pc, #52]	; (80037f0 <__libc_init_array+0x3c>)
 80037bc:	1b64      	subs	r4, r4, r5
 80037be:	10a4      	asrs	r4, r4, #2
 80037c0:	42a6      	cmp	r6, r4
 80037c2:	d109      	bne.n	80037d8 <__libc_init_array+0x24>
 80037c4:	f000 f830 	bl	8003828 <_init>
 80037c8:	2600      	movs	r6, #0
 80037ca:	4d0a      	ldr	r5, [pc, #40]	; (80037f4 <__libc_init_array+0x40>)
 80037cc:	4c0a      	ldr	r4, [pc, #40]	; (80037f8 <__libc_init_array+0x44>)
 80037ce:	1b64      	subs	r4, r4, r5
 80037d0:	10a4      	asrs	r4, r4, #2
 80037d2:	42a6      	cmp	r6, r4
 80037d4:	d105      	bne.n	80037e2 <__libc_init_array+0x2e>
 80037d6:	bd70      	pop	{r4, r5, r6, pc}
 80037d8:	f855 3b04 	ldr.w	r3, [r5], #4
 80037dc:	4798      	blx	r3
 80037de:	3601      	adds	r6, #1
 80037e0:	e7ee      	b.n	80037c0 <__libc_init_array+0xc>
 80037e2:	f855 3b04 	ldr.w	r3, [r5], #4
 80037e6:	4798      	blx	r3
 80037e8:	3601      	adds	r6, #1
 80037ea:	e7f2      	b.n	80037d2 <__libc_init_array+0x1e>
 80037ec:	080038a0 	.word	0x080038a0
 80037f0:	080038a0 	.word	0x080038a0
 80037f4:	080038a0 	.word	0x080038a0
 80037f8:	080038a4 	.word	0x080038a4

080037fc <memcpy>:
 80037fc:	440a      	add	r2, r1
 80037fe:	4291      	cmp	r1, r2
 8003800:	f100 33ff 	add.w	r3, r0, #4294967295
 8003804:	d100      	bne.n	8003808 <memcpy+0xc>
 8003806:	4770      	bx	lr
 8003808:	b510      	push	{r4, lr}
 800380a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800380e:	4291      	cmp	r1, r2
 8003810:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003814:	d1f9      	bne.n	800380a <memcpy+0xe>
 8003816:	bd10      	pop	{r4, pc}

08003818 <memset>:
 8003818:	4603      	mov	r3, r0
 800381a:	4402      	add	r2, r0
 800381c:	4293      	cmp	r3, r2
 800381e:	d100      	bne.n	8003822 <memset+0xa>
 8003820:	4770      	bx	lr
 8003822:	f803 1b01 	strb.w	r1, [r3], #1
 8003826:	e7f9      	b.n	800381c <memset+0x4>

08003828 <_init>:
 8003828:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800382a:	bf00      	nop
 800382c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800382e:	bc08      	pop	{r3}
 8003830:	469e      	mov	lr, r3
 8003832:	4770      	bx	lr

08003834 <_fini>:
 8003834:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003836:	bf00      	nop
 8003838:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800383a:	bc08      	pop	{r3}
 800383c:	469e      	mov	lr, r3
 800383e:	4770      	bx	lr
